### YamlMime:ManagedReference
items:
- uid: LlamaLogic.Packages.DataBasePackedFile
  commentId: T:LlamaLogic.Packages.DataBasePackedFile
  id: DataBasePackedFile
  parent: LlamaLogic.Packages
  children:
  - LlamaLogic.Packages.DataBasePackedFile.#ctor
  - LlamaLogic.Packages.DataBasePackedFile.#ctor(System.IO.Stream)
  - LlamaLogic.Packages.DataBasePackedFile.#ctor(System.String,System.Boolean)
  - LlamaLogic.Packages.DataBasePackedFile.CanSaveInPlace
  - LlamaLogic.Packages.DataBasePackedFile.ContainsKey(LlamaLogic.Packages.ResourceKey)
  - LlamaLogic.Packages.DataBasePackedFile.ContainsKeyAsync(LlamaLogic.Packages.ResourceKey,System.Threading.CancellationToken)
  - LlamaLogic.Packages.DataBasePackedFile.CopyTo(System.IO.Stream,LlamaLogic.Packages.ResourceKeyOrder)
  - LlamaLogic.Packages.DataBasePackedFile.CopyToAsync(System.IO.Stream,LlamaLogic.Packages.ResourceKeyOrder,System.Threading.CancellationToken)
  - LlamaLogic.Packages.DataBasePackedFile.Count
  - LlamaLogic.Packages.DataBasePackedFile.CreationTime
  - LlamaLogic.Packages.DataBasePackedFile.Delete(LlamaLogic.Packages.ResourceKey)
  - LlamaLogic.Packages.DataBasePackedFile.Dispose
  - LlamaLogic.Packages.DataBasePackedFile.DisposeAsync
  - LlamaLogic.Packages.DataBasePackedFile.FileVersion
  - LlamaLogic.Packages.DataBasePackedFile.Finalize
  - LlamaLogic.Packages.DataBasePackedFile.ForEach(LlamaLogic.Packages.ResourceKeyOrder,System.Predicate{LlamaLogic.Packages.ResourceKey},System.Action{LlamaLogic.Packages.ResourceKey,System.ReadOnlyMemory{System.Byte}},System.Threading.CancellationToken)
  - LlamaLogic.Packages.DataBasePackedFile.ForEachAsync(LlamaLogic.Packages.ResourceKeyOrder,System.Predicate{LlamaLogic.Packages.ResourceKey},System.Func{LlamaLogic.Packages.ResourceKey,System.ReadOnlyMemory{System.Byte},System.Threading.Tasks.Task},System.Threading.CancellationToken)
  - LlamaLogic.Packages.DataBasePackedFile.ForEachRaw(LlamaLogic.Packages.ResourceKeyOrder,System.Predicate{LlamaLogic.Packages.ResourceKey},System.Action{LlamaLogic.Packages.ResourceKey,System.ReadOnlyMemory{System.Byte}},System.Threading.CancellationToken)
  - LlamaLogic.Packages.DataBasePackedFile.ForEachRawAsync(LlamaLogic.Packages.ResourceKeyOrder,System.Predicate{LlamaLogic.Packages.ResourceKey},System.Func{LlamaLogic.Packages.ResourceKey,System.ReadOnlyMemory{System.Byte},System.Threading.Tasks.Task},System.Threading.CancellationToken)
  - LlamaLogic.Packages.DataBasePackedFile.FromPathAsync(System.String,System.Boolean)
  - LlamaLogic.Packages.DataBasePackedFile.FromStreamAsync(System.IO.Stream,System.Threading.CancellationToken)
  - LlamaLogic.Packages.DataBasePackedFile.Get(LlamaLogic.Packages.ResourceKey,System.Boolean)
  - LlamaLogic.Packages.DataBasePackedFile.GetAllSizes(System.Predicate{LlamaLogic.Packages.ResourceKey})
  - LlamaLogic.Packages.DataBasePackedFile.GetAllSizesAsync(System.Predicate{LlamaLogic.Packages.ResourceKey},System.Threading.CancellationToken)
  - LlamaLogic.Packages.DataBasePackedFile.GetAsync(LlamaLogic.Packages.ResourceKey,System.Boolean,System.Threading.CancellationToken)
  - LlamaLogic.Packages.DataBasePackedFile.GetCount
  - LlamaLogic.Packages.DataBasePackedFile.GetCountAsync(System.Threading.CancellationToken)
  - LlamaLogic.Packages.DataBasePackedFile.GetData(LlamaLogic.Packages.ResourceKey,System.Boolean)
  - LlamaLogic.Packages.DataBasePackedFile.GetDataAsync(LlamaLogic.Packages.ResourceKey,System.Boolean,System.Threading.CancellationToken)
  - LlamaLogic.Packages.DataBasePackedFile.GetKeys(LlamaLogic.Packages.ResourceKeyOrder)
  - LlamaLogic.Packages.DataBasePackedFile.GetKeysAsync(LlamaLogic.Packages.ResourceKeyOrder,System.Threading.CancellationToken)
  - LlamaLogic.Packages.DataBasePackedFile.GetKeysByName(System.String)
  - LlamaLogic.Packages.DataBasePackedFile.GetKeysByNameAsync(System.String,System.Threading.CancellationToken)
  - LlamaLogic.Packages.DataBasePackedFile.GetModFileManifest(LlamaLogic.Packages.ResourceKey,System.Boolean)
  - LlamaLogic.Packages.DataBasePackedFile.GetModFileManifestAsync(LlamaLogic.Packages.ResourceKey,System.Boolean,System.Threading.CancellationToken)
  - LlamaLogic.Packages.DataBasePackedFile.GetModelAsync``1(LlamaLogic.Packages.ResourceKey,System.Boolean,System.Threading.CancellationToken)
  - LlamaLogic.Packages.DataBasePackedFile.GetModel``1(LlamaLogic.Packages.ResourceKey,System.Boolean)
  - LlamaLogic.Packages.DataBasePackedFile.GetNameByKey(LlamaLogic.Packages.ResourceKey)
  - LlamaLogic.Packages.DataBasePackedFile.GetNameByKeyAsync(LlamaLogic.Packages.ResourceKey,System.Threading.CancellationToken)
  - LlamaLogic.Packages.DataBasePackedFile.GetNames
  - LlamaLogic.Packages.DataBasePackedFile.GetNamesAsync(System.Threading.CancellationToken)
  - LlamaLogic.Packages.DataBasePackedFile.GetRaw(LlamaLogic.Packages.ResourceKey,System.Boolean)
  - LlamaLogic.Packages.DataBasePackedFile.GetRawAsync(LlamaLogic.Packages.ResourceKey,System.Boolean,System.Threading.CancellationToken)
  - LlamaLogic.Packages.DataBasePackedFile.GetSize(LlamaLogic.Packages.ResourceKey)
  - LlamaLogic.Packages.DataBasePackedFile.GetSizeAsync(LlamaLogic.Packages.ResourceKey,System.Threading.CancellationToken)
  - LlamaLogic.Packages.DataBasePackedFile.GetStringTable(LlamaLogic.Packages.ResourceKey,System.Boolean)
  - LlamaLogic.Packages.DataBasePackedFile.GetStringTableAsync(LlamaLogic.Packages.ResourceKey,System.Boolean,System.Threading.CancellationToken)
  - LlamaLogic.Packages.DataBasePackedFile.GetText(LlamaLogic.Packages.ResourceKey,System.Boolean)
  - LlamaLogic.Packages.DataBasePackedFile.GetTextAsync(LlamaLogic.Packages.ResourceKey,System.Boolean,System.Threading.CancellationToken)
  - LlamaLogic.Packages.DataBasePackedFile.GetXml(LlamaLogic.Packages.ResourceKey,System.Boolean)
  - LlamaLogic.Packages.DataBasePackedFile.GetXmlAsync(LlamaLogic.Packages.ResourceKey,System.Boolean,System.Threading.CancellationToken)
  - LlamaLogic.Packages.DataBasePackedFile.Item(LlamaLogic.Packages.ResourceKey)
  - LlamaLogic.Packages.DataBasePackedFile.Keys
  - LlamaLogic.Packages.DataBasePackedFile.LoadAll(System.Boolean,LlamaLogic.Packages.CompressionMode)
  - LlamaLogic.Packages.DataBasePackedFile.LoadAllAsync(System.Boolean,LlamaLogic.Packages.CompressionMode,System.Threading.CancellationToken)
  - LlamaLogic.Packages.DataBasePackedFile.LoadNames
  - LlamaLogic.Packages.DataBasePackedFile.LoadNamesAsync(System.Threading.CancellationToken)
  - LlamaLogic.Packages.DataBasePackedFile.Save(System.Boolean,LlamaLogic.Packages.ResourceKeyOrder)
  - LlamaLogic.Packages.DataBasePackedFile.SaveAs(System.String,LlamaLogic.Packages.ResourceKeyOrder)
  - LlamaLogic.Packages.DataBasePackedFile.SaveAsAsync(System.String,LlamaLogic.Packages.ResourceKeyOrder,System.Threading.CancellationToken)
  - LlamaLogic.Packages.DataBasePackedFile.SaveAsync(System.Boolean,LlamaLogic.Packages.ResourceKeyOrder,System.Threading.CancellationToken)
  - LlamaLogic.Packages.DataBasePackedFile.Set(LlamaLogic.Packages.ResourceKey,LlamaLogic.Packages.Models.IModel,LlamaLogic.Packages.CompressionMode)
  - LlamaLogic.Packages.DataBasePackedFile.Set(LlamaLogic.Packages.ResourceKey,System.ReadOnlyMemory{System.Byte},LlamaLogic.Packages.CompressionMode)
  - LlamaLogic.Packages.DataBasePackedFile.Set(LlamaLogic.Packages.ResourceKey,System.String,LlamaLogic.Packages.CompressionMode)
  - LlamaLogic.Packages.DataBasePackedFile.Set(LlamaLogic.Packages.ResourceKey,System.Xml.Linq.XDocument,LlamaLogic.Packages.CompressionMode)
  - LlamaLogic.Packages.DataBasePackedFile.SetAsync(LlamaLogic.Packages.ResourceKey,LlamaLogic.Packages.Models.IModel,LlamaLogic.Packages.CompressionMode,System.Threading.CancellationToken)
  - LlamaLogic.Packages.DataBasePackedFile.SetAsync(LlamaLogic.Packages.ResourceKey,System.ReadOnlyMemory{System.Byte},LlamaLogic.Packages.CompressionMode,System.Threading.CancellationToken)
  - LlamaLogic.Packages.DataBasePackedFile.SetAsync(LlamaLogic.Packages.ResourceKey,System.String,LlamaLogic.Packages.CompressionMode,System.Threading.CancellationToken)
  - LlamaLogic.Packages.DataBasePackedFile.SetAsync(LlamaLogic.Packages.ResourceKey,System.Xml.Linq.XDocument,LlamaLogic.Packages.CompressionMode,System.Threading.CancellationToken)
  - LlamaLogic.Packages.DataBasePackedFile.SetXml(LlamaLogic.Packages.ResourceKey,System.String,LlamaLogic.Packages.CompressionMode)
  - LlamaLogic.Packages.DataBasePackedFile.SetXmlAsync(LlamaLogic.Packages.ResourceKey,System.String,LlamaLogic.Packages.CompressionMode,System.Threading.CancellationToken)
  - LlamaLogic.Packages.DataBasePackedFile.UpdatedTime
  - LlamaLogic.Packages.DataBasePackedFile.UserVersion
  - LlamaLogic.Packages.DataBasePackedFile.ZLibCompress(System.ReadOnlyMemory{System.Byte})
  - LlamaLogic.Packages.DataBasePackedFile.ZLibCompressAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: DataBasePackedFile
  nameWithType: DataBasePackedFile
  fullName: LlamaLogic.Packages.DataBasePackedFile
  type: Class
  source:
    remote:
      path: LlamaLogic.Packages/DataBasePackedFile.cs
      branch: main
      repo: https://github.com/Llama-Logic/LlamaLogic.git
    id: DataBasePackedFile
    path: ../LlamaLogic.Packages/DataBasePackedFile.cs
    startLine: 40
  assemblies:
  - LlamaLogic.Packages
  namespace: LlamaLogic.Packages
  summary: "Represents a Maxis DBPF format package file (\U0001F512)"
  remarks: >-
    ### Streams and Disposal

    When a package is opened by this class from a <xref href="System.IO.Stream" data-throw-if-not-resolved="false"></xref>, the class assumes ownership of the <xref href="System.IO.Stream" data-throw-if-not-resolved="false"></xref>.

    Manipulating the <xref href="System.IO.Stream" data-throw-if-not-resolved="false"></xref> afterward may result in undefined behavior.

    The class will dispose of the <xref href="System.IO.Stream" data-throw-if-not-resolved="false"></xref> when it is, itself, disposed.


    To use the <xref href="LlamaLogic.Packages.DataBasePackedFile.Save(System.Boolean%2cLlamaLogic.Packages.ResourceKeyOrder)" data-throw-if-not-resolved="false"></xref> or <xref href="LlamaLogic.Packages.DataBasePackedFile.SaveAsync(System.Boolean%2cLlamaLogic.Packages.ResourceKeyOrder%2cSystem.Threading.CancellationToken)" data-throw-if-not-resolved="false"></xref> methods, the package must have been opened from a <xref href="System.IO.Stream" data-throw-if-not-resolved="false"></xref> which is writeable.

    This can also be determined by the caller in advance of attempting to use them by checking the value of the <xref href="LlamaLogic.Packages.DataBasePackedFile.CanSaveInPlace" data-throw-if-not-resolved="false"></xref> property.

    However, for ease of use in web frameworks like ASP.NET Core, the <xref href="LlamaLogic.Packages.DataBasePackedFile.CopyTo(System.IO.Stream%2cLlamaLogic.Packages.ResourceKeyOrder)" data-throw-if-not-resolved="false"></xref> and <xref href="LlamaLogic.Packages.DataBasePackedFile.CopyToAsync(System.IO.Stream%2cLlamaLogic.Packages.ResourceKeyOrder%2cSystem.Threading.CancellationToken)" data-throw-if-not-resolved="false"></xref> methods do *not* require that the <xref href="System.IO.Stream" data-throw-if-not-resolved="false"></xref> which they are passed is seekable.


    ### Lazy Loading

    When a package is first opened using this class, the package index is read but the content of the package resources is not.

    All of the retrieval methods of this class have async counterparts for callers who prefer not to be blocked by I/O operations which may be required when retrieving resource content.


    Because resource names (when applicable) are determined by their content, this class will not index resource names until they are first referenced, either explicitly by calling <xref href="LlamaLogic.Packages.DataBasePackedFile.GetNames" data-throw-if-not-resolved="false"></xref> or <xref href="LlamaLogic.Packages.DataBasePackedFile.GetNamesAsync(System.Threading.CancellationToken)" data-throw-if-not-resolved="false"></xref>, or implicitly by calling any of the other methods which deal with resource names.

    Afterward, the names are cached for the lifetime of the package instance and updated as the caller sets the content of resources or deletes them.


    ### Thread Safety

    All properties and methods of this class, including async methods, are kept thread-safe with internally managed locks.

    Async methods which accept cancellation tokens will honor signals so long as they have not progressed to mutating the state of the package.


    ### Compression

    Decompression of resource content is handled automatically by this class.


    When retrieving resource content, this class will automatically decompress it using either proprietary Maxis internal or streaming compression, or ZLib compression.

    When saving resources, this class will always use ZLib compression.

    For more details, see the remarks for the <xref href="LlamaLogic.Packages.CompressionMode" data-throw-if-not-resolved="false"></xref> enumeration.


    Resource content is compressed in memory when it is set to minimize the amount of memory used while operating on a package.


    ### Deleted Entries

    This class honors the deleted entry flag in the package index under normal circumstances.

    If a caller attempts to retrieve the content of a resource flagged as deleted, the class will throw a <xref href="System.IO.FileNotFoundException" data-throw-if-not-resolved="false"></xref> by default.

    All retrieval methods have an optional `force` <xref href="System.Boolean" data-throw-if-not-resolved="false"></xref> parameter which, when <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a>, will cause the class to attempt to retrieve the content of a resource flagged as deleted (this is not guaranteed to work).
  example: []
  syntax:
    content: 'public sealed class DataBasePackedFile : IAsyncDisposable, IDisposable'
    content.vb: Public NotInheritable Class DataBasePackedFile Implements IAsyncDisposable, IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IAsyncDisposable
  - System.IDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: LlamaLogic.Packages.DataBasePackedFile.FromPathAsync(System.String,System.Boolean)
  commentId: M:LlamaLogic.Packages.DataBasePackedFile.FromPathAsync(System.String,System.Boolean)
  id: FromPathAsync(System.String,System.Boolean)
  parent: LlamaLogic.Packages.DataBasePackedFile
  langs:
  - csharp
  - vb
  name: FromPathAsync(string, bool)
  nameWithType: DataBasePackedFile.FromPathAsync(string, bool)
  fullName: LlamaLogic.Packages.DataBasePackedFile.FromPathAsync(string, bool)
  type: Method
  source:
    remote:
      path: LlamaLogic.Packages/DataBasePackedFile.cs
      branch: main
      repo: https://github.com/Llama-Logic/LlamaLogic.git
    id: FromPathAsync
    path: ../LlamaLogic.Packages/DataBasePackedFile.cs
    startLine: 184
  assemblies:
  - LlamaLogic.Packages
  namespace: LlamaLogic.Packages
  summary: "Initializes a <xref href=\"LlamaLogic.Packages.DataBasePackedFile\" data-throw-if-not-resolved=\"false\"></xref> asynchronously from the specified <code class=\"paramref\">path</code> (\U0001F5D1️\U0001F4A4)"
  example: []
  syntax:
    content: public static Task<DataBasePackedFile> FromPathAsync(string path, bool forReadOnly = true)
    parameters:
    - id: path
      type: System.String
    - id: forReadOnly
      type: System.Boolean
    return:
      type: System.Threading.Tasks.Task{LlamaLogic.Packages.DataBasePackedFile}
    content.vb: Public Shared Function FromPathAsync(path As String, forReadOnly As Boolean = True) As Task(Of DataBasePackedFile)
  overload: LlamaLogic.Packages.DataBasePackedFile.FromPathAsync*
  nameWithType.vb: DataBasePackedFile.FromPathAsync(String, Boolean)
  fullName.vb: LlamaLogic.Packages.DataBasePackedFile.FromPathAsync(String, Boolean)
  name.vb: FromPathAsync(String, Boolean)
- uid: LlamaLogic.Packages.DataBasePackedFile.FromStreamAsync(System.IO.Stream,System.Threading.CancellationToken)
  commentId: M:LlamaLogic.Packages.DataBasePackedFile.FromStreamAsync(System.IO.Stream,System.Threading.CancellationToken)
  id: FromStreamAsync(System.IO.Stream,System.Threading.CancellationToken)
  parent: LlamaLogic.Packages.DataBasePackedFile
  langs:
  - csharp
  - vb
  name: FromStreamAsync(Stream, CancellationToken)
  nameWithType: DataBasePackedFile.FromStreamAsync(Stream, CancellationToken)
  fullName: LlamaLogic.Packages.DataBasePackedFile.FromStreamAsync(System.IO.Stream, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: LlamaLogic.Packages/DataBasePackedFile.cs
      branch: main
      repo: https://github.com/Llama-Logic/LlamaLogic.git
    id: FromStreamAsync
    path: ../LlamaLogic.Packages/DataBasePackedFile.cs
    startLine: 212
  assemblies:
  - LlamaLogic.Packages
  namespace: LlamaLogic.Packages
  summary: "Initializes a <xref href=\"LlamaLogic.Packages.DataBasePackedFile\" data-throw-if-not-resolved=\"false\"></xref> asynchronously from the specified <code class=\"paramref\">stream</code> (\U0001F5D1️\U0001F4A4)"
  example: []
  syntax:
    content: public static Task<DataBasePackedFile> FromStreamAsync(Stream stream, CancellationToken cancellationToken = default)
    parameters:
    - id: stream
      type: System.IO.Stream
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{LlamaLogic.Packages.DataBasePackedFile}
    content.vb: Public Shared Function FromStreamAsync(stream As Stream, cancellationToken As CancellationToken = Nothing) As Task(Of DataBasePackedFile)
  overload: LlamaLogic.Packages.DataBasePackedFile.FromStreamAsync*
- uid: LlamaLogic.Packages.DataBasePackedFile.ZLibCompress(System.ReadOnlyMemory{System.Byte})
  commentId: M:LlamaLogic.Packages.DataBasePackedFile.ZLibCompress(System.ReadOnlyMemory{System.Byte})
  id: ZLibCompress(System.ReadOnlyMemory{System.Byte})
  parent: LlamaLogic.Packages.DataBasePackedFile
  langs:
  - csharp
  - vb
  name: ZLibCompress(ReadOnlyMemory<byte>)
  nameWithType: DataBasePackedFile.ZLibCompress(ReadOnlyMemory<byte>)
  fullName: LlamaLogic.Packages.DataBasePackedFile.ZLibCompress(System.ReadOnlyMemory<byte>)
  type: Method
  source:
    remote:
      path: LlamaLogic.Packages/DataBasePackedFile.cs
      branch: main
      repo: https://github.com/Llama-Logic/LlamaLogic.git
    id: ZLibCompress
    path: ../LlamaLogic.Packages/DataBasePackedFile.cs
    startLine: 281
  assemblies:
  - LlamaLogic.Packages
  namespace: LlamaLogic.Packages
  summary: Compresses the specified <code class="paramref">memory</code> using ZLib, returning the result
  example: []
  syntax:
    content: public static ReadOnlyMemory<byte> ZLibCompress(ReadOnlyMemory<byte> memory)
    parameters:
    - id: memory
      type: System.ReadOnlyMemory{System.Byte}
    return:
      type: System.ReadOnlyMemory{System.Byte}
    content.vb: Public Shared Function ZLibCompress(memory As ReadOnlyMemory(Of Byte)) As ReadOnlyMemory(Of Byte)
  overload: LlamaLogic.Packages.DataBasePackedFile.ZLibCompress*
  nameWithType.vb: DataBasePackedFile.ZLibCompress(ReadOnlyMemory(Of Byte))
  fullName.vb: LlamaLogic.Packages.DataBasePackedFile.ZLibCompress(System.ReadOnlyMemory(Of Byte))
  name.vb: ZLibCompress(ReadOnlyMemory(Of Byte))
- uid: LlamaLogic.Packages.DataBasePackedFile.ZLibCompressAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)
  commentId: M:LlamaLogic.Packages.DataBasePackedFile.ZLibCompressAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)
  id: ZLibCompressAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)
  parent: LlamaLogic.Packages.DataBasePackedFile
  langs:
  - csharp
  - vb
  name: ZLibCompressAsync(ReadOnlyMemory<byte>, CancellationToken)
  nameWithType: DataBasePackedFile.ZLibCompressAsync(ReadOnlyMemory<byte>, CancellationToken)
  fullName: LlamaLogic.Packages.DataBasePackedFile.ZLibCompressAsync(System.ReadOnlyMemory<byte>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: LlamaLogic.Packages/DataBasePackedFile.cs
      branch: main
      repo: https://github.com/Llama-Logic/LlamaLogic.git
    id: ZLibCompressAsync
    path: ../LlamaLogic.Packages/DataBasePackedFile.cs
    startLine: 293
  assemblies:
  - LlamaLogic.Packages
  namespace: LlamaLogic.Packages
  summary: Compresses the specified <code class="paramref">memory</code> using ZLib asynchronously, returning the result
  example: []
  syntax:
    content: public static Task<ReadOnlyMemory<byte>> ZLibCompressAsync(ReadOnlyMemory<byte> memory, CancellationToken cancellationToken = default)
    parameters:
    - id: memory
      type: System.ReadOnlyMemory{System.Byte}
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.ReadOnlyMemory{System.Byte}}
    content.vb: Public Shared Function ZLibCompressAsync(memory As ReadOnlyMemory(Of Byte), cancellationToken As CancellationToken = Nothing) As Task(Of ReadOnlyMemory(Of Byte))
  overload: LlamaLogic.Packages.DataBasePackedFile.ZLibCompressAsync*
  nameWithType.vb: DataBasePackedFile.ZLibCompressAsync(ReadOnlyMemory(Of Byte), CancellationToken)
  fullName.vb: LlamaLogic.Packages.DataBasePackedFile.ZLibCompressAsync(System.ReadOnlyMemory(Of Byte), System.Threading.CancellationToken)
  name.vb: ZLibCompressAsync(ReadOnlyMemory(Of Byte), CancellationToken)
- uid: LlamaLogic.Packages.DataBasePackedFile.#ctor
  commentId: M:LlamaLogic.Packages.DataBasePackedFile.#ctor
  id: '#ctor'
  parent: LlamaLogic.Packages.DataBasePackedFile
  langs:
  - csharp
  - vb
  name: DataBasePackedFile()
  nameWithType: DataBasePackedFile.DataBasePackedFile()
  fullName: LlamaLogic.Packages.DataBasePackedFile.DataBasePackedFile()
  type: Constructor
  source:
    remote:
      path: LlamaLogic.Packages/DataBasePackedFile.cs
      branch: main
      repo: https://github.com/Llama-Logic/LlamaLogic.git
    id: .ctor
    path: ../LlamaLogic.Packages/DataBasePackedFile.cs
    startLine: 305
  assemblies:
  - LlamaLogic.Packages
  namespace: LlamaLogic.Packages
  summary: Initializes a new, blank <xref href="LlamaLogic.Packages.DataBasePackedFile" data-throw-if-not-resolved="false"></xref>
  example: []
  syntax:
    content: public DataBasePackedFile()
    content.vb: Public Sub New()
  overload: LlamaLogic.Packages.DataBasePackedFile.#ctor*
  nameWithType.vb: DataBasePackedFile.New()
  fullName.vb: LlamaLogic.Packages.DataBasePackedFile.New()
  name.vb: New()
- uid: LlamaLogic.Packages.DataBasePackedFile.#ctor(System.String,System.Boolean)
  commentId: M:LlamaLogic.Packages.DataBasePackedFile.#ctor(System.String,System.Boolean)
  id: '#ctor(System.String,System.Boolean)'
  parent: LlamaLogic.Packages.DataBasePackedFile
  langs:
  - csharp
  - vb
  name: DataBasePackedFile(string, bool)
  nameWithType: DataBasePackedFile.DataBasePackedFile(string, bool)
  fullName: LlamaLogic.Packages.DataBasePackedFile.DataBasePackedFile(string, bool)
  type: Constructor
  source:
    remote:
      path: LlamaLogic.Packages/DataBasePackedFile.cs
      branch: main
      repo: https://github.com/Llama-Logic/LlamaLogic.git
    id: .ctor
    path: ../LlamaLogic.Packages/DataBasePackedFile.cs
    startLine: 320
  assemblies:
  - LlamaLogic.Packages
  namespace: LlamaLogic.Packages
  summary: "Initializes a <xref href=\"LlamaLogic.Packages.DataBasePackedFile\" data-throw-if-not-resolved=\"false\"></xref> from the specified <code class=\"paramref\">path</code> (\U0001F5D1️\U0001F4A4)"
  example: []
  syntax:
    content: public DataBasePackedFile(string path, bool forReadOnly = true)
    parameters:
    - id: path
      type: System.String
    - id: forReadOnly
      type: System.Boolean
    content.vb: Public Sub New(path As String, forReadOnly As Boolean = True)
  overload: LlamaLogic.Packages.DataBasePackedFile.#ctor*
  nameWithType.vb: DataBasePackedFile.New(String, Boolean)
  fullName.vb: LlamaLogic.Packages.DataBasePackedFile.New(String, Boolean)
  name.vb: New(String, Boolean)
- uid: LlamaLogic.Packages.DataBasePackedFile.#ctor(System.IO.Stream)
  commentId: M:LlamaLogic.Packages.DataBasePackedFile.#ctor(System.IO.Stream)
  id: '#ctor(System.IO.Stream)'
  parent: LlamaLogic.Packages.DataBasePackedFile
  langs:
  - csharp
  - vb
  name: DataBasePackedFile(Stream)
  nameWithType: DataBasePackedFile.DataBasePackedFile(Stream)
  fullName: LlamaLogic.Packages.DataBasePackedFile.DataBasePackedFile(System.IO.Stream)
  type: Constructor
  source:
    remote:
      path: LlamaLogic.Packages/DataBasePackedFile.cs
      branch: main
      repo: https://github.com/Llama-Logic/LlamaLogic.git
    id: .ctor
    path: ../LlamaLogic.Packages/DataBasePackedFile.cs
    startLine: 341
  assemblies:
  - LlamaLogic.Packages
  namespace: LlamaLogic.Packages
  summary: "Initializes a <xref href=\"LlamaLogic.Packages.DataBasePackedFile\" data-throw-if-not-resolved=\"false\"></xref> from the specified <code class=\"paramref\">stream</code> (\U0001F5D1️\U0001F4A4)"
  example: []
  syntax:
    content: public DataBasePackedFile(Stream stream)
    parameters:
    - id: stream
      type: System.IO.Stream
    content.vb: Public Sub New(stream As Stream)
  overload: LlamaLogic.Packages.DataBasePackedFile.#ctor*
  nameWithType.vb: DataBasePackedFile.New(Stream)
  fullName.vb: LlamaLogic.Packages.DataBasePackedFile.New(System.IO.Stream)
  name.vb: New(Stream)
- uid: LlamaLogic.Packages.DataBasePackedFile.Finalize
  commentId: M:LlamaLogic.Packages.DataBasePackedFile.Finalize
  id: Finalize
  parent: LlamaLogic.Packages.DataBasePackedFile
  langs:
  - csharp
  - vb
  name: ~DataBasePackedFile()
  nameWithType: DataBasePackedFile.~DataBasePackedFile()
  fullName: LlamaLogic.Packages.DataBasePackedFile.~DataBasePackedFile()
  type: Method
  source:
    remote:
      path: LlamaLogic.Packages/DataBasePackedFile.cs
      branch: main
      repo: https://github.com/Llama-Logic/LlamaLogic.git
    id: Finalize
    path: ../LlamaLogic.Packages/DataBasePackedFile.cs
    startLine: 380
  assemblies:
  - LlamaLogic.Packages
  namespace: LlamaLogic.Packages
  summary: Called by the finalizer
  example: []
  syntax:
    content: protected ~DataBasePackedFile()
    content.vb: 'Protected '
  overload: LlamaLogic.Packages.DataBasePackedFile.Finalize*
  nameWithType.vb: ''
  fullName.vb: ''
  name.vb: ''
- uid: LlamaLogic.Packages.DataBasePackedFile.CanSaveInPlace
  commentId: P:LlamaLogic.Packages.DataBasePackedFile.CanSaveInPlace
  id: CanSaveInPlace
  parent: LlamaLogic.Packages.DataBasePackedFile
  langs:
  - csharp
  - vb
  name: CanSaveInPlace
  nameWithType: DataBasePackedFile.CanSaveInPlace
  fullName: LlamaLogic.Packages.DataBasePackedFile.CanSaveInPlace
  type: Property
  source:
    remote:
      path: LlamaLogic.Packages/DataBasePackedFile.cs
      branch: main
      repo: https://github.com/Llama-Logic/LlamaLogic.git
    id: CanSaveInPlace
    path: ../LlamaLogic.Packages/DataBasePackedFile.cs
    startLine: 395
  assemblies:
  - LlamaLogic.Packages
  namespace: LlamaLogic.Packages
  summary: Gets whether the package can be saved in place
  example: []
  syntax:
    content: public bool CanSaveInPlace { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property CanSaveInPlace As Boolean
  overload: LlamaLogic.Packages.DataBasePackedFile.CanSaveInPlace*
- uid: LlamaLogic.Packages.DataBasePackedFile.Count
  commentId: P:LlamaLogic.Packages.DataBasePackedFile.Count
  id: Count
  parent: LlamaLogic.Packages.DataBasePackedFile
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: DataBasePackedFile.Count
  fullName: LlamaLogic.Packages.DataBasePackedFile.Count
  type: Property
  source:
    remote:
      path: LlamaLogic.Packages/DataBasePackedFile.cs
      branch: main
      repo: https://github.com/Llama-Logic/LlamaLogic.git
    id: Count
    path: ../LlamaLogic.Packages/DataBasePackedFile.cs
    startLine: 401
  assemblies:
  - LlamaLogic.Packages
  namespace: LlamaLogic.Packages
  summary: Gets the number of resources
  example: []
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Count As Integer
  overload: LlamaLogic.Packages.DataBasePackedFile.Count*
- uid: LlamaLogic.Packages.DataBasePackedFile.CreationTime
  commentId: P:LlamaLogic.Packages.DataBasePackedFile.CreationTime
  id: CreationTime
  parent: LlamaLogic.Packages.DataBasePackedFile
  langs:
  - csharp
  - vb
  name: CreationTime
  nameWithType: DataBasePackedFile.CreationTime
  fullName: LlamaLogic.Packages.DataBasePackedFile.CreationTime
  type: Property
  source:
    remote:
      path: LlamaLogic.Packages/DataBasePackedFile.cs
      branch: main
      repo: https://github.com/Llama-Logic/LlamaLogic.git
    id: CreationTime
    path: ../LlamaLogic.Packages/DataBasePackedFile.cs
    startLine: 407
  assemblies:
  - LlamaLogic.Packages
  namespace: LlamaLogic.Packages
  summary: Gets/sets when the package was created
  example: []
  syntax:
    content: public DateTimeOffset CreationTime { get; set; }
    parameters: []
    return:
      type: System.DateTimeOffset
    content.vb: Public Property CreationTime As DateTimeOffset
  overload: LlamaLogic.Packages.DataBasePackedFile.CreationTime*
- uid: LlamaLogic.Packages.DataBasePackedFile.FileVersion
  commentId: P:LlamaLogic.Packages.DataBasePackedFile.FileVersion
  id: FileVersion
  parent: LlamaLogic.Packages.DataBasePackedFile
  langs:
  - csharp
  - vb
  name: FileVersion
  nameWithType: DataBasePackedFile.FileVersion
  fullName: LlamaLogic.Packages.DataBasePackedFile.FileVersion
  type: Property
  source:
    remote:
      path: LlamaLogic.Packages/DataBasePackedFile.cs
      branch: main
      repo: https://github.com/Llama-Logic/LlamaLogic.git
    id: FileVersion
    path: ../LlamaLogic.Packages/DataBasePackedFile.cs
    startLine: 417
  assemblies:
  - LlamaLogic.Packages
  namespace: LlamaLogic.Packages
  summary: Gets/sets the version of the format of the file
  remarks: >-
    This class is intended to work with versions of the Maxis DBPF format up to version <code>2.1</code> and going back as far as possible.

    While it will permit the caller to specify any version they like, it does not guard against potential negative consequences which may result from such packages actually being used.

    The default version for newly created packages is currently <code>2.1</code>.
  example: []
  syntax:
    content: public Version FileVersion { get; set; }
    parameters: []
    return:
      type: System.Version
    content.vb: Public Property FileVersion As Version
  overload: LlamaLogic.Packages.DataBasePackedFile.FileVersion*
- uid: LlamaLogic.Packages.DataBasePackedFile.Keys
  commentId: P:LlamaLogic.Packages.DataBasePackedFile.Keys
  id: Keys
  parent: LlamaLogic.Packages.DataBasePackedFile
  langs:
  - csharp
  - vb
  name: Keys
  nameWithType: DataBasePackedFile.Keys
  fullName: LlamaLogic.Packages.DataBasePackedFile.Keys
  type: Property
  source:
    remote:
      path: LlamaLogic.Packages/DataBasePackedFile.cs
      branch: main
      repo: https://github.com/Llama-Logic/LlamaLogic.git
    id: Keys
    path: ../LlamaLogic.Packages/DataBasePackedFile.cs
    startLine: 422
  assemblies:
  - LlamaLogic.Packages
  namespace: LlamaLogic.Packages
  summary: Gets a list of keys for all the resources in the package
  example: []
  syntax:
    content: public IReadOnlyList<ResourceKey> Keys { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyList{LlamaLogic.Packages.ResourceKey}
    content.vb: Public ReadOnly Property Keys As IReadOnlyList(Of ResourceKey)
  overload: LlamaLogic.Packages.DataBasePackedFile.Keys*
- uid: LlamaLogic.Packages.DataBasePackedFile.UserVersion
  commentId: P:LlamaLogic.Packages.DataBasePackedFile.UserVersion
  id: UserVersion
  parent: LlamaLogic.Packages.DataBasePackedFile
  langs:
  - csharp
  - vb
  name: UserVersion
  nameWithType: DataBasePackedFile.UserVersion
  fullName: LlamaLogic.Packages.DataBasePackedFile.UserVersion
  type: Property
  source:
    remote:
      path: LlamaLogic.Packages/DataBasePackedFile.cs
      branch: main
      repo: https://github.com/Llama-Logic/LlamaLogic.git
    id: UserVersion
    path: ../LlamaLogic.Packages/DataBasePackedFile.cs
    startLine: 428
  assemblies:
  - LlamaLogic.Packages
  namespace: LlamaLogic.Packages
  summary: Gets/sets the version of the user (presumably the user agent, actually? -- is Maxis versioning human beings?)
  example: []
  syntax:
    content: public Version UserVersion { get; set; }
    parameters: []
    return:
      type: System.Version
    content.vb: Public Property UserVersion As Version
  overload: LlamaLogic.Packages.DataBasePackedFile.UserVersion*
- uid: LlamaLogic.Packages.DataBasePackedFile.UpdatedTime
  commentId: P:LlamaLogic.Packages.DataBasePackedFile.UpdatedTime
  id: UpdatedTime
  parent: LlamaLogic.Packages.DataBasePackedFile
  langs:
  - csharp
  - vb
  name: UpdatedTime
  nameWithType: DataBasePackedFile.UpdatedTime
  fullName: LlamaLogic.Packages.DataBasePackedFile.UpdatedTime
  type: Property
  source:
    remote:
      path: LlamaLogic.Packages/DataBasePackedFile.cs
      branch: main
      repo: https://github.com/Llama-Logic/LlamaLogic.git
    id: UpdatedTime
    path: ../LlamaLogic.Packages/DataBasePackedFile.cs
    startLine: 433
  assemblies:
  - LlamaLogic.Packages
  namespace: LlamaLogic.Packages
  summary: Gets/sets when the package was last updated
  example: []
  syntax:
    content: public DateTimeOffset UpdatedTime { get; set; }
    parameters: []
    return:
      type: System.DateTimeOffset
    content.vb: Public Property UpdatedTime As DateTimeOffset
  overload: LlamaLogic.Packages.DataBasePackedFile.UpdatedTime*
- uid: LlamaLogic.Packages.DataBasePackedFile.Item(LlamaLogic.Packages.ResourceKey)
  commentId: P:LlamaLogic.Packages.DataBasePackedFile.Item(LlamaLogic.Packages.ResourceKey)
  id: Item(LlamaLogic.Packages.ResourceKey)
  parent: LlamaLogic.Packages.DataBasePackedFile
  langs:
  - csharp
  - vb
  name: this[ResourceKey]
  nameWithType: DataBasePackedFile.this[ResourceKey]
  fullName: LlamaLogic.Packages.DataBasePackedFile.this[LlamaLogic.Packages.ResourceKey]
  type: Property
  source:
    remote:
      path: LlamaLogic.Packages/DataBasePackedFile.cs
      branch: main
      repo: https://github.com/Llama-Logic/LlamaLogic.git
    id: this[]
    path: ../LlamaLogic.Packages/DataBasePackedFile.cs
    startLine: 438
  assemblies:
  - LlamaLogic.Packages
  namespace: LlamaLogic.Packages
  summary: Gets/sets the content of a resource with the specified <code class="paramref">key</code>
  example: []
  syntax:
    content: public object? this[ResourceKey key] { get; set; }
    parameters:
    - id: key
      type: LlamaLogic.Packages.ResourceKey
    return:
      type: System.Object
    content.vb: Public Default Property this[](key As ResourceKey) As Object
  overload: LlamaLogic.Packages.DataBasePackedFile.Item*
  nameWithType.vb: DataBasePackedFile.this[](ResourceKey)
  fullName.vb: LlamaLogic.Packages.DataBasePackedFile.this[](LlamaLogic.Packages.ResourceKey)
  name.vb: this[](ResourceKey)
- uid: LlamaLogic.Packages.DataBasePackedFile.ContainsKey(LlamaLogic.Packages.ResourceKey)
  commentId: M:LlamaLogic.Packages.DataBasePackedFile.ContainsKey(LlamaLogic.Packages.ResourceKey)
  id: ContainsKey(LlamaLogic.Packages.ResourceKey)
  parent: LlamaLogic.Packages.DataBasePackedFile
  langs:
  - csharp
  - vb
  name: ContainsKey(ResourceKey)
  nameWithType: DataBasePackedFile.ContainsKey(ResourceKey)
  fullName: LlamaLogic.Packages.DataBasePackedFile.ContainsKey(LlamaLogic.Packages.ResourceKey)
  type: Method
  source:
    remote:
      path: LlamaLogic.Packages/DataBasePackedFile.cs
      branch: main
      repo: https://github.com/Llama-Logic/LlamaLogic.git
    id: ContainsKey
    path: ../LlamaLogic.Packages/DataBasePackedFile.cs
    startLine: 526
  assemblies:
  - LlamaLogic.Packages
  namespace: LlamaLogic.Packages
  summary: Gets whether the package contains a resource with the specified <code class="paramref">key</code>
  example: []
  syntax:
    content: public bool ContainsKey(ResourceKey key)
    parameters:
    - id: key
      type: LlamaLogic.Packages.ResourceKey
    return:
      type: System.Boolean
    content.vb: Public Function ContainsKey(key As ResourceKey) As Boolean
  overload: LlamaLogic.Packages.DataBasePackedFile.ContainsKey*
- uid: LlamaLogic.Packages.DataBasePackedFile.ContainsKeyAsync(LlamaLogic.Packages.ResourceKey,System.Threading.CancellationToken)
  commentId: M:LlamaLogic.Packages.DataBasePackedFile.ContainsKeyAsync(LlamaLogic.Packages.ResourceKey,System.Threading.CancellationToken)
  id: ContainsKeyAsync(LlamaLogic.Packages.ResourceKey,System.Threading.CancellationToken)
  parent: LlamaLogic.Packages.DataBasePackedFile
  langs:
  - csharp
  - vb
  name: ContainsKeyAsync(ResourceKey, CancellationToken)
  nameWithType: DataBasePackedFile.ContainsKeyAsync(ResourceKey, CancellationToken)
  fullName: LlamaLogic.Packages.DataBasePackedFile.ContainsKeyAsync(LlamaLogic.Packages.ResourceKey, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: LlamaLogic.Packages/DataBasePackedFile.cs
      branch: main
      repo: https://github.com/Llama-Logic/LlamaLogic.git
    id: ContainsKeyAsync
    path: ../LlamaLogic.Packages/DataBasePackedFile.cs
    startLine: 536
  assemblies:
  - LlamaLogic.Packages
  namespace: LlamaLogic.Packages
  summary: Gets whether the package contains a resource with the specified <code class="paramref">key</code> asynchronously
  example: []
  syntax:
    content: public Task<bool> ContainsKeyAsync(ResourceKey key, CancellationToken cancellationToken = default)
    parameters:
    - id: key
      type: LlamaLogic.Packages.ResourceKey
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: Public Function ContainsKeyAsync(key As ResourceKey, cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)
  overload: LlamaLogic.Packages.DataBasePackedFile.ContainsKeyAsync*
- uid: LlamaLogic.Packages.DataBasePackedFile.CopyTo(System.IO.Stream,LlamaLogic.Packages.ResourceKeyOrder)
  commentId: M:LlamaLogic.Packages.DataBasePackedFile.CopyTo(System.IO.Stream,LlamaLogic.Packages.ResourceKeyOrder)
  id: CopyTo(System.IO.Stream,LlamaLogic.Packages.ResourceKeyOrder)
  parent: LlamaLogic.Packages.DataBasePackedFile
  langs:
  - csharp
  - vb
  name: CopyTo(Stream, ResourceKeyOrder)
  nameWithType: DataBasePackedFile.CopyTo(Stream, ResourceKeyOrder)
  fullName: LlamaLogic.Packages.DataBasePackedFile.CopyTo(System.IO.Stream, LlamaLogic.Packages.ResourceKeyOrder)
  type: Method
  source:
    remote:
      path: LlamaLogic.Packages/DataBasePackedFile.cs
      branch: main
      repo: https://github.com/Llama-Logic/LlamaLogic.git
    id: CopyTo
    path: ../LlamaLogic.Packages/DataBasePackedFile.cs
    startLine: 548
  assemblies:
  - LlamaLogic.Packages
  namespace: LlamaLogic.Packages
  summary: "Copies the package in binary format to the specified <code class=\"paramref\">destination</code> (\U0001F504️\U0001F3C3)"
  example: []
  syntax:
    content: public void CopyTo(Stream destination, ResourceKeyOrder resourceKeyOrder = ResourceKeyOrder.Preserve)
    parameters:
    - id: destination
      type: System.IO.Stream
    - id: resourceKeyOrder
      type: LlamaLogic.Packages.ResourceKeyOrder
    content.vb: Public Sub CopyTo(destination As Stream, resourceKeyOrder As ResourceKeyOrder = ResourceKeyOrder.Preserve)
  overload: LlamaLogic.Packages.DataBasePackedFile.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code class="paramref">destination</code> is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code class="paramref">destination</code> is not writeable
- uid: LlamaLogic.Packages.DataBasePackedFile.CopyToAsync(System.IO.Stream,LlamaLogic.Packages.ResourceKeyOrder,System.Threading.CancellationToken)
  commentId: M:LlamaLogic.Packages.DataBasePackedFile.CopyToAsync(System.IO.Stream,LlamaLogic.Packages.ResourceKeyOrder,System.Threading.CancellationToken)
  id: CopyToAsync(System.IO.Stream,LlamaLogic.Packages.ResourceKeyOrder,System.Threading.CancellationToken)
  parent: LlamaLogic.Packages.DataBasePackedFile
  langs:
  - csharp
  - vb
  name: CopyToAsync(Stream, ResourceKeyOrder, CancellationToken)
  nameWithType: DataBasePackedFile.CopyToAsync(Stream, ResourceKeyOrder, CancellationToken)
  fullName: LlamaLogic.Packages.DataBasePackedFile.CopyToAsync(System.IO.Stream, LlamaLogic.Packages.ResourceKeyOrder, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: LlamaLogic.Packages/DataBasePackedFile.cs
      branch: main
      repo: https://github.com/Llama-Logic/LlamaLogic.git
    id: CopyToAsync
    path: ../LlamaLogic.Packages/DataBasePackedFile.cs
    startLine: 560
  assemblies:
  - LlamaLogic.Packages
  namespace: LlamaLogic.Packages
  summary: "Copies the package in binary format to the specified <code class=\"paramref\">destination</code> asynchronously (\U0001F504️\U0001F3C3)"
  example: []
  syntax:
    content: public Task CopyToAsync(Stream destination, ResourceKeyOrder resourceKeyOrder = ResourceKeyOrder.Preserve, CancellationToken cancellationToken = default)
    parameters:
    - id: destination
      type: System.IO.Stream
    - id: resourceKeyOrder
      type: LlamaLogic.Packages.ResourceKeyOrder
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function CopyToAsync(destination As Stream, resourceKeyOrder As ResourceKeyOrder = ResourceKeyOrder.Preserve, cancellationToken As CancellationToken = Nothing) As Task
  overload: LlamaLogic.Packages.DataBasePackedFile.CopyToAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code class="paramref">destination</code> is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code class="paramref">destination</code> is not writeable
- uid: LlamaLogic.Packages.DataBasePackedFile.Delete(LlamaLogic.Packages.ResourceKey)
  commentId: M:LlamaLogic.Packages.DataBasePackedFile.Delete(LlamaLogic.Packages.ResourceKey)
  id: Delete(LlamaLogic.Packages.ResourceKey)
  parent: LlamaLogic.Packages.DataBasePackedFile
  langs:
  - csharp
  - vb
  name: Delete(ResourceKey)
  nameWithType: DataBasePackedFile.Delete(ResourceKey)
  fullName: LlamaLogic.Packages.DataBasePackedFile.Delete(LlamaLogic.Packages.ResourceKey)
  type: Method
  source:
    remote:
      path: LlamaLogic.Packages/DataBasePackedFile.cs
      branch: main
      repo: https://github.com/Llama-Logic/LlamaLogic.git
    id: Delete
    path: ../LlamaLogic.Packages/DataBasePackedFile.cs
    startLine: 570
  assemblies:
  - LlamaLogic.Packages
  namespace: LlamaLogic.Packages
  summary: Deletes the resource with the specified <code class="paramref">key</code> and returns <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if it was found; otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>
  example: []
  syntax:
    content: public bool Delete(ResourceKey key)
    parameters:
    - id: key
      type: LlamaLogic.Packages.ResourceKey
    return:
      type: System.Boolean
    content.vb: Public Function Delete(key As ResourceKey) As Boolean
  overload: LlamaLogic.Packages.DataBasePackedFile.Delete*
- uid: LlamaLogic.Packages.DataBasePackedFile.Dispose
  commentId: M:LlamaLogic.Packages.DataBasePackedFile.Dispose
  id: Dispose
  parent: LlamaLogic.Packages.DataBasePackedFile
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: DataBasePackedFile.Dispose()
  fullName: LlamaLogic.Packages.DataBasePackedFile.Dispose()
  type: Method
  source:
    remote:
      path: LlamaLogic.Packages/DataBasePackedFile.cs
      branch: main
      repo: https://github.com/Llama-Logic/LlamaLogic.git
    id: Dispose
    path: ../LlamaLogic.Packages/DataBasePackedFile.cs
    startLine: 585
  assemblies:
  - LlamaLogic.Packages
  namespace: LlamaLogic.Packages
  summary: Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose()
  overload: LlamaLogic.Packages.DataBasePackedFile.Dispose*
  implements:
  - System.IDisposable.Dispose
- uid: LlamaLogic.Packages.DataBasePackedFile.DisposeAsync
  commentId: M:LlamaLogic.Packages.DataBasePackedFile.DisposeAsync
  id: DisposeAsync
  parent: LlamaLogic.Packages.DataBasePackedFile
  langs:
  - csharp
  - vb
  name: DisposeAsync()
  nameWithType: DataBasePackedFile.DisposeAsync()
  fullName: LlamaLogic.Packages.DataBasePackedFile.DisposeAsync()
  type: Method
  source:
    remote:
      path: LlamaLogic.Packages/DataBasePackedFile.cs
      branch: main
      repo: https://github.com/Llama-Logic/LlamaLogic.git
    id: DisposeAsync
    path: ../LlamaLogic.Packages/DataBasePackedFile.cs
    startLine: 607
  assemblies:
  - LlamaLogic.Packages
  namespace: LlamaLogic.Packages
  summary: Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources asynchronously.
  example: []
  syntax:
    content: public ValueTask DisposeAsync()
    return:
      type: System.Threading.Tasks.ValueTask
      description: A task that represents the asynchronous dispose operation.
    content.vb: Public Function DisposeAsync() As ValueTask
  overload: LlamaLogic.Packages.DataBasePackedFile.DisposeAsync*
  implements:
  - System.IAsyncDisposable.DisposeAsync
- uid: LlamaLogic.Packages.DataBasePackedFile.ForEach(LlamaLogic.Packages.ResourceKeyOrder,System.Predicate{LlamaLogic.Packages.ResourceKey},System.Action{LlamaLogic.Packages.ResourceKey,System.ReadOnlyMemory{System.Byte}},System.Threading.CancellationToken)
  commentId: M:LlamaLogic.Packages.DataBasePackedFile.ForEach(LlamaLogic.Packages.ResourceKeyOrder,System.Predicate{LlamaLogic.Packages.ResourceKey},System.Action{LlamaLogic.Packages.ResourceKey,System.ReadOnlyMemory{System.Byte}},System.Threading.CancellationToken)
  id: ForEach(LlamaLogic.Packages.ResourceKeyOrder,System.Predicate{LlamaLogic.Packages.ResourceKey},System.Action{LlamaLogic.Packages.ResourceKey,System.ReadOnlyMemory{System.Byte}},System.Threading.CancellationToken)
  parent: LlamaLogic.Packages.DataBasePackedFile
  langs:
  - csharp
  - vb
  name: ForEach(ResourceKeyOrder, Predicate<ResourceKey>, Action<ResourceKey, ReadOnlyMemory<byte>>, CancellationToken)
  nameWithType: DataBasePackedFile.ForEach(ResourceKeyOrder, Predicate<ResourceKey>, Action<ResourceKey, ReadOnlyMemory<byte>>, CancellationToken)
  fullName: LlamaLogic.Packages.DataBasePackedFile.ForEach(LlamaLogic.Packages.ResourceKeyOrder, System.Predicate<LlamaLogic.Packages.ResourceKey>, System.Action<LlamaLogic.Packages.ResourceKey, System.ReadOnlyMemory<byte>>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: LlamaLogic.Packages/DataBasePackedFile.cs
      branch: main
      repo: https://github.com/Llama-Logic/LlamaLogic.git
    id: ForEach
    path: ../LlamaLogic.Packages/DataBasePackedFile.cs
    startLine: 693
  assemblies:
  - LlamaLogic.Packages
  namespace: LlamaLogic.Packages
  summary: Processes undeleted resources in the specified <code class="paramref">keyOrder</code> if they satisfy the specified <code class="paramref">keyPredicate</code> using the specified <code class="paramref">processResourceAction</code>
  example: []
  syntax:
    content: public void ForEach(ResourceKeyOrder keyOrder, Predicate<ResourceKey> keyPredicate, Action<ResourceKey, ReadOnlyMemory<byte>> processResourceAction, CancellationToken cancellationToken = default)
    parameters:
    - id: keyOrder
      type: LlamaLogic.Packages.ResourceKeyOrder
    - id: keyPredicate
      type: System.Predicate{LlamaLogic.Packages.ResourceKey}
    - id: processResourceAction
      type: System.Action{LlamaLogic.Packages.ResourceKey,System.ReadOnlyMemory{System.Byte}}
    - id: cancellationToken
      type: System.Threading.CancellationToken
    content.vb: Public Sub ForEach(keyOrder As ResourceKeyOrder, keyPredicate As Predicate(Of ResourceKey), processResourceAction As Action(Of ResourceKey, ReadOnlyMemory(Of Byte)), cancellationToken As CancellationToken = Nothing)
  overload: LlamaLogic.Packages.DataBasePackedFile.ForEach*
  nameWithType.vb: DataBasePackedFile.ForEach(ResourceKeyOrder, Predicate(Of ResourceKey), Action(Of ResourceKey, ReadOnlyMemory(Of Byte)), CancellationToken)
  fullName.vb: LlamaLogic.Packages.DataBasePackedFile.ForEach(LlamaLogic.Packages.ResourceKeyOrder, System.Predicate(Of LlamaLogic.Packages.ResourceKey), System.Action(Of LlamaLogic.Packages.ResourceKey, System.ReadOnlyMemory(Of Byte)), System.Threading.CancellationToken)
  name.vb: ForEach(ResourceKeyOrder, Predicate(Of ResourceKey), Action(Of ResourceKey, ReadOnlyMemory(Of Byte)), CancellationToken)
- uid: LlamaLogic.Packages.DataBasePackedFile.ForEachAsync(LlamaLogic.Packages.ResourceKeyOrder,System.Predicate{LlamaLogic.Packages.ResourceKey},System.Func{LlamaLogic.Packages.ResourceKey,System.ReadOnlyMemory{System.Byte},System.Threading.Tasks.Task},System.Threading.CancellationToken)
  commentId: M:LlamaLogic.Packages.DataBasePackedFile.ForEachAsync(LlamaLogic.Packages.ResourceKeyOrder,System.Predicate{LlamaLogic.Packages.ResourceKey},System.Func{LlamaLogic.Packages.ResourceKey,System.ReadOnlyMemory{System.Byte},System.Threading.Tasks.Task},System.Threading.CancellationToken)
  id: ForEachAsync(LlamaLogic.Packages.ResourceKeyOrder,System.Predicate{LlamaLogic.Packages.ResourceKey},System.Func{LlamaLogic.Packages.ResourceKey,System.ReadOnlyMemory{System.Byte},System.Threading.Tasks.Task},System.Threading.CancellationToken)
  parent: LlamaLogic.Packages.DataBasePackedFile
  langs:
  - csharp
  - vb
  name: ForEachAsync(ResourceKeyOrder, Predicate<ResourceKey>, Func<ResourceKey, ReadOnlyMemory<byte>, Task>, CancellationToken)
  nameWithType: DataBasePackedFile.ForEachAsync(ResourceKeyOrder, Predicate<ResourceKey>, Func<ResourceKey, ReadOnlyMemory<byte>, Task>, CancellationToken)
  fullName: LlamaLogic.Packages.DataBasePackedFile.ForEachAsync(LlamaLogic.Packages.ResourceKeyOrder, System.Predicate<LlamaLogic.Packages.ResourceKey>, System.Func<LlamaLogic.Packages.ResourceKey, System.ReadOnlyMemory<byte>, System.Threading.Tasks.Task>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: LlamaLogic.Packages/DataBasePackedFile.cs
      branch: main
      repo: https://github.com/Llama-Logic/LlamaLogic.git
    id: ForEachAsync
    path: ../LlamaLogic.Packages/DataBasePackedFile.cs
    startLine: 721
  assemblies:
  - LlamaLogic.Packages
  namespace: LlamaLogic.Packages
  summary: Processes undeleted resources in the specified <code class="paramref">keyOrder</code> if they satisfy the specified <code class="paramref">keyPredicate</code> using the specified <code class="paramref">processResourceAsyncAction</code>
  example: []
  syntax:
    content: public Task ForEachAsync(ResourceKeyOrder keyOrder, Predicate<ResourceKey> keyPredicate, Func<ResourceKey, ReadOnlyMemory<byte>, Task> processResourceAsyncAction, CancellationToken cancellationToken = default)
    parameters:
    - id: keyOrder
      type: LlamaLogic.Packages.ResourceKeyOrder
    - id: keyPredicate
      type: System.Predicate{LlamaLogic.Packages.ResourceKey}
    - id: processResourceAsyncAction
      type: System.Func{LlamaLogic.Packages.ResourceKey,System.ReadOnlyMemory{System.Byte},System.Threading.Tasks.Task}
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function ForEachAsync(keyOrder As ResourceKeyOrder, keyPredicate As Predicate(Of ResourceKey), processResourceAsyncAction As Func(Of ResourceKey, ReadOnlyMemory(Of Byte), Task), cancellationToken As CancellationToken = Nothing) As Task
  overload: LlamaLogic.Packages.DataBasePackedFile.ForEachAsync*
  nameWithType.vb: DataBasePackedFile.ForEachAsync(ResourceKeyOrder, Predicate(Of ResourceKey), Func(Of ResourceKey, ReadOnlyMemory(Of Byte), Task), CancellationToken)
  fullName.vb: LlamaLogic.Packages.DataBasePackedFile.ForEachAsync(LlamaLogic.Packages.ResourceKeyOrder, System.Predicate(Of LlamaLogic.Packages.ResourceKey), System.Func(Of LlamaLogic.Packages.ResourceKey, System.ReadOnlyMemory(Of Byte), System.Threading.Tasks.Task), System.Threading.CancellationToken)
  name.vb: ForEachAsync(ResourceKeyOrder, Predicate(Of ResourceKey), Func(Of ResourceKey, ReadOnlyMemory(Of Byte), Task), CancellationToken)
- uid: LlamaLogic.Packages.DataBasePackedFile.ForEachRaw(LlamaLogic.Packages.ResourceKeyOrder,System.Predicate{LlamaLogic.Packages.ResourceKey},System.Action{LlamaLogic.Packages.ResourceKey,System.ReadOnlyMemory{System.Byte}},System.Threading.CancellationToken)
  commentId: M:LlamaLogic.Packages.DataBasePackedFile.ForEachRaw(LlamaLogic.Packages.ResourceKeyOrder,System.Predicate{LlamaLogic.Packages.ResourceKey},System.Action{LlamaLogic.Packages.ResourceKey,System.ReadOnlyMemory{System.Byte}},System.Threading.CancellationToken)
  id: ForEachRaw(LlamaLogic.Packages.ResourceKeyOrder,System.Predicate{LlamaLogic.Packages.ResourceKey},System.Action{LlamaLogic.Packages.ResourceKey,System.ReadOnlyMemory{System.Byte}},System.Threading.CancellationToken)
  parent: LlamaLogic.Packages.DataBasePackedFile
  langs:
  - csharp
  - vb
  name: ForEachRaw(ResourceKeyOrder, Predicate<ResourceKey>, Action<ResourceKey, ReadOnlyMemory<byte>>, CancellationToken)
  nameWithType: DataBasePackedFile.ForEachRaw(ResourceKeyOrder, Predicate<ResourceKey>, Action<ResourceKey, ReadOnlyMemory<byte>>, CancellationToken)
  fullName: LlamaLogic.Packages.DataBasePackedFile.ForEachRaw(LlamaLogic.Packages.ResourceKeyOrder, System.Predicate<LlamaLogic.Packages.ResourceKey>, System.Action<LlamaLogic.Packages.ResourceKey, System.ReadOnlyMemory<byte>>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: LlamaLogic.Packages/DataBasePackedFile.cs
      branch: main
      repo: https://github.com/Llama-Logic/LlamaLogic.git
    id: ForEachRaw
    path: ../LlamaLogic.Packages/DataBasePackedFile.cs
    startLine: 749
  assemblies:
  - LlamaLogic.Packages
  namespace: LlamaLogic.Packages
  summary: Processes undeleted raw resources (meaning that the library will not decompress a resource for you if it is compressed) in the specified <code class="paramref">keyOrder</code> if they satisfy the specified <code class="paramref">keyPredicate</code> using the specified <code class="paramref">processResourceAction</code>
  example: []
  syntax:
    content: public void ForEachRaw(ResourceKeyOrder keyOrder, Predicate<ResourceKey> keyPredicate, Action<ResourceKey, ReadOnlyMemory<byte>> processResourceAction, CancellationToken cancellationToken = default)
    parameters:
    - id: keyOrder
      type: LlamaLogic.Packages.ResourceKeyOrder
    - id: keyPredicate
      type: System.Predicate{LlamaLogic.Packages.ResourceKey}
    - id: processResourceAction
      type: System.Action{LlamaLogic.Packages.ResourceKey,System.ReadOnlyMemory{System.Byte}}
    - id: cancellationToken
      type: System.Threading.CancellationToken
    content.vb: Public Sub ForEachRaw(keyOrder As ResourceKeyOrder, keyPredicate As Predicate(Of ResourceKey), processResourceAction As Action(Of ResourceKey, ReadOnlyMemory(Of Byte)), cancellationToken As CancellationToken = Nothing)
  overload: LlamaLogic.Packages.DataBasePackedFile.ForEachRaw*
  nameWithType.vb: DataBasePackedFile.ForEachRaw(ResourceKeyOrder, Predicate(Of ResourceKey), Action(Of ResourceKey, ReadOnlyMemory(Of Byte)), CancellationToken)
  fullName.vb: LlamaLogic.Packages.DataBasePackedFile.ForEachRaw(LlamaLogic.Packages.ResourceKeyOrder, System.Predicate(Of LlamaLogic.Packages.ResourceKey), System.Action(Of LlamaLogic.Packages.ResourceKey, System.ReadOnlyMemory(Of Byte)), System.Threading.CancellationToken)
  name.vb: ForEachRaw(ResourceKeyOrder, Predicate(Of ResourceKey), Action(Of ResourceKey, ReadOnlyMemory(Of Byte)), CancellationToken)
- uid: LlamaLogic.Packages.DataBasePackedFile.ForEachRawAsync(LlamaLogic.Packages.ResourceKeyOrder,System.Predicate{LlamaLogic.Packages.ResourceKey},System.Func{LlamaLogic.Packages.ResourceKey,System.ReadOnlyMemory{System.Byte},System.Threading.Tasks.Task},System.Threading.CancellationToken)
  commentId: M:LlamaLogic.Packages.DataBasePackedFile.ForEachRawAsync(LlamaLogic.Packages.ResourceKeyOrder,System.Predicate{LlamaLogic.Packages.ResourceKey},System.Func{LlamaLogic.Packages.ResourceKey,System.ReadOnlyMemory{System.Byte},System.Threading.Tasks.Task},System.Threading.CancellationToken)
  id: ForEachRawAsync(LlamaLogic.Packages.ResourceKeyOrder,System.Predicate{LlamaLogic.Packages.ResourceKey},System.Func{LlamaLogic.Packages.ResourceKey,System.ReadOnlyMemory{System.Byte},System.Threading.Tasks.Task},System.Threading.CancellationToken)
  parent: LlamaLogic.Packages.DataBasePackedFile
  langs:
  - csharp
  - vb
  name: ForEachRawAsync(ResourceKeyOrder, Predicate<ResourceKey>, Func<ResourceKey, ReadOnlyMemory<byte>, Task>, CancellationToken)
  nameWithType: DataBasePackedFile.ForEachRawAsync(ResourceKeyOrder, Predicate<ResourceKey>, Func<ResourceKey, ReadOnlyMemory<byte>, Task>, CancellationToken)
  fullName: LlamaLogic.Packages.DataBasePackedFile.ForEachRawAsync(LlamaLogic.Packages.ResourceKeyOrder, System.Predicate<LlamaLogic.Packages.ResourceKey>, System.Func<LlamaLogic.Packages.ResourceKey, System.ReadOnlyMemory<byte>, System.Threading.Tasks.Task>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: LlamaLogic.Packages/DataBasePackedFile.cs
      branch: main
      repo: https://github.com/Llama-Logic/LlamaLogic.git
    id: ForEachRawAsync
    path: ../LlamaLogic.Packages/DataBasePackedFile.cs
    startLine: 777
  assemblies:
  - LlamaLogic.Packages
  namespace: LlamaLogic.Packages
  summary: Processes undeleted raw resources (meaning that the library will not decompress a resource for you if it is compressed) in the specified <code class="paramref">keyOrder</code> if they satisfy the specified <code class="paramref">keyPredicate</code> using the specified <code class="paramref">processResourceAsyncAction</code>
  example: []
  syntax:
    content: public Task ForEachRawAsync(ResourceKeyOrder keyOrder, Predicate<ResourceKey> keyPredicate, Func<ResourceKey, ReadOnlyMemory<byte>, Task> processResourceAsyncAction, CancellationToken cancellationToken = default)
    parameters:
    - id: keyOrder
      type: LlamaLogic.Packages.ResourceKeyOrder
    - id: keyPredicate
      type: System.Predicate{LlamaLogic.Packages.ResourceKey}
    - id: processResourceAsyncAction
      type: System.Func{LlamaLogic.Packages.ResourceKey,System.ReadOnlyMemory{System.Byte},System.Threading.Tasks.Task}
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function ForEachRawAsync(keyOrder As ResourceKeyOrder, keyPredicate As Predicate(Of ResourceKey), processResourceAsyncAction As Func(Of ResourceKey, ReadOnlyMemory(Of Byte), Task), cancellationToken As CancellationToken = Nothing) As Task
  overload: LlamaLogic.Packages.DataBasePackedFile.ForEachRawAsync*
  nameWithType.vb: DataBasePackedFile.ForEachRawAsync(ResourceKeyOrder, Predicate(Of ResourceKey), Func(Of ResourceKey, ReadOnlyMemory(Of Byte), Task), CancellationToken)
  fullName.vb: LlamaLogic.Packages.DataBasePackedFile.ForEachRawAsync(LlamaLogic.Packages.ResourceKeyOrder, System.Predicate(Of LlamaLogic.Packages.ResourceKey), System.Func(Of LlamaLogic.Packages.ResourceKey, System.ReadOnlyMemory(Of Byte), System.Threading.Tasks.Task), System.Threading.CancellationToken)
  name.vb: ForEachRawAsync(ResourceKeyOrder, Predicate(Of ResourceKey), Func(Of ResourceKey, ReadOnlyMemory(Of Byte), Task), CancellationToken)
- uid: LlamaLogic.Packages.DataBasePackedFile.Get(LlamaLogic.Packages.ResourceKey,System.Boolean)
  commentId: M:LlamaLogic.Packages.DataBasePackedFile.Get(LlamaLogic.Packages.ResourceKey,System.Boolean)
  id: Get(LlamaLogic.Packages.ResourceKey,System.Boolean)
  parent: LlamaLogic.Packages.DataBasePackedFile
  langs:
  - csharp
  - vb
  name: Get(ResourceKey, bool)
  nameWithType: DataBasePackedFile.Get(ResourceKey, bool)
  fullName: LlamaLogic.Packages.DataBasePackedFile.Get(LlamaLogic.Packages.ResourceKey, bool)
  type: Method
  source:
    remote:
      path: LlamaLogic.Packages/DataBasePackedFile.cs
      branch: main
      repo: https://github.com/Llama-Logic/LlamaLogic.git
    id: Get
    path: ../LlamaLogic.Packages/DataBasePackedFile.cs
    startLine: 807
  assemblies:
  - LlamaLogic.Packages
  namespace: LlamaLogic.Packages
  summary: Gets the content of a resource with the specified <code class="paramref">key</code>
  example: []
  syntax:
    content: public ReadOnlyMemory<byte> Get(ResourceKey key, bool force = false)
    parameters:
    - id: key
      type: LlamaLogic.Packages.ResourceKey
      description: The key of the resource
    - id: force
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> to get the content of the resource even if it has been marked as deleted; otheriwse, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a> (default)
    return:
      type: System.ReadOnlyMemory{System.Byte}
    content.vb: Public Function [Get](key As ResourceKey, force As Boolean = False) As ReadOnlyMemory(Of Byte)
  overload: LlamaLogic.Packages.DataBasePackedFile.Get*
  nameWithType.vb: DataBasePackedFile.Get(ResourceKey, Boolean)
  fullName.vb: LlamaLogic.Packages.DataBasePackedFile.Get(LlamaLogic.Packages.ResourceKey, Boolean)
  name.vb: Get(ResourceKey, Boolean)
- uid: LlamaLogic.Packages.DataBasePackedFile.GetAllSizes(System.Predicate{LlamaLogic.Packages.ResourceKey})
  commentId: M:LlamaLogic.Packages.DataBasePackedFile.GetAllSizes(System.Predicate{LlamaLogic.Packages.ResourceKey})
  id: GetAllSizes(System.Predicate{LlamaLogic.Packages.ResourceKey})
  parent: LlamaLogic.Packages.DataBasePackedFile
  langs:
  - csharp
  - vb
  name: GetAllSizes(Predicate<ResourceKey>?)
  nameWithType: DataBasePackedFile.GetAllSizes(Predicate<ResourceKey>?)
  fullName: LlamaLogic.Packages.DataBasePackedFile.GetAllSizes(System.Predicate<LlamaLogic.Packages.ResourceKey>?)
  type: Method
  source:
    remote:
      path: LlamaLogic.Packages/DataBasePackedFile.cs
      branch: main
      repo: https://github.com/Llama-Logic/LlamaLogic.git
    id: GetAllSizes
    path: ../LlamaLogic.Packages/DataBasePackedFile.cs
    startLine: 829
  assemblies:
  - LlamaLogic.Packages
  namespace: LlamaLogic.Packages
  summary: Gets the size of the content of each resource in the package indexed by key
  example: []
  syntax:
    content: public IReadOnlyDictionary<ResourceKey, int> GetAllSizes(Predicate<ResourceKey>? predicate = null)
    parameters:
    - id: predicate
      type: System.Predicate{LlamaLogic.Packages.ResourceKey}
      description: An optional predicate to filter the keys
    return:
      type: System.Collections.Generic.IReadOnlyDictionary{LlamaLogic.Packages.ResourceKey,System.Int32}
    content.vb: Public Function GetAllSizes(predicate As Predicate(Of ResourceKey) = Nothing) As IReadOnlyDictionary(Of ResourceKey, Integer)
  overload: LlamaLogic.Packages.DataBasePackedFile.GetAllSizes*
  nameWithType.vb: DataBasePackedFile.GetAllSizes(Predicate(Of ResourceKey))
  fullName.vb: LlamaLogic.Packages.DataBasePackedFile.GetAllSizes(System.Predicate(Of LlamaLogic.Packages.ResourceKey))
  name.vb: GetAllSizes(Predicate(Of ResourceKey))
- uid: LlamaLogic.Packages.DataBasePackedFile.GetAllSizesAsync(System.Predicate{LlamaLogic.Packages.ResourceKey},System.Threading.CancellationToken)
  commentId: M:LlamaLogic.Packages.DataBasePackedFile.GetAllSizesAsync(System.Predicate{LlamaLogic.Packages.ResourceKey},System.Threading.CancellationToken)
  id: GetAllSizesAsync(System.Predicate{LlamaLogic.Packages.ResourceKey},System.Threading.CancellationToken)
  parent: LlamaLogic.Packages.DataBasePackedFile
  langs:
  - csharp
  - vb
  name: GetAllSizesAsync(Predicate<ResourceKey>?, CancellationToken)
  nameWithType: DataBasePackedFile.GetAllSizesAsync(Predicate<ResourceKey>?, CancellationToken)
  fullName: LlamaLogic.Packages.DataBasePackedFile.GetAllSizesAsync(System.Predicate<LlamaLogic.Packages.ResourceKey>?, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: LlamaLogic.Packages/DataBasePackedFile.cs
      branch: main
      repo: https://github.com/Llama-Logic/LlamaLogic.git
    id: GetAllSizesAsync
    path: ../LlamaLogic.Packages/DataBasePackedFile.cs
    startLine: 847
  assemblies:
  - LlamaLogic.Packages
  namespace: LlamaLogic.Packages
  summary: Gets the size of the content of each resource in the package indexed by key, asynchronously
  example: []
  syntax:
    content: public Task<IReadOnlyDictionary<ResourceKey, int>> GetAllSizesAsync(Predicate<ResourceKey>? predicate = null, CancellationToken cancellationToken = default)
    parameters:
    - id: predicate
      type: System.Predicate{LlamaLogic.Packages.ResourceKey}
      description: An optional predicate to filter the keys
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to monitor for cancellation requests
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyDictionary{LlamaLogic.Packages.ResourceKey,System.Int32}}
    content.vb: Public Function GetAllSizesAsync(predicate As Predicate(Of ResourceKey) = Nothing, cancellationToken As CancellationToken = Nothing) As Task(Of IReadOnlyDictionary(Of ResourceKey, Integer))
  overload: LlamaLogic.Packages.DataBasePackedFile.GetAllSizesAsync*
  nameWithType.vb: DataBasePackedFile.GetAllSizesAsync(Predicate(Of ResourceKey), CancellationToken)
  fullName.vb: LlamaLogic.Packages.DataBasePackedFile.GetAllSizesAsync(System.Predicate(Of LlamaLogic.Packages.ResourceKey), System.Threading.CancellationToken)
  name.vb: GetAllSizesAsync(Predicate(Of ResourceKey), CancellationToken)
- uid: LlamaLogic.Packages.DataBasePackedFile.GetAsync(LlamaLogic.Packages.ResourceKey,System.Boolean,System.Threading.CancellationToken)
  commentId: M:LlamaLogic.Packages.DataBasePackedFile.GetAsync(LlamaLogic.Packages.ResourceKey,System.Boolean,System.Threading.CancellationToken)
  id: GetAsync(LlamaLogic.Packages.ResourceKey,System.Boolean,System.Threading.CancellationToken)
  parent: LlamaLogic.Packages.DataBasePackedFile
  langs:
  - csharp
  - vb
  name: GetAsync(ResourceKey, bool, CancellationToken)
  nameWithType: DataBasePackedFile.GetAsync(ResourceKey, bool, CancellationToken)
  fullName: LlamaLogic.Packages.DataBasePackedFile.GetAsync(LlamaLogic.Packages.ResourceKey, bool, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: LlamaLogic.Packages/DataBasePackedFile.cs
      branch: main
      repo: https://github.com/Llama-Logic/LlamaLogic.git
    id: GetAsync
    path: ../LlamaLogic.Packages/DataBasePackedFile.cs
    startLine: 866
  assemblies:
  - LlamaLogic.Packages
  namespace: LlamaLogic.Packages
  summary: Gets the content of a resource with the specified <code class="paramref">key</code> asynchronously
  example: []
  syntax:
    content: public Task<ReadOnlyMemory<byte>> GetAsync(ResourceKey key, bool force = false, CancellationToken cancellationToken = default)
    parameters:
    - id: key
      type: LlamaLogic.Packages.ResourceKey
      description: The key of the resource
    - id: force
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> to get the content of the resource even if it has been marked as deleted; otheriwse, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a> (default)
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to monitor for cancellation requests
    return:
      type: System.Threading.Tasks.Task{System.ReadOnlyMemory{System.Byte}}
    content.vb: Public Function GetAsync(key As ResourceKey, force As Boolean = False, cancellationToken As CancellationToken = Nothing) As Task(Of ReadOnlyMemory(Of Byte))
  overload: LlamaLogic.Packages.DataBasePackedFile.GetAsync*
  nameWithType.vb: DataBasePackedFile.GetAsync(ResourceKey, Boolean, CancellationToken)
  fullName.vb: LlamaLogic.Packages.DataBasePackedFile.GetAsync(LlamaLogic.Packages.ResourceKey, Boolean, System.Threading.CancellationToken)
  name.vb: GetAsync(ResourceKey, Boolean, CancellationToken)
- uid: LlamaLogic.Packages.DataBasePackedFile.GetCount
  commentId: M:LlamaLogic.Packages.DataBasePackedFile.GetCount
  id: GetCount
  parent: LlamaLogic.Packages.DataBasePackedFile
  langs:
  - csharp
  - vb
  name: GetCount()
  nameWithType: DataBasePackedFile.GetCount()
  fullName: LlamaLogic.Packages.DataBasePackedFile.GetCount()
  type: Method
  source:
    remote:
      path: LlamaLogic.Packages/DataBasePackedFile.cs
      branch: main
      repo: https://github.com/Llama-Logic/LlamaLogic.git
    id: GetCount
    path: ../LlamaLogic.Packages/DataBasePackedFile.cs
    startLine: 876
  assemblies:
  - LlamaLogic.Packages
  namespace: LlamaLogic.Packages
  summary: Gets the number of resources
  example: []
  syntax:
    content: public int GetCount()
    return:
      type: System.Int32
    content.vb: Public Function GetCount() As Integer
  overload: LlamaLogic.Packages.DataBasePackedFile.GetCount*
- uid: LlamaLogic.Packages.DataBasePackedFile.GetCountAsync(System.Threading.CancellationToken)
  commentId: M:LlamaLogic.Packages.DataBasePackedFile.GetCountAsync(System.Threading.CancellationToken)
  id: GetCountAsync(System.Threading.CancellationToken)
  parent: LlamaLogic.Packages.DataBasePackedFile
  langs:
  - csharp
  - vb
  name: GetCountAsync(CancellationToken)
  nameWithType: DataBasePackedFile.GetCountAsync(CancellationToken)
  fullName: LlamaLogic.Packages.DataBasePackedFile.GetCountAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: LlamaLogic.Packages/DataBasePackedFile.cs
      branch: main
      repo: https://github.com/Llama-Logic/LlamaLogic.git
    id: GetCountAsync
    path: ../LlamaLogic.Packages/DataBasePackedFile.cs
    startLine: 886
  assemblies:
  - LlamaLogic.Packages
  namespace: LlamaLogic.Packages
  summary: Gets the number of resources asychronously
  example: []
  syntax:
    content: public Task<int> GetCountAsync(CancellationToken cancellationToken = default)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Int32}
    content.vb: Public Function GetCountAsync(cancellationToken As CancellationToken = Nothing) As Task(Of Integer)
  overload: LlamaLogic.Packages.DataBasePackedFile.GetCountAsync*
- uid: LlamaLogic.Packages.DataBasePackedFile.GetData(LlamaLogic.Packages.ResourceKey,System.Boolean)
  commentId: M:LlamaLogic.Packages.DataBasePackedFile.GetData(LlamaLogic.Packages.ResourceKey,System.Boolean)
  id: GetData(LlamaLogic.Packages.ResourceKey,System.Boolean)
  parent: LlamaLogic.Packages.DataBasePackedFile
  langs:
  - csharp
  - vb
  name: GetData(ResourceKey, bool)
  nameWithType: DataBasePackedFile.GetData(ResourceKey, bool)
  fullName: LlamaLogic.Packages.DataBasePackedFile.GetData(LlamaLogic.Packages.ResourceKey, bool)
  type: Method
  source:
    remote:
      path: LlamaLogic.Packages/DataBasePackedFile.cs
      branch: main
      repo: https://github.com/Llama-Logic/LlamaLogic.git
    id: GetData
    path: ../LlamaLogic.Packages/DataBasePackedFile.cs
    startLine: 896
  assemblies:
  - LlamaLogic.Packages
  namespace: LlamaLogic.Packages
  summary: Gets the content of a resource with the specified <code class="paramref">key</code> as a <xref href="LlamaLogic.Packages.Models.Data.DataModel" data-throw-if-not-resolved="false"></xref>
  example: []
  syntax:
    content: public DataModel GetData(ResourceKey key, bool force = false)
    parameters:
    - id: key
      type: LlamaLogic.Packages.ResourceKey
    - id: force
      type: System.Boolean
    return:
      type: LlamaLogic.Packages.Models.Data.DataModel
    content.vb: Public Function GetData(key As ResourceKey, force As Boolean = False) As DataModel
  overload: LlamaLogic.Packages.DataBasePackedFile.GetData*
  nameWithType.vb: DataBasePackedFile.GetData(ResourceKey, Boolean)
  fullName.vb: LlamaLogic.Packages.DataBasePackedFile.GetData(LlamaLogic.Packages.ResourceKey, Boolean)
  name.vb: GetData(ResourceKey, Boolean)
- uid: LlamaLogic.Packages.DataBasePackedFile.GetDataAsync(LlamaLogic.Packages.ResourceKey,System.Boolean,System.Threading.CancellationToken)
  commentId: M:LlamaLogic.Packages.DataBasePackedFile.GetDataAsync(LlamaLogic.Packages.ResourceKey,System.Boolean,System.Threading.CancellationToken)
  id: GetDataAsync(LlamaLogic.Packages.ResourceKey,System.Boolean,System.Threading.CancellationToken)
  parent: LlamaLogic.Packages.DataBasePackedFile
  langs:
  - csharp
  - vb
  name: GetDataAsync(ResourceKey, bool, CancellationToken)
  nameWithType: DataBasePackedFile.GetDataAsync(ResourceKey, bool, CancellationToken)
  fullName: LlamaLogic.Packages.DataBasePackedFile.GetDataAsync(LlamaLogic.Packages.ResourceKey, bool, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: LlamaLogic.Packages/DataBasePackedFile.cs
      branch: main
      repo: https://github.com/Llama-Logic/LlamaLogic.git
    id: GetDataAsync
    path: ../LlamaLogic.Packages/DataBasePackedFile.cs
    startLine: 902
  assemblies:
  - LlamaLogic.Packages
  namespace: LlamaLogic.Packages
  summary: Gets the content of a resource with the specified <code class="paramref">key</code> as a <xref href="LlamaLogic.Packages.Models.Data.DataModel" data-throw-if-not-resolved="false"></xref> asynchronously
  example: []
  syntax:
    content: public Task<DataModel> GetDataAsync(ResourceKey key, bool force = false, CancellationToken cancellationToken = default)
    parameters:
    - id: key
      type: LlamaLogic.Packages.ResourceKey
    - id: force
      type: System.Boolean
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{LlamaLogic.Packages.Models.Data.DataModel}
    content.vb: Public Function GetDataAsync(key As ResourceKey, force As Boolean = False, cancellationToken As CancellationToken = Nothing) As Task(Of DataModel)
  overload: LlamaLogic.Packages.DataBasePackedFile.GetDataAsync*
  nameWithType.vb: DataBasePackedFile.GetDataAsync(ResourceKey, Boolean, CancellationToken)
  fullName.vb: LlamaLogic.Packages.DataBasePackedFile.GetDataAsync(LlamaLogic.Packages.ResourceKey, Boolean, System.Threading.CancellationToken)
  name.vb: GetDataAsync(ResourceKey, Boolean, CancellationToken)
- uid: LlamaLogic.Packages.DataBasePackedFile.GetKeys(LlamaLogic.Packages.ResourceKeyOrder)
  commentId: M:LlamaLogic.Packages.DataBasePackedFile.GetKeys(LlamaLogic.Packages.ResourceKeyOrder)
  id: GetKeys(LlamaLogic.Packages.ResourceKeyOrder)
  parent: LlamaLogic.Packages.DataBasePackedFile
  langs:
  - csharp
  - vb
  name: GetKeys(ResourceKeyOrder)
  nameWithType: DataBasePackedFile.GetKeys(ResourceKeyOrder)
  fullName: LlamaLogic.Packages.DataBasePackedFile.GetKeys(LlamaLogic.Packages.ResourceKeyOrder)
  type: Method
  source:
    remote:
      path: LlamaLogic.Packages/DataBasePackedFile.cs
      branch: main
      repo: https://github.com/Llama-Logic/LlamaLogic.git
    id: GetKeys
    path: ../LlamaLogic.Packages/DataBasePackedFile.cs
    startLine: 908
  assemblies:
  - LlamaLogic.Packages
  namespace: LlamaLogic.Packages
  summary: Gets a list of keys for all the resources in the package
  example: []
  syntax:
    content: public IReadOnlyList<ResourceKey> GetKeys(ResourceKeyOrder resourceKeyOrder = ResourceKeyOrder.Preserve)
    parameters:
    - id: resourceKeyOrder
      type: LlamaLogic.Packages.ResourceKeyOrder
    return:
      type: System.Collections.Generic.IReadOnlyList{LlamaLogic.Packages.ResourceKey}
    content.vb: Public Function GetKeys(resourceKeyOrder As ResourceKeyOrder = ResourceKeyOrder.Preserve) As IReadOnlyList(Of ResourceKey)
  overload: LlamaLogic.Packages.DataBasePackedFile.GetKeys*
- uid: LlamaLogic.Packages.DataBasePackedFile.GetKeysAsync(LlamaLogic.Packages.ResourceKeyOrder,System.Threading.CancellationToken)
  commentId: M:LlamaLogic.Packages.DataBasePackedFile.GetKeysAsync(LlamaLogic.Packages.ResourceKeyOrder,System.Threading.CancellationToken)
  id: GetKeysAsync(LlamaLogic.Packages.ResourceKeyOrder,System.Threading.CancellationToken)
  parent: LlamaLogic.Packages.DataBasePackedFile
  langs:
  - csharp
  - vb
  name: GetKeysAsync(ResourceKeyOrder, CancellationToken)
  nameWithType: DataBasePackedFile.GetKeysAsync(ResourceKeyOrder, CancellationToken)
  fullName: LlamaLogic.Packages.DataBasePackedFile.GetKeysAsync(LlamaLogic.Packages.ResourceKeyOrder, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: LlamaLogic.Packages/DataBasePackedFile.cs
      branch: main
      repo: https://github.com/Llama-Logic/LlamaLogic.git
    id: GetKeysAsync
    path: ../LlamaLogic.Packages/DataBasePackedFile.cs
    startLine: 918
  assemblies:
  - LlamaLogic.Packages
  namespace: LlamaLogic.Packages
  summary: Gets a list of keys for all the resources in the package asynchronously
  example: []
  syntax:
    content: public Task<IReadOnlyList<ResourceKey>> GetKeysAsync(ResourceKeyOrder resourceKeyOrder = ResourceKeyOrder.Preserve, CancellationToken cancellationToken = default)
    parameters:
    - id: resourceKeyOrder
      type: LlamaLogic.Packages.ResourceKeyOrder
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyList{LlamaLogic.Packages.ResourceKey}}
    content.vb: Public Function GetKeysAsync(resourceKeyOrder As ResourceKeyOrder = ResourceKeyOrder.Preserve, cancellationToken As CancellationToken = Nothing) As Task(Of IReadOnlyList(Of ResourceKey))
  overload: LlamaLogic.Packages.DataBasePackedFile.GetKeysAsync*
- uid: LlamaLogic.Packages.DataBasePackedFile.GetKeysByName(System.String)
  commentId: M:LlamaLogic.Packages.DataBasePackedFile.GetKeysByName(System.String)
  id: GetKeysByName(System.String)
  parent: LlamaLogic.Packages.DataBasePackedFile
  langs:
  - csharp
  - vb
  name: GetKeysByName(string)
  nameWithType: DataBasePackedFile.GetKeysByName(string)
  fullName: LlamaLogic.Packages.DataBasePackedFile.GetKeysByName(string)
  type: Method
  source:
    remote:
      path: LlamaLogic.Packages/DataBasePackedFile.cs
      branch: main
      repo: https://github.com/Llama-Logic/LlamaLogic.git
    id: GetKeysByName
    path: ../LlamaLogic.Packages/DataBasePackedFile.cs
    startLine: 928
  assemblies:
  - LlamaLogic.Packages
  namespace: LlamaLogic.Packages
  summary: Gets a list of keys for resources with the specified <code class="paramref">name</code>
  example: []
  syntax:
    content: public IReadOnlyList<ResourceKey> GetKeysByName(string name)
    parameters:
    - id: name
      type: System.String
    return:
      type: System.Collections.Generic.IReadOnlyList{LlamaLogic.Packages.ResourceKey}
    content.vb: Public Function GetKeysByName(name As String) As IReadOnlyList(Of ResourceKey)
  overload: LlamaLogic.Packages.DataBasePackedFile.GetKeysByName*
  nameWithType.vb: DataBasePackedFile.GetKeysByName(String)
  fullName.vb: LlamaLogic.Packages.DataBasePackedFile.GetKeysByName(String)
  name.vb: GetKeysByName(String)
- uid: LlamaLogic.Packages.DataBasePackedFile.GetKeysByNameAsync(System.String,System.Threading.CancellationToken)
  commentId: M:LlamaLogic.Packages.DataBasePackedFile.GetKeysByNameAsync(System.String,System.Threading.CancellationToken)
  id: GetKeysByNameAsync(System.String,System.Threading.CancellationToken)
  parent: LlamaLogic.Packages.DataBasePackedFile
  langs:
  - csharp
  - vb
  name: GetKeysByNameAsync(string, CancellationToken)
  nameWithType: DataBasePackedFile.GetKeysByNameAsync(string, CancellationToken)
  fullName: LlamaLogic.Packages.DataBasePackedFile.GetKeysByNameAsync(string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: LlamaLogic.Packages/DataBasePackedFile.cs
      branch: main
      repo: https://github.com/Llama-Logic/LlamaLogic.git
    id: GetKeysByNameAsync
    path: ../LlamaLogic.Packages/DataBasePackedFile.cs
    startLine: 939
  assemblies:
  - LlamaLogic.Packages
  namespace: LlamaLogic.Packages
  summary: Gets a list of keys for resources with the specified <code class="paramref">name</code> asynchronously
  example: []
  syntax:
    content: public Task<IReadOnlyList<ResourceKey>> GetKeysByNameAsync(string name, CancellationToken cancellationToken = default)
    parameters:
    - id: name
      type: System.String
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyList{LlamaLogic.Packages.ResourceKey}}
    content.vb: Public Function GetKeysByNameAsync(name As String, cancellationToken As CancellationToken = Nothing) As Task(Of IReadOnlyList(Of ResourceKey))
  overload: LlamaLogic.Packages.DataBasePackedFile.GetKeysByNameAsync*
  nameWithType.vb: DataBasePackedFile.GetKeysByNameAsync(String, CancellationToken)
  fullName.vb: LlamaLogic.Packages.DataBasePackedFile.GetKeysByNameAsync(String, System.Threading.CancellationToken)
  name.vb: GetKeysByNameAsync(String, CancellationToken)
- uid: LlamaLogic.Packages.DataBasePackedFile.GetModel``1(LlamaLogic.Packages.ResourceKey,System.Boolean)
  commentId: M:LlamaLogic.Packages.DataBasePackedFile.GetModel``1(LlamaLogic.Packages.ResourceKey,System.Boolean)
  id: GetModel``1(LlamaLogic.Packages.ResourceKey,System.Boolean)
  parent: LlamaLogic.Packages.DataBasePackedFile
  langs:
  - csharp
  - vb
  name: GetModel<TModel>(ResourceKey, bool)
  nameWithType: DataBasePackedFile.GetModel<TModel>(ResourceKey, bool)
  fullName: LlamaLogic.Packages.DataBasePackedFile.GetModel<TModel>(LlamaLogic.Packages.ResourceKey, bool)
  type: Method
  source:
    remote:
      path: LlamaLogic.Packages/DataBasePackedFile.cs
      branch: main
      repo: https://github.com/Llama-Logic/LlamaLogic.git
    id: GetModel
    path: ../LlamaLogic.Packages/DataBasePackedFile.cs
    startLine: 952
  assemblies:
  - LlamaLogic.Packages
  namespace: LlamaLogic.Packages
  summary: Gets the content of a resource with the specified <code class="paramref">key</code> as a <code class="typeparamref">TModel</code>
  example: []
  syntax:
    content: 'public TModel GetModel<TModel>(ResourceKey key, bool force = false) where TModel : IModel<TModel>'
    parameters:
    - id: key
      type: LlamaLogic.Packages.ResourceKey
    - id: force
      type: System.Boolean
    typeParameters:
    - id: TModel
      description: A model used to browse and modify certain types of resources
    return:
      type: '{TModel}'
    content.vb: Public Function GetModel(Of TModel As IModel(Of TModel))(key As ResourceKey, force As Boolean = False) As TModel
  overload: LlamaLogic.Packages.DataBasePackedFile.GetModel*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code class="typeparamref">TModel</code> cannot deal with resources of the type specified by <code class="paramref">key</code>
  nameWithType.vb: DataBasePackedFile.GetModel(Of TModel)(ResourceKey, Boolean)
  fullName.vb: LlamaLogic.Packages.DataBasePackedFile.GetModel(Of TModel)(LlamaLogic.Packages.ResourceKey, Boolean)
  name.vb: GetModel(Of TModel)(ResourceKey, Boolean)
- uid: LlamaLogic.Packages.DataBasePackedFile.GetModelAsync``1(LlamaLogic.Packages.ResourceKey,System.Boolean,System.Threading.CancellationToken)
  commentId: M:LlamaLogic.Packages.DataBasePackedFile.GetModelAsync``1(LlamaLogic.Packages.ResourceKey,System.Boolean,System.Threading.CancellationToken)
  id: GetModelAsync``1(LlamaLogic.Packages.ResourceKey,System.Boolean,System.Threading.CancellationToken)
  parent: LlamaLogic.Packages.DataBasePackedFile
  langs:
  - csharp
  - vb
  name: GetModelAsync<TModel>(ResourceKey, bool, CancellationToken)
  nameWithType: DataBasePackedFile.GetModelAsync<TModel>(ResourceKey, bool, CancellationToken)
  fullName: LlamaLogic.Packages.DataBasePackedFile.GetModelAsync<TModel>(LlamaLogic.Packages.ResourceKey, bool, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: LlamaLogic.Packages/DataBasePackedFile.cs
      branch: main
      repo: https://github.com/Llama-Logic/LlamaLogic.git
    id: GetModelAsync
    path: ../LlamaLogic.Packages/DataBasePackedFile.cs
    startLine: 965
  assemblies:
  - LlamaLogic.Packages
  namespace: LlamaLogic.Packages
  summary: Gets the content of a resource with the specified <code class="paramref">key</code> as a <code class="typeparamref">TModel</code> asynchronously
  example: []
  syntax:
    content: 'public Task<TModel> GetModelAsync<TModel>(ResourceKey key, bool force = false, CancellationToken cancellationToken = default) where TModel : IModel<TModel>'
    parameters:
    - id: key
      type: LlamaLogic.Packages.ResourceKey
    - id: force
      type: System.Boolean
    - id: cancellationToken
      type: System.Threading.CancellationToken
    typeParameters:
    - id: TModel
      description: A model used to browse and modify certain types of resources
    return:
      type: System.Threading.Tasks.Task{{TModel}}
    content.vb: Public Function GetModelAsync(Of TModel As IModel(Of TModel))(key As ResourceKey, force As Boolean = False, cancellationToken As CancellationToken = Nothing) As Task(Of TModel)
  overload: LlamaLogic.Packages.DataBasePackedFile.GetModelAsync*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code class="typeparamref">TModel</code> cannot deal with resources of the type specified by <code class="paramref">key</code>
  nameWithType.vb: DataBasePackedFile.GetModelAsync(Of TModel)(ResourceKey, Boolean, CancellationToken)
  fullName.vb: LlamaLogic.Packages.DataBasePackedFile.GetModelAsync(Of TModel)(LlamaLogic.Packages.ResourceKey, Boolean, System.Threading.CancellationToken)
  name.vb: GetModelAsync(Of TModel)(ResourceKey, Boolean, CancellationToken)
- uid: LlamaLogic.Packages.DataBasePackedFile.GetModFileManifest(LlamaLogic.Packages.ResourceKey,System.Boolean)
  commentId: M:LlamaLogic.Packages.DataBasePackedFile.GetModFileManifest(LlamaLogic.Packages.ResourceKey,System.Boolean)
  id: GetModFileManifest(LlamaLogic.Packages.ResourceKey,System.Boolean)
  parent: LlamaLogic.Packages.DataBasePackedFile
  langs:
  - csharp
  - vb
  name: GetModFileManifest(ResourceKey, bool)
  nameWithType: DataBasePackedFile.GetModFileManifest(ResourceKey, bool)
  fullName: LlamaLogic.Packages.DataBasePackedFile.GetModFileManifest(LlamaLogic.Packages.ResourceKey, bool)
  type: Method
  source:
    remote:
      path: LlamaLogic.Packages/DataBasePackedFile.cs
      branch: main
      repo: https://github.com/Llama-Logic/LlamaLogic.git
    id: GetModFileManifest
    path: ../LlamaLogic.Packages/DataBasePackedFile.cs
    startLine: 976
  assemblies:
  - LlamaLogic.Packages
  namespace: LlamaLogic.Packages
  summary: Gets the content of a resource with the specified <code class="paramref">key</code> as a <xref href="LlamaLogic.Packages.Models.ModFileManifest.ModFileManifestModel" data-throw-if-not-resolved="false"></xref>
  example: []
  syntax:
    content: public ModFileManifestModel GetModFileManifest(ResourceKey key, bool force = false)
    parameters:
    - id: key
      type: LlamaLogic.Packages.ResourceKey
    - id: force
      type: System.Boolean
    return:
      type: LlamaLogic.Packages.Models.ModFileManifest.ModFileManifestModel
    content.vb: Public Function GetModFileManifest(key As ResourceKey, force As Boolean = False) As ModFileManifestModel
  overload: LlamaLogic.Packages.DataBasePackedFile.GetModFileManifest*
  nameWithType.vb: DataBasePackedFile.GetModFileManifest(ResourceKey, Boolean)
  fullName.vb: LlamaLogic.Packages.DataBasePackedFile.GetModFileManifest(LlamaLogic.Packages.ResourceKey, Boolean)
  name.vb: GetModFileManifest(ResourceKey, Boolean)
- uid: LlamaLogic.Packages.DataBasePackedFile.GetModFileManifestAsync(LlamaLogic.Packages.ResourceKey,System.Boolean,System.Threading.CancellationToken)
  commentId: M:LlamaLogic.Packages.DataBasePackedFile.GetModFileManifestAsync(LlamaLogic.Packages.ResourceKey,System.Boolean,System.Threading.CancellationToken)
  id: GetModFileManifestAsync(LlamaLogic.Packages.ResourceKey,System.Boolean,System.Threading.CancellationToken)
  parent: LlamaLogic.Packages.DataBasePackedFile
  langs:
  - csharp
  - vb
  name: GetModFileManifestAsync(ResourceKey, bool, CancellationToken)
  nameWithType: DataBasePackedFile.GetModFileManifestAsync(ResourceKey, bool, CancellationToken)
  fullName: LlamaLogic.Packages.DataBasePackedFile.GetModFileManifestAsync(LlamaLogic.Packages.ResourceKey, bool, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: LlamaLogic.Packages/DataBasePackedFile.cs
      branch: main
      repo: https://github.com/Llama-Logic/LlamaLogic.git
    id: GetModFileManifestAsync
    path: ../LlamaLogic.Packages/DataBasePackedFile.cs
    startLine: 982
  assemblies:
  - LlamaLogic.Packages
  namespace: LlamaLogic.Packages
  summary: Gets the content of a resource with the specified <code class="paramref">key</code> as a <xref href="LlamaLogic.Packages.Models.ModFileManifest.ModFileManifestModel" data-throw-if-not-resolved="false"></xref> asynchronously
  example: []
  syntax:
    content: public Task<ModFileManifestModel> GetModFileManifestAsync(ResourceKey key, bool force = false, CancellationToken cancellationToken = default)
    parameters:
    - id: key
      type: LlamaLogic.Packages.ResourceKey
    - id: force
      type: System.Boolean
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{LlamaLogic.Packages.Models.ModFileManifest.ModFileManifestModel}
    content.vb: Public Function GetModFileManifestAsync(key As ResourceKey, force As Boolean = False, cancellationToken As CancellationToken = Nothing) As Task(Of ModFileManifestModel)
  overload: LlamaLogic.Packages.DataBasePackedFile.GetModFileManifestAsync*
  nameWithType.vb: DataBasePackedFile.GetModFileManifestAsync(ResourceKey, Boolean, CancellationToken)
  fullName.vb: LlamaLogic.Packages.DataBasePackedFile.GetModFileManifestAsync(LlamaLogic.Packages.ResourceKey, Boolean, System.Threading.CancellationToken)
  name.vb: GetModFileManifestAsync(ResourceKey, Boolean, CancellationToken)
- uid: LlamaLogic.Packages.DataBasePackedFile.GetNameByKey(LlamaLogic.Packages.ResourceKey)
  commentId: M:LlamaLogic.Packages.DataBasePackedFile.GetNameByKey(LlamaLogic.Packages.ResourceKey)
  id: GetNameByKey(LlamaLogic.Packages.ResourceKey)
  parent: LlamaLogic.Packages.DataBasePackedFile
  langs:
  - csharp
  - vb
  name: GetNameByKey(ResourceKey)
  nameWithType: DataBasePackedFile.GetNameByKey(ResourceKey)
  fullName: LlamaLogic.Packages.DataBasePackedFile.GetNameByKey(LlamaLogic.Packages.ResourceKey)
  type: Method
  source:
    remote:
      path: LlamaLogic.Packages/DataBasePackedFile.cs
      branch: main
      repo: https://github.com/Llama-Logic/LlamaLogic.git
    id: GetNameByKey
    path: ../LlamaLogic.Packages/DataBasePackedFile.cs
    startLine: 988
  assemblies:
  - LlamaLogic.Packages
  namespace: LlamaLogic.Packages
  summary: Gets the name for the resource with the specified <code class="paramref">key</code>
  example: []
  syntax:
    content: public string? GetNameByKey(ResourceKey key)
    parameters:
    - id: key
      type: LlamaLogic.Packages.ResourceKey
    return:
      type: System.String
    content.vb: Public Function GetNameByKey(key As ResourceKey) As String
  overload: LlamaLogic.Packages.DataBasePackedFile.GetNameByKey*
- uid: LlamaLogic.Packages.DataBasePackedFile.GetNameByKeyAsync(LlamaLogic.Packages.ResourceKey,System.Threading.CancellationToken)
  commentId: M:LlamaLogic.Packages.DataBasePackedFile.GetNameByKeyAsync(LlamaLogic.Packages.ResourceKey,System.Threading.CancellationToken)
  id: GetNameByKeyAsync(LlamaLogic.Packages.ResourceKey,System.Threading.CancellationToken)
  parent: LlamaLogic.Packages.DataBasePackedFile
  langs:
  - csharp
  - vb
  name: GetNameByKeyAsync(ResourceKey, CancellationToken)
  nameWithType: DataBasePackedFile.GetNameByKeyAsync(ResourceKey, CancellationToken)
  fullName: LlamaLogic.Packages.DataBasePackedFile.GetNameByKeyAsync(LlamaLogic.Packages.ResourceKey, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: LlamaLogic.Packages/DataBasePackedFile.cs
      branch: main
      repo: https://github.com/Llama-Logic/LlamaLogic.git
    id: GetNameByKeyAsync
    path: ../LlamaLogic.Packages/DataBasePackedFile.cs
    startLine: 999
  assemblies:
  - LlamaLogic.Packages
  namespace: LlamaLogic.Packages
  summary: Gets the name for the resource with the specified <code class="paramref">key</code> asynchronously
  example: []
  syntax:
    content: public Task<string?> GetNameByKeyAsync(ResourceKey key, CancellationToken cancellationToken = default)
    parameters:
    - id: key
      type: LlamaLogic.Packages.ResourceKey
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.String}
    content.vb: Public Function GetNameByKeyAsync(key As ResourceKey, cancellationToken As CancellationToken = Nothing) As Task(Of String)
  overload: LlamaLogic.Packages.DataBasePackedFile.GetNameByKeyAsync*
- uid: LlamaLogic.Packages.DataBasePackedFile.GetNames
  commentId: M:LlamaLogic.Packages.DataBasePackedFile.GetNames
  id: GetNames
  parent: LlamaLogic.Packages.DataBasePackedFile
  langs:
  - csharp
  - vb
  name: GetNames()
  nameWithType: DataBasePackedFile.GetNames()
  fullName: LlamaLogic.Packages.DataBasePackedFile.GetNames()
  type: Method
  source:
    remote:
      path: LlamaLogic.Packages/DataBasePackedFile.cs
      branch: main
      repo: https://github.com/Llama-Logic/LlamaLogic.git
    id: GetNames
    path: ../LlamaLogic.Packages/DataBasePackedFile.cs
    startLine: 1010
  assemblies:
  - LlamaLogic.Packages
  namespace: LlamaLogic.Packages
  summary: Gets the names for all the resources in the package
  example: []
  syntax:
    content: public IReadOnlyList<string> GetNames()
    return:
      type: System.Collections.Generic.IReadOnlyList{System.String}
    content.vb: Public Function GetNames() As IReadOnlyList(Of String)
  overload: LlamaLogic.Packages.DataBasePackedFile.GetNames*
- uid: LlamaLogic.Packages.DataBasePackedFile.GetNamesAsync(System.Threading.CancellationToken)
  commentId: M:LlamaLogic.Packages.DataBasePackedFile.GetNamesAsync(System.Threading.CancellationToken)
  id: GetNamesAsync(System.Threading.CancellationToken)
  parent: LlamaLogic.Packages.DataBasePackedFile
  langs:
  - csharp
  - vb
  name: GetNamesAsync(CancellationToken)
  nameWithType: DataBasePackedFile.GetNamesAsync(CancellationToken)
  fullName: LlamaLogic.Packages.DataBasePackedFile.GetNamesAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: LlamaLogic.Packages/DataBasePackedFile.cs
      branch: main
      repo: https://github.com/Llama-Logic/LlamaLogic.git
    id: GetNamesAsync
    path: ../LlamaLogic.Packages/DataBasePackedFile.cs
    startLine: 1021
  assemblies:
  - LlamaLogic.Packages
  namespace: LlamaLogic.Packages
  summary: Gets the names for all the resources in the package asynchronously
  example: []
  syntax:
    content: public Task<IReadOnlyList<string>> GetNamesAsync(CancellationToken cancellationToken = default)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyList{System.String}}
    content.vb: Public Function GetNamesAsync(cancellationToken As CancellationToken = Nothing) As Task(Of IReadOnlyList(Of String))
  overload: LlamaLogic.Packages.DataBasePackedFile.GetNamesAsync*
- uid: LlamaLogic.Packages.DataBasePackedFile.GetRaw(LlamaLogic.Packages.ResourceKey,System.Boolean)
  commentId: M:LlamaLogic.Packages.DataBasePackedFile.GetRaw(LlamaLogic.Packages.ResourceKey,System.Boolean)
  id: GetRaw(LlamaLogic.Packages.ResourceKey,System.Boolean)
  parent: LlamaLogic.Packages.DataBasePackedFile
  langs:
  - csharp
  - vb
  name: GetRaw(ResourceKey, bool)
  nameWithType: DataBasePackedFile.GetRaw(ResourceKey, bool)
  fullName: LlamaLogic.Packages.DataBasePackedFile.GetRaw(LlamaLogic.Packages.ResourceKey, bool)
  type: Method
  source:
    remote:
      path: LlamaLogic.Packages/DataBasePackedFile.cs
      branch: main
      repo: https://github.com/Llama-Logic/LlamaLogic.git
    id: GetRaw
    path: ../LlamaLogic.Packages/DataBasePackedFile.cs
    startLine: 1034
  assemblies:
  - LlamaLogic.Packages
  namespace: LlamaLogic.Packages
  summary: Gets the raw content of a resource with the specified <code class="paramref">key</code>, meaning that the library will not decompress it for you if it is compressed
  example: []
  syntax:
    content: public ReadOnlyMemory<byte> GetRaw(ResourceKey key, bool force = false)
    parameters:
    - id: key
      type: LlamaLogic.Packages.ResourceKey
      description: The key of the resource
    - id: force
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> to get the content of the resource even if it has been marked as deleted; otheriwse, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a> (default)
    return:
      type: System.ReadOnlyMemory{System.Byte}
    content.vb: Public Function GetRaw(key As ResourceKey, force As Boolean = False) As ReadOnlyMemory(Of Byte)
  overload: LlamaLogic.Packages.DataBasePackedFile.GetRaw*
  nameWithType.vb: DataBasePackedFile.GetRaw(ResourceKey, Boolean)
  fullName.vb: LlamaLogic.Packages.DataBasePackedFile.GetRaw(LlamaLogic.Packages.ResourceKey, Boolean)
  name.vb: GetRaw(ResourceKey, Boolean)
- uid: LlamaLogic.Packages.DataBasePackedFile.GetRawAsync(LlamaLogic.Packages.ResourceKey,System.Boolean,System.Threading.CancellationToken)
  commentId: M:LlamaLogic.Packages.DataBasePackedFile.GetRawAsync(LlamaLogic.Packages.ResourceKey,System.Boolean,System.Threading.CancellationToken)
  id: GetRawAsync(LlamaLogic.Packages.ResourceKey,System.Boolean,System.Threading.CancellationToken)
  parent: LlamaLogic.Packages.DataBasePackedFile
  langs:
  - csharp
  - vb
  name: GetRawAsync(ResourceKey, bool, CancellationToken)
  nameWithType: DataBasePackedFile.GetRawAsync(ResourceKey, bool, CancellationToken)
  fullName: LlamaLogic.Packages.DataBasePackedFile.GetRawAsync(LlamaLogic.Packages.ResourceKey, bool, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: LlamaLogic.Packages/DataBasePackedFile.cs
      branch: main
      repo: https://github.com/Llama-Logic/LlamaLogic.git
    id: GetRawAsync
    path: ../LlamaLogic.Packages/DataBasePackedFile.cs
    startLine: 1047
  assemblies:
  - LlamaLogic.Packages
  namespace: LlamaLogic.Packages
  summary: Gets the raw content of a resource with the specified <code class="paramref">key</code> asynchronously, meaning that the library will not decompress it for you if it is compressed
  example: []
  syntax:
    content: public Task<ReadOnlyMemory<byte>> GetRawAsync(ResourceKey key, bool force = false, CancellationToken cancellationToken = default)
    parameters:
    - id: key
      type: LlamaLogic.Packages.ResourceKey
      description: The key of the resource
    - id: force
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> to get the content of the resource even if it has been marked as deleted; otheriwse, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a> (default)
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to monitor for cancellation requests
    return:
      type: System.Threading.Tasks.Task{System.ReadOnlyMemory{System.Byte}}
    content.vb: Public Function GetRawAsync(key As ResourceKey, force As Boolean = False, cancellationToken As CancellationToken = Nothing) As Task(Of ReadOnlyMemory(Of Byte))
  overload: LlamaLogic.Packages.DataBasePackedFile.GetRawAsync*
  nameWithType.vb: DataBasePackedFile.GetRawAsync(ResourceKey, Boolean, CancellationToken)
  fullName.vb: LlamaLogic.Packages.DataBasePackedFile.GetRawAsync(LlamaLogic.Packages.ResourceKey, Boolean, System.Threading.CancellationToken)
  name.vb: GetRawAsync(ResourceKey, Boolean, CancellationToken)
- uid: LlamaLogic.Packages.DataBasePackedFile.GetSize(LlamaLogic.Packages.ResourceKey)
  commentId: M:LlamaLogic.Packages.DataBasePackedFile.GetSize(LlamaLogic.Packages.ResourceKey)
  id: GetSize(LlamaLogic.Packages.ResourceKey)
  parent: LlamaLogic.Packages.DataBasePackedFile
  langs:
  - csharp
  - vb
  name: GetSize(ResourceKey)
  nameWithType: DataBasePackedFile.GetSize(ResourceKey)
  fullName: LlamaLogic.Packages.DataBasePackedFile.GetSize(LlamaLogic.Packages.ResourceKey)
  type: Method
  source:
    remote:
      path: LlamaLogic.Packages/DataBasePackedFile.cs
      branch: main
      repo: https://github.com/Llama-Logic/LlamaLogic.git
    id: GetSize
    path: ../LlamaLogic.Packages/DataBasePackedFile.cs
    startLine: 1057
  assemblies:
  - LlamaLogic.Packages
  namespace: LlamaLogic.Packages
  summary: Gets the size of the content of the resource with the specified <code class="paramref">key</code>
  example: []
  syntax:
    content: public int GetSize(ResourceKey key)
    parameters:
    - id: key
      type: LlamaLogic.Packages.ResourceKey
    return:
      type: System.Int32
    content.vb: Public Function GetSize(key As ResourceKey) As Integer
  overload: LlamaLogic.Packages.DataBasePackedFile.GetSize*
- uid: LlamaLogic.Packages.DataBasePackedFile.GetSizeAsync(LlamaLogic.Packages.ResourceKey,System.Threading.CancellationToken)
  commentId: M:LlamaLogic.Packages.DataBasePackedFile.GetSizeAsync(LlamaLogic.Packages.ResourceKey,System.Threading.CancellationToken)
  id: GetSizeAsync(LlamaLogic.Packages.ResourceKey,System.Threading.CancellationToken)
  parent: LlamaLogic.Packages.DataBasePackedFile
  langs:
  - csharp
  - vb
  name: GetSizeAsync(ResourceKey, CancellationToken)
  nameWithType: DataBasePackedFile.GetSizeAsync(ResourceKey, CancellationToken)
  fullName: LlamaLogic.Packages.DataBasePackedFile.GetSizeAsync(LlamaLogic.Packages.ResourceKey, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: LlamaLogic.Packages/DataBasePackedFile.cs
      branch: main
      repo: https://github.com/Llama-Logic/LlamaLogic.git
    id: GetSizeAsync
    path: ../LlamaLogic.Packages/DataBasePackedFile.cs
    startLine: 1071
  assemblies:
  - LlamaLogic.Packages
  namespace: LlamaLogic.Packages
  summary: Gets the size of the content of the resource with the specified <code class="paramref">key</code> asynchronously
  example: []
  syntax:
    content: public Task<int> GetSizeAsync(ResourceKey key, CancellationToken cancellationToken = default)
    parameters:
    - id: key
      type: LlamaLogic.Packages.ResourceKey
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Int32}
    content.vb: Public Function GetSizeAsync(key As ResourceKey, cancellationToken As CancellationToken = Nothing) As Task(Of Integer)
  overload: LlamaLogic.Packages.DataBasePackedFile.GetSizeAsync*
- uid: LlamaLogic.Packages.DataBasePackedFile.GetStringTable(LlamaLogic.Packages.ResourceKey,System.Boolean)
  commentId: M:LlamaLogic.Packages.DataBasePackedFile.GetStringTable(LlamaLogic.Packages.ResourceKey,System.Boolean)
  id: GetStringTable(LlamaLogic.Packages.ResourceKey,System.Boolean)
  parent: LlamaLogic.Packages.DataBasePackedFile
  langs:
  - csharp
  - vb
  name: GetStringTable(ResourceKey, bool)
  nameWithType: DataBasePackedFile.GetStringTable(ResourceKey, bool)
  fullName: LlamaLogic.Packages.DataBasePackedFile.GetStringTable(LlamaLogic.Packages.ResourceKey, bool)
  type: Method
  source:
    remote:
      path: LlamaLogic.Packages/DataBasePackedFile.cs
      branch: main
      repo: https://github.com/Llama-Logic/LlamaLogic.git
    id: GetStringTable
    path: ../LlamaLogic.Packages/DataBasePackedFile.cs
    startLine: 1085
  assemblies:
  - LlamaLogic.Packages
  namespace: LlamaLogic.Packages
  summary: Gets the content of a resource with the specified <code class="paramref">key</code> as a <xref href="LlamaLogic.Packages.Models.StringTableModel" data-throw-if-not-resolved="false"></xref>
  example: []
  syntax:
    content: public StringTableModel GetStringTable(ResourceKey key, bool force = false)
    parameters:
    - id: key
      type: LlamaLogic.Packages.ResourceKey
    - id: force
      type: System.Boolean
    return:
      type: LlamaLogic.Packages.Models.StringTableModel
    content.vb: Public Function GetStringTable(key As ResourceKey, force As Boolean = False) As StringTableModel
  overload: LlamaLogic.Packages.DataBasePackedFile.GetStringTable*
  nameWithType.vb: DataBasePackedFile.GetStringTable(ResourceKey, Boolean)
  fullName.vb: LlamaLogic.Packages.DataBasePackedFile.GetStringTable(LlamaLogic.Packages.ResourceKey, Boolean)
  name.vb: GetStringTable(ResourceKey, Boolean)
- uid: LlamaLogic.Packages.DataBasePackedFile.GetStringTableAsync(LlamaLogic.Packages.ResourceKey,System.Boolean,System.Threading.CancellationToken)
  commentId: M:LlamaLogic.Packages.DataBasePackedFile.GetStringTableAsync(LlamaLogic.Packages.ResourceKey,System.Boolean,System.Threading.CancellationToken)
  id: GetStringTableAsync(LlamaLogic.Packages.ResourceKey,System.Boolean,System.Threading.CancellationToken)
  parent: LlamaLogic.Packages.DataBasePackedFile
  langs:
  - csharp
  - vb
  name: GetStringTableAsync(ResourceKey, bool, CancellationToken)
  nameWithType: DataBasePackedFile.GetStringTableAsync(ResourceKey, bool, CancellationToken)
  fullName: LlamaLogic.Packages.DataBasePackedFile.GetStringTableAsync(LlamaLogic.Packages.ResourceKey, bool, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: LlamaLogic.Packages/DataBasePackedFile.cs
      branch: main
      repo: https://github.com/Llama-Logic/LlamaLogic.git
    id: GetStringTableAsync
    path: ../LlamaLogic.Packages/DataBasePackedFile.cs
    startLine: 1091
  assemblies:
  - LlamaLogic.Packages
  namespace: LlamaLogic.Packages
  summary: Gets the content of a resource with the specified <code class="paramref">key</code> as a <xref href="LlamaLogic.Packages.Models.StringTableModel" data-throw-if-not-resolved="false"></xref> asynchronously
  example: []
  syntax:
    content: public Task<StringTableModel> GetStringTableAsync(ResourceKey key, bool force = false, CancellationToken cancellationToken = default)
    parameters:
    - id: key
      type: LlamaLogic.Packages.ResourceKey
    - id: force
      type: System.Boolean
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{LlamaLogic.Packages.Models.StringTableModel}
    content.vb: Public Function GetStringTableAsync(key As ResourceKey, force As Boolean = False, cancellationToken As CancellationToken = Nothing) As Task(Of StringTableModel)
  overload: LlamaLogic.Packages.DataBasePackedFile.GetStringTableAsync*
  nameWithType.vb: DataBasePackedFile.GetStringTableAsync(ResourceKey, Boolean, CancellationToken)
  fullName.vb: LlamaLogic.Packages.DataBasePackedFile.GetStringTableAsync(LlamaLogic.Packages.ResourceKey, Boolean, System.Threading.CancellationToken)
  name.vb: GetStringTableAsync(ResourceKey, Boolean, CancellationToken)
- uid: LlamaLogic.Packages.DataBasePackedFile.GetText(LlamaLogic.Packages.ResourceKey,System.Boolean)
  commentId: M:LlamaLogic.Packages.DataBasePackedFile.GetText(LlamaLogic.Packages.ResourceKey,System.Boolean)
  id: GetText(LlamaLogic.Packages.ResourceKey,System.Boolean)
  parent: LlamaLogic.Packages.DataBasePackedFile
  langs:
  - csharp
  - vb
  name: GetText(ResourceKey, bool)
  nameWithType: DataBasePackedFile.GetText(ResourceKey, bool)
  fullName: LlamaLogic.Packages.DataBasePackedFile.GetText(LlamaLogic.Packages.ResourceKey, bool)
  type: Method
  source:
    remote:
      path: LlamaLogic.Packages/DataBasePackedFile.cs
      branch: main
      repo: https://github.com/Llama-Logic/LlamaLogic.git
    id: GetText
    path: ../LlamaLogic.Packages/DataBasePackedFile.cs
    startLine: 1099
  assemblies:
  - LlamaLogic.Packages
  namespace: LlamaLogic.Packages
  summary: Gets the content of a resource with the specified <code class="paramref">key</code> as a <xref href="System.String" data-throw-if-not-resolved="false"></xref>
  example: []
  syntax:
    content: public string GetText(ResourceKey key, bool force = false)
    parameters:
    - id: key
      type: LlamaLogic.Packages.ResourceKey
      description: The key of the resource
    - id: force
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> to get the content of the resource even if it has been marked as deleted; otheriwse, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a> (default)
    return:
      type: System.String
    content.vb: Public Function GetText(key As ResourceKey, force As Boolean = False) As String
  overload: LlamaLogic.Packages.DataBasePackedFile.GetText*
  nameWithType.vb: DataBasePackedFile.GetText(ResourceKey, Boolean)
  fullName.vb: LlamaLogic.Packages.DataBasePackedFile.GetText(LlamaLogic.Packages.ResourceKey, Boolean)
  name.vb: GetText(ResourceKey, Boolean)
- uid: LlamaLogic.Packages.DataBasePackedFile.GetTextAsync(LlamaLogic.Packages.ResourceKey,System.Boolean,System.Threading.CancellationToken)
  commentId: M:LlamaLogic.Packages.DataBasePackedFile.GetTextAsync(LlamaLogic.Packages.ResourceKey,System.Boolean,System.Threading.CancellationToken)
  id: GetTextAsync(LlamaLogic.Packages.ResourceKey,System.Boolean,System.Threading.CancellationToken)
  parent: LlamaLogic.Packages.DataBasePackedFile
  langs:
  - csharp
  - vb
  name: GetTextAsync(ResourceKey, bool, CancellationToken)
  nameWithType: DataBasePackedFile.GetTextAsync(ResourceKey, bool, CancellationToken)
  fullName: LlamaLogic.Packages.DataBasePackedFile.GetTextAsync(LlamaLogic.Packages.ResourceKey, bool, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: LlamaLogic.Packages/DataBasePackedFile.cs
      branch: main
      repo: https://github.com/Llama-Logic/LlamaLogic.git
    id: GetTextAsync
    path: ../LlamaLogic.Packages/DataBasePackedFile.cs
    startLine: 1111
  assemblies:
  - LlamaLogic.Packages
  namespace: LlamaLogic.Packages
  summary: Gets the content of a resource with the specified <code class="paramref">key</code> as a <xref href="System.String" data-throw-if-not-resolved="false"></xref> asynchronously
  example: []
  syntax:
    content: public Task<string> GetTextAsync(ResourceKey key, bool force = false, CancellationToken cancellationToken = default)
    parameters:
    - id: key
      type: LlamaLogic.Packages.ResourceKey
      description: The key of the resource
    - id: force
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> to get the content of the resource even if it has been marked as deleted; otheriwse, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a> (default)
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to monitor for cancellation requests
    return:
      type: System.Threading.Tasks.Task{System.String}
    content.vb: Public Function GetTextAsync(key As ResourceKey, force As Boolean = False, cancellationToken As CancellationToken = Nothing) As Task(Of String)
  overload: LlamaLogic.Packages.DataBasePackedFile.GetTextAsync*
  nameWithType.vb: DataBasePackedFile.GetTextAsync(ResourceKey, Boolean, CancellationToken)
  fullName.vb: LlamaLogic.Packages.DataBasePackedFile.GetTextAsync(LlamaLogic.Packages.ResourceKey, Boolean, System.Threading.CancellationToken)
  name.vb: GetTextAsync(ResourceKey, Boolean, CancellationToken)
- uid: LlamaLogic.Packages.DataBasePackedFile.GetXml(LlamaLogic.Packages.ResourceKey,System.Boolean)
  commentId: M:LlamaLogic.Packages.DataBasePackedFile.GetXml(LlamaLogic.Packages.ResourceKey,System.Boolean)
  id: GetXml(LlamaLogic.Packages.ResourceKey,System.Boolean)
  parent: LlamaLogic.Packages.DataBasePackedFile
  langs:
  - csharp
  - vb
  name: GetXml(ResourceKey, bool)
  nameWithType: DataBasePackedFile.GetXml(ResourceKey, bool)
  fullName: LlamaLogic.Packages.DataBasePackedFile.GetXml(LlamaLogic.Packages.ResourceKey, bool)
  type: Method
  source:
    remote:
      path: LlamaLogic.Packages/DataBasePackedFile.cs
      branch: main
      repo: https://github.com/Llama-Logic/LlamaLogic.git
    id: GetXml
    path: ../LlamaLogic.Packages/DataBasePackedFile.cs
    startLine: 1127
  assemblies:
  - LlamaLogic.Packages
  namespace: LlamaLogic.Packages
  summary: Gets the content of a resource with the specified <code class="paramref">key</code> as an <xref href="System.Xml.Linq.XDocument" data-throw-if-not-resolved="false"></xref>
  example: []
  syntax:
    content: public XDocument GetXml(ResourceKey key, bool force = false)
    parameters:
    - id: key
      type: LlamaLogic.Packages.ResourceKey
      description: The key of the resource
    - id: force
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> to get the content of the resource even if it has been marked as deleted; otheriwse, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a> (default)
    return:
      type: System.Xml.Linq.XDocument
    content.vb: Public Function GetXml(key As ResourceKey, force As Boolean = False) As XDocument
  overload: LlamaLogic.Packages.DataBasePackedFile.GetXml*
  nameWithType.vb: DataBasePackedFile.GetXml(ResourceKey, Boolean)
  fullName.vb: LlamaLogic.Packages.DataBasePackedFile.GetXml(LlamaLogic.Packages.ResourceKey, Boolean)
  name.vb: GetXml(ResourceKey, Boolean)
- uid: LlamaLogic.Packages.DataBasePackedFile.GetXmlAsync(LlamaLogic.Packages.ResourceKey,System.Boolean,System.Threading.CancellationToken)
  commentId: M:LlamaLogic.Packages.DataBasePackedFile.GetXmlAsync(LlamaLogic.Packages.ResourceKey,System.Boolean,System.Threading.CancellationToken)
  id: GetXmlAsync(LlamaLogic.Packages.ResourceKey,System.Boolean,System.Threading.CancellationToken)
  parent: LlamaLogic.Packages.DataBasePackedFile
  langs:
  - csharp
  - vb
  name: GetXmlAsync(ResourceKey, bool, CancellationToken)
  nameWithType: DataBasePackedFile.GetXmlAsync(ResourceKey, bool, CancellationToken)
  fullName: LlamaLogic.Packages.DataBasePackedFile.GetXmlAsync(LlamaLogic.Packages.ResourceKey, bool, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: LlamaLogic.Packages/DataBasePackedFile.cs
      branch: main
      repo: https://github.com/Llama-Logic/LlamaLogic.git
    id: GetXmlAsync
    path: ../LlamaLogic.Packages/DataBasePackedFile.cs
    startLine: 1139
  assemblies:
  - LlamaLogic.Packages
  namespace: LlamaLogic.Packages
  summary: Gets the content of a resource with the specified <code class="paramref">key</code> as an <xref href="System.Xml.Linq.XDocument" data-throw-if-not-resolved="false"></xref> asynchronously
  example: []
  syntax:
    content: public Task<XDocument> GetXmlAsync(ResourceKey key, bool force = false, CancellationToken cancellationToken = default)
    parameters:
    - id: key
      type: LlamaLogic.Packages.ResourceKey
      description: The key of the resource
    - id: force
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> to get the content of the resource even if it has been marked as deleted; otheriwse, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a> (default)
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to monitor for cancellation requests
    return:
      type: System.Threading.Tasks.Task{System.Xml.Linq.XDocument}
    content.vb: Public Function GetXmlAsync(key As ResourceKey, force As Boolean = False, cancellationToken As CancellationToken = Nothing) As Task(Of XDocument)
  overload: LlamaLogic.Packages.DataBasePackedFile.GetXmlAsync*
  nameWithType.vb: DataBasePackedFile.GetXmlAsync(ResourceKey, Boolean, CancellationToken)
  fullName.vb: LlamaLogic.Packages.DataBasePackedFile.GetXmlAsync(LlamaLogic.Packages.ResourceKey, Boolean, System.Threading.CancellationToken)
  name.vb: GetXmlAsync(ResourceKey, Boolean, CancellationToken)
- uid: LlamaLogic.Packages.DataBasePackedFile.LoadAll(System.Boolean,LlamaLogic.Packages.CompressionMode)
  commentId: M:LlamaLogic.Packages.DataBasePackedFile.LoadAll(System.Boolean,LlamaLogic.Packages.CompressionMode)
  id: LoadAll(System.Boolean,LlamaLogic.Packages.CompressionMode)
  parent: LlamaLogic.Packages.DataBasePackedFile
  langs:
  - csharp
  - vb
  name: LoadAll(bool, CompressionMode)
  nameWithType: DataBasePackedFile.LoadAll(bool, CompressionMode)
  fullName: LlamaLogic.Packages.DataBasePackedFile.LoadAll(bool, LlamaLogic.Packages.CompressionMode)
  type: Method
  source:
    remote:
      path: LlamaLogic.Packages/DataBasePackedFile.cs
      branch: main
      repo: https://github.com/Llama-Logic/LlamaLogic.git
    id: LoadAll
    path: ../LlamaLogic.Packages/DataBasePackedFile.cs
    startLine: 1663
  assemblies:
  - LlamaLogic.Packages
  namespace: LlamaLogic.Packages
  summary: Loads all resources in the package into memory
  example: []
  syntax:
    content: public void LoadAll(bool force = false, CompressionMode compressionMode = CompressionMode.Auto)
    parameters:
    - id: force
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> to get the content of the resources even if they has been marked as deleted; otheriwse, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a> (default)
    - id: compressionMode
      type: LlamaLogic.Packages.CompressionMode
      description: This parameter is now ignored
    content.vb: Public Sub LoadAll(force As Boolean = False, compressionMode As CompressionMode = CompressionMode.Auto)
  overload: LlamaLogic.Packages.DataBasePackedFile.LoadAll*
  nameWithType.vb: DataBasePackedFile.LoadAll(Boolean, CompressionMode)
  fullName.vb: LlamaLogic.Packages.DataBasePackedFile.LoadAll(Boolean, LlamaLogic.Packages.CompressionMode)
  name.vb: LoadAll(Boolean, CompressionMode)
- uid: LlamaLogic.Packages.DataBasePackedFile.LoadNames
  commentId: M:LlamaLogic.Packages.DataBasePackedFile.LoadNames
  id: LoadNames
  parent: LlamaLogic.Packages.DataBasePackedFile
  langs:
  - csharp
  - vb
  name: LoadNames()
  nameWithType: DataBasePackedFile.LoadNames()
  fullName: LlamaLogic.Packages.DataBasePackedFile.LoadNames()
  type: Method
  source:
    remote:
      path: LlamaLogic.Packages/DataBasePackedFile.cs
      branch: main
      repo: https://github.com/Llama-Logic/LlamaLogic.git
    id: LoadNames
    path: ../LlamaLogic.Packages/DataBasePackedFile.cs
    startLine: 1673
  assemblies:
  - LlamaLogic.Packages
  namespace: LlamaLogic.Packages
  summary: Loads the names of all the resources in the package (a no-op if the names are already loaded)
  example: []
  syntax:
    content: public void LoadNames()
    content.vb: Public Sub LoadNames()
  overload: LlamaLogic.Packages.DataBasePackedFile.LoadNames*
- uid: LlamaLogic.Packages.DataBasePackedFile.LoadNamesAsync(System.Threading.CancellationToken)
  commentId: M:LlamaLogic.Packages.DataBasePackedFile.LoadNamesAsync(System.Threading.CancellationToken)
  id: LoadNamesAsync(System.Threading.CancellationToken)
  parent: LlamaLogic.Packages.DataBasePackedFile
  langs:
  - csharp
  - vb
  name: LoadNamesAsync(CancellationToken)
  nameWithType: DataBasePackedFile.LoadNamesAsync(CancellationToken)
  fullName: LlamaLogic.Packages.DataBasePackedFile.LoadNamesAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: LlamaLogic.Packages/DataBasePackedFile.cs
      branch: main
      repo: https://github.com/Llama-Logic/LlamaLogic.git
    id: LoadNamesAsync
    path: ../LlamaLogic.Packages/DataBasePackedFile.cs
    startLine: 1683
  assemblies:
  - LlamaLogic.Packages
  namespace: LlamaLogic.Packages
  summary: Loads the names of all the resources in the package asynchronously (a no-op if the names are already loaded)
  example: []
  syntax:
    content: public Task LoadNamesAsync(CancellationToken cancellationToken = default)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function LoadNamesAsync(cancellationToken As CancellationToken = Nothing) As Task
  overload: LlamaLogic.Packages.DataBasePackedFile.LoadNamesAsync*
- uid: LlamaLogic.Packages.DataBasePackedFile.LoadAllAsync(System.Boolean,LlamaLogic.Packages.CompressionMode,System.Threading.CancellationToken)
  commentId: M:LlamaLogic.Packages.DataBasePackedFile.LoadAllAsync(System.Boolean,LlamaLogic.Packages.CompressionMode,System.Threading.CancellationToken)
  id: LoadAllAsync(System.Boolean,LlamaLogic.Packages.CompressionMode,System.Threading.CancellationToken)
  parent: LlamaLogic.Packages.DataBasePackedFile
  langs:
  - csharp
  - vb
  name: LoadAllAsync(bool, CompressionMode, CancellationToken)
  nameWithType: DataBasePackedFile.LoadAllAsync(bool, CompressionMode, CancellationToken)
  fullName: LlamaLogic.Packages.DataBasePackedFile.LoadAllAsync(bool, LlamaLogic.Packages.CompressionMode, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: LlamaLogic.Packages/DataBasePackedFile.cs
      branch: main
      repo: https://github.com/Llama-Logic/LlamaLogic.git
    id: LoadAllAsync
    path: ../LlamaLogic.Packages/DataBasePackedFile.cs
    startLine: 1696
  assemblies:
  - LlamaLogic.Packages
  namespace: LlamaLogic.Packages
  summary: Loads all resources in the package into memory
  example: []
  syntax:
    content: public Task LoadAllAsync(bool force = false, CompressionMode compressionMode = CompressionMode.Auto, CancellationToken cancellationToken = default)
    parameters:
    - id: force
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> to get the content of the resources even if they has been marked as deleted; otheriwse, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a> (default)
    - id: compressionMode
      type: LlamaLogic.Packages.CompressionMode
      description: This parameter is now ignored
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to monitor for cancellation requests
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function LoadAllAsync(force As Boolean = False, compressionMode As CompressionMode = CompressionMode.Auto, cancellationToken As CancellationToken = Nothing) As Task
  overload: LlamaLogic.Packages.DataBasePackedFile.LoadAllAsync*
  nameWithType.vb: DataBasePackedFile.LoadAllAsync(Boolean, CompressionMode, CancellationToken)
  fullName.vb: LlamaLogic.Packages.DataBasePackedFile.LoadAllAsync(Boolean, LlamaLogic.Packages.CompressionMode, System.Threading.CancellationToken)
  name.vb: LoadAllAsync(Boolean, CompressionMode, CancellationToken)
- uid: LlamaLogic.Packages.DataBasePackedFile.Save(System.Boolean,LlamaLogic.Packages.ResourceKeyOrder)
  commentId: M:LlamaLogic.Packages.DataBasePackedFile.Save(System.Boolean,LlamaLogic.Packages.ResourceKeyOrder)
  id: Save(System.Boolean,LlamaLogic.Packages.ResourceKeyOrder)
  parent: LlamaLogic.Packages.DataBasePackedFile
  langs:
  - csharp
  - vb
  name: Save(bool, ResourceKeyOrder)
  nameWithType: DataBasePackedFile.Save(bool, ResourceKeyOrder)
  fullName: LlamaLogic.Packages.DataBasePackedFile.Save(bool, LlamaLogic.Packages.ResourceKeyOrder)
  type: Method
  source:
    remote:
      path: LlamaLogic.Packages/DataBasePackedFile.cs
      branch: main
      repo: https://github.com/Llama-Logic/LlamaLogic.git
    id: Save
    path: ../LlamaLogic.Packages/DataBasePackedFile.cs
    startLine: 1808
  assemblies:
  - LlamaLogic.Packages
  namespace: LlamaLogic.Packages
  summary: Saves the package to the stream from which it was loaded
  example: []
  syntax:
    content: public void Save(bool unloadFromMemory = false, ResourceKeyOrder resourceKeyOrder = ResourceKeyOrder.Preserve)
    parameters:
    - id: unloadFromMemory
      type: System.Boolean
    - id: resourceKeyOrder
      type: LlamaLogic.Packages.ResourceKeyOrder
    content.vb: Public Sub Save(unloadFromMemory As Boolean = False, resourceKeyOrder As ResourceKeyOrder = ResourceKeyOrder.Preserve)
  overload: LlamaLogic.Packages.DataBasePackedFile.Save*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The package was not loaded from stream or the stream is not writeable
  nameWithType.vb: DataBasePackedFile.Save(Boolean, ResourceKeyOrder)
  fullName.vb: LlamaLogic.Packages.DataBasePackedFile.Save(Boolean, LlamaLogic.Packages.ResourceKeyOrder)
  name.vb: Save(Boolean, ResourceKeyOrder)
- uid: LlamaLogic.Packages.DataBasePackedFile.SaveAs(System.String,LlamaLogic.Packages.ResourceKeyOrder)
  commentId: M:LlamaLogic.Packages.DataBasePackedFile.SaveAs(System.String,LlamaLogic.Packages.ResourceKeyOrder)
  id: SaveAs(System.String,LlamaLogic.Packages.ResourceKeyOrder)
  parent: LlamaLogic.Packages.DataBasePackedFile
  langs:
  - csharp
  - vb
  name: SaveAs(string, ResourceKeyOrder)
  nameWithType: DataBasePackedFile.SaveAs(string, ResourceKeyOrder)
  fullName: LlamaLogic.Packages.DataBasePackedFile.SaveAs(string, LlamaLogic.Packages.ResourceKeyOrder)
  type: Method
  source:
    remote:
      path: LlamaLogic.Packages/DataBasePackedFile.cs
      branch: main
      repo: https://github.com/Llama-Logic/LlamaLogic.git
    id: SaveAs
    path: ../LlamaLogic.Packages/DataBasePackedFile.cs
    startLine: 1829
  assemblies:
  - LlamaLogic.Packages
  namespace: LlamaLogic.Packages
  summary: "Saves the package to the specified <code class=\"paramref\">path</code> (\U0001F504️\U0001F3C3)"
  example: []
  syntax:
    content: public void SaveAs(string path, ResourceKeyOrder resourceKeyOrder = ResourceKeyOrder.Preserve)
    parameters:
    - id: path
      type: System.String
    - id: resourceKeyOrder
      type: LlamaLogic.Packages.ResourceKeyOrder
    content.vb: Public Sub SaveAs(path As String, resourceKeyOrder As ResourceKeyOrder = ResourceKeyOrder.Preserve)
  overload: LlamaLogic.Packages.DataBasePackedFile.SaveAs*
  nameWithType.vb: DataBasePackedFile.SaveAs(String, ResourceKeyOrder)
  fullName.vb: LlamaLogic.Packages.DataBasePackedFile.SaveAs(String, LlamaLogic.Packages.ResourceKeyOrder)
  name.vb: SaveAs(String, ResourceKeyOrder)
- uid: LlamaLogic.Packages.DataBasePackedFile.SaveAsync(System.Boolean,LlamaLogic.Packages.ResourceKeyOrder,System.Threading.CancellationToken)
  commentId: M:LlamaLogic.Packages.DataBasePackedFile.SaveAsync(System.Boolean,LlamaLogic.Packages.ResourceKeyOrder,System.Threading.CancellationToken)
  id: SaveAsync(System.Boolean,LlamaLogic.Packages.ResourceKeyOrder,System.Threading.CancellationToken)
  parent: LlamaLogic.Packages.DataBasePackedFile
  langs:
  - csharp
  - vb
  name: SaveAsync(bool, ResourceKeyOrder, CancellationToken)
  nameWithType: DataBasePackedFile.SaveAsync(bool, ResourceKeyOrder, CancellationToken)
  fullName: LlamaLogic.Packages.DataBasePackedFile.SaveAsync(bool, LlamaLogic.Packages.ResourceKeyOrder, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: LlamaLogic.Packages/DataBasePackedFile.cs
      branch: main
      repo: https://github.com/Llama-Logic/LlamaLogic.git
    id: SaveAsync
    path: ../LlamaLogic.Packages/DataBasePackedFile.cs
    startLine: 1850
  assemblies:
  - LlamaLogic.Packages
  namespace: LlamaLogic.Packages
  summary: Saves the package to the stream from which it was loaded asynchronously
  example: []
  syntax:
    content: public Task SaveAsync(bool unloadFromMemory = false, ResourceKeyOrder resourceKeyOrder = ResourceKeyOrder.Preserve, CancellationToken cancellationToken = default)
    parameters:
    - id: unloadFromMemory
      type: System.Boolean
    - id: resourceKeyOrder
      type: LlamaLogic.Packages.ResourceKeyOrder
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function SaveAsync(unloadFromMemory As Boolean = False, resourceKeyOrder As ResourceKeyOrder = ResourceKeyOrder.Preserve, cancellationToken As CancellationToken = Nothing) As Task
  overload: LlamaLogic.Packages.DataBasePackedFile.SaveAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The package was not loaded from stream or the stream is not writeable
  nameWithType.vb: DataBasePackedFile.SaveAsync(Boolean, ResourceKeyOrder, CancellationToken)
  fullName.vb: LlamaLogic.Packages.DataBasePackedFile.SaveAsync(Boolean, LlamaLogic.Packages.ResourceKeyOrder, System.Threading.CancellationToken)
  name.vb: SaveAsync(Boolean, ResourceKeyOrder, CancellationToken)
- uid: LlamaLogic.Packages.DataBasePackedFile.SaveAsAsync(System.String,LlamaLogic.Packages.ResourceKeyOrder,System.Threading.CancellationToken)
  commentId: M:LlamaLogic.Packages.DataBasePackedFile.SaveAsAsync(System.String,LlamaLogic.Packages.ResourceKeyOrder,System.Threading.CancellationToken)
  id: SaveAsAsync(System.String,LlamaLogic.Packages.ResourceKeyOrder,System.Threading.CancellationToken)
  parent: LlamaLogic.Packages.DataBasePackedFile
  langs:
  - csharp
  - vb
  name: SaveAsAsync(string, ResourceKeyOrder, CancellationToken)
  nameWithType: DataBasePackedFile.SaveAsAsync(string, ResourceKeyOrder, CancellationToken)
  fullName: LlamaLogic.Packages.DataBasePackedFile.SaveAsAsync(string, LlamaLogic.Packages.ResourceKeyOrder, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: LlamaLogic.Packages/DataBasePackedFile.cs
      branch: main
      repo: https://github.com/Llama-Logic/LlamaLogic.git
    id: SaveAsAsync
    path: ../LlamaLogic.Packages/DataBasePackedFile.cs
    startLine: 1871
  assemblies:
  - LlamaLogic.Packages
  namespace: LlamaLogic.Packages
  summary: "Saves the package to the specified <code class=\"paramref\">path</code> asynchronously (\U0001F504️\U0001F3C3)"
  example: []
  syntax:
    content: public Task SaveAsAsync(string path, ResourceKeyOrder resourceKeyOrder = ResourceKeyOrder.Preserve, CancellationToken cancellationToken = default)
    parameters:
    - id: path
      type: System.String
    - id: resourceKeyOrder
      type: LlamaLogic.Packages.ResourceKeyOrder
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function SaveAsAsync(path As String, resourceKeyOrder As ResourceKeyOrder = ResourceKeyOrder.Preserve, cancellationToken As CancellationToken = Nothing) As Task
  overload: LlamaLogic.Packages.DataBasePackedFile.SaveAsAsync*
  nameWithType.vb: DataBasePackedFile.SaveAsAsync(String, ResourceKeyOrder, CancellationToken)
  fullName.vb: LlamaLogic.Packages.DataBasePackedFile.SaveAsAsync(String, LlamaLogic.Packages.ResourceKeyOrder, System.Threading.CancellationToken)
  name.vb: SaveAsAsync(String, ResourceKeyOrder, CancellationToken)
- uid: LlamaLogic.Packages.DataBasePackedFile.Set(LlamaLogic.Packages.ResourceKey,System.ReadOnlyMemory{System.Byte},LlamaLogic.Packages.CompressionMode)
  commentId: M:LlamaLogic.Packages.DataBasePackedFile.Set(LlamaLogic.Packages.ResourceKey,System.ReadOnlyMemory{System.Byte},LlamaLogic.Packages.CompressionMode)
  id: Set(LlamaLogic.Packages.ResourceKey,System.ReadOnlyMemory{System.Byte},LlamaLogic.Packages.CompressionMode)
  parent: LlamaLogic.Packages.DataBasePackedFile
  langs:
  - csharp
  - vb
  name: Set(ResourceKey, ReadOnlyMemory<byte>, CompressionMode)
  nameWithType: DataBasePackedFile.Set(ResourceKey, ReadOnlyMemory<byte>, CompressionMode)
  fullName: LlamaLogic.Packages.DataBasePackedFile.Set(LlamaLogic.Packages.ResourceKey, System.ReadOnlyMemory<byte>, LlamaLogic.Packages.CompressionMode)
  type: Method
  source:
    remote:
      path: LlamaLogic.Packages/DataBasePackedFile.cs
      branch: main
      repo: https://github.com/Llama-Logic/LlamaLogic.git
    id: Set
    path: ../LlamaLogic.Packages/DataBasePackedFile.cs
    startLine: 1894
  assemblies:
  - LlamaLogic.Packages
  namespace: LlamaLogic.Packages
  summary: Sets the <code class="paramref">content</code> of a resource with the specified <code class="paramref">key</code>, returning <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if the resource was compressed; otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>
  example: []
  syntax:
    content: public bool Set(ResourceKey key, ReadOnlyMemory<byte> content, CompressionMode compressionMode = CompressionMode.Auto)
    parameters:
    - id: key
      type: LlamaLogic.Packages.ResourceKey
      description: The key of the resource
    - id: content
      type: System.ReadOnlyMemory{System.Byte}
      description: The content of the resource
    - id: compressionMode
      type: LlamaLogic.Packages.CompressionMode
      description: The compression mode to use for the resource
    return:
      type: System.Boolean
    content.vb: Public Function [Set](key As ResourceKey, content As ReadOnlyMemory(Of Byte), compressionMode As CompressionMode = CompressionMode.Auto) As Boolean
  overload: LlamaLogic.Packages.DataBasePackedFile.Set*
  nameWithType.vb: DataBasePackedFile.Set(ResourceKey, ReadOnlyMemory(Of Byte), CompressionMode)
  fullName.vb: LlamaLogic.Packages.DataBasePackedFile.Set(LlamaLogic.Packages.ResourceKey, System.ReadOnlyMemory(Of Byte), LlamaLogic.Packages.CompressionMode)
  name.vb: Set(ResourceKey, ReadOnlyMemory(Of Byte), CompressionMode)
- uid: LlamaLogic.Packages.DataBasePackedFile.Set(LlamaLogic.Packages.ResourceKey,LlamaLogic.Packages.Models.IModel,LlamaLogic.Packages.CompressionMode)
  commentId: M:LlamaLogic.Packages.DataBasePackedFile.Set(LlamaLogic.Packages.ResourceKey,LlamaLogic.Packages.Models.IModel,LlamaLogic.Packages.CompressionMode)
  id: Set(LlamaLogic.Packages.ResourceKey,LlamaLogic.Packages.Models.IModel,LlamaLogic.Packages.CompressionMode)
  parent: LlamaLogic.Packages.DataBasePackedFile
  langs:
  - csharp
  - vb
  name: Set(ResourceKey, IModel, CompressionMode)
  nameWithType: DataBasePackedFile.Set(ResourceKey, IModel, CompressionMode)
  fullName: LlamaLogic.Packages.DataBasePackedFile.Set(LlamaLogic.Packages.ResourceKey, LlamaLogic.Packages.Models.IModel, LlamaLogic.Packages.CompressionMode)
  type: Method
  source:
    remote:
      path: LlamaLogic.Packages/DataBasePackedFile.cs
      branch: main
      repo: https://github.com/Llama-Logic/LlamaLogic.git
    id: Set
    path: ../LlamaLogic.Packages/DataBasePackedFile.cs
    startLine: 1909
  assemblies:
  - LlamaLogic.Packages
  namespace: LlamaLogic.Packages
  summary: Sets the <code class="paramref">content</code> of a resource with the specified <code class="paramref">key</code>, returning <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if the resource was compressed; otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>
  example: []
  syntax:
    content: public bool Set(ResourceKey key, IModel content, CompressionMode compressionMode = CompressionMode.Auto)
    parameters:
    - id: key
      type: LlamaLogic.Packages.ResourceKey
      description: The key of the resource
    - id: content
      type: LlamaLogic.Packages.Models.IModel
      description: The content of the resource
    - id: compressionMode
      type: LlamaLogic.Packages.CompressionMode
      description: The compression mode to use for the resource
    return:
      type: System.Boolean
    content.vb: Public Function [Set](key As ResourceKey, content As IModel, compressionMode As CompressionMode = CompressionMode.Auto) As Boolean
  overload: LlamaLogic.Packages.DataBasePackedFile.Set*
- uid: LlamaLogic.Packages.DataBasePackedFile.Set(LlamaLogic.Packages.ResourceKey,System.String,LlamaLogic.Packages.CompressionMode)
  commentId: M:LlamaLogic.Packages.DataBasePackedFile.Set(LlamaLogic.Packages.ResourceKey,System.String,LlamaLogic.Packages.CompressionMode)
  id: Set(LlamaLogic.Packages.ResourceKey,System.String,LlamaLogic.Packages.CompressionMode)
  parent: LlamaLogic.Packages.DataBasePackedFile
  langs:
  - csharp
  - vb
  name: Set(ResourceKey, string, CompressionMode)
  nameWithType: DataBasePackedFile.Set(ResourceKey, string, CompressionMode)
  fullName: LlamaLogic.Packages.DataBasePackedFile.Set(LlamaLogic.Packages.ResourceKey, string, LlamaLogic.Packages.CompressionMode)
  type: Method
  source:
    remote:
      path: LlamaLogic.Packages/DataBasePackedFile.cs
      branch: main
      repo: https://github.com/Llama-Logic/LlamaLogic.git
    id: Set
    path: ../LlamaLogic.Packages/DataBasePackedFile.cs
    startLine: 1921
  assemblies:
  - LlamaLogic.Packages
  namespace: LlamaLogic.Packages
  summary: Sets the <code class="paramref">content</code> of a resource with the specified <code class="paramref">key</code>, returning <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if the resource was compressed; otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>
  example: []
  syntax:
    content: public bool Set(ResourceKey key, string content, CompressionMode compressionMode = CompressionMode.Auto)
    parameters:
    - id: key
      type: LlamaLogic.Packages.ResourceKey
      description: The key of the resource
    - id: content
      type: System.String
      description: The content of the resource
    - id: compressionMode
      type: LlamaLogic.Packages.CompressionMode
      description: The compression mode to use for the resource
    return:
      type: System.Boolean
    content.vb: Public Function [Set](key As ResourceKey, content As String, compressionMode As CompressionMode = CompressionMode.Auto) As Boolean
  overload: LlamaLogic.Packages.DataBasePackedFile.Set*
  nameWithType.vb: DataBasePackedFile.Set(ResourceKey, String, CompressionMode)
  fullName.vb: LlamaLogic.Packages.DataBasePackedFile.Set(LlamaLogic.Packages.ResourceKey, String, LlamaLogic.Packages.CompressionMode)
  name.vb: Set(ResourceKey, String, CompressionMode)
- uid: LlamaLogic.Packages.DataBasePackedFile.Set(LlamaLogic.Packages.ResourceKey,System.Xml.Linq.XDocument,LlamaLogic.Packages.CompressionMode)
  commentId: M:LlamaLogic.Packages.DataBasePackedFile.Set(LlamaLogic.Packages.ResourceKey,System.Xml.Linq.XDocument,LlamaLogic.Packages.CompressionMode)
  id: Set(LlamaLogic.Packages.ResourceKey,System.Xml.Linq.XDocument,LlamaLogic.Packages.CompressionMode)
  parent: LlamaLogic.Packages.DataBasePackedFile
  langs:
  - csharp
  - vb
  name: Set(ResourceKey, XDocument, CompressionMode)
  nameWithType: DataBasePackedFile.Set(ResourceKey, XDocument, CompressionMode)
  fullName: LlamaLogic.Packages.DataBasePackedFile.Set(LlamaLogic.Packages.ResourceKey, System.Xml.Linq.XDocument, LlamaLogic.Packages.CompressionMode)
  type: Method
  source:
    remote:
      path: LlamaLogic.Packages/DataBasePackedFile.cs
      branch: main
      repo: https://github.com/Llama-Logic/LlamaLogic.git
    id: Set
    path: ../LlamaLogic.Packages/DataBasePackedFile.cs
    startLine: 1936
  assemblies:
  - LlamaLogic.Packages
  namespace: LlamaLogic.Packages
  summary: Sets the <code class="paramref">content</code> of a resource with the specified <code class="paramref">key</code>, returning <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if the resource was compressed; otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>
  example: []
  syntax:
    content: public bool Set(ResourceKey key, XDocument content, CompressionMode compressionMode = CompressionMode.Auto)
    parameters:
    - id: key
      type: LlamaLogic.Packages.ResourceKey
      description: The key of the resource
    - id: content
      type: System.Xml.Linq.XDocument
      description: The content of the resource
    - id: compressionMode
      type: LlamaLogic.Packages.CompressionMode
      description: The compression mode to use for the resource
    return:
      type: System.Boolean
    content.vb: Public Function [Set](key As ResourceKey, content As XDocument, compressionMode As CompressionMode = CompressionMode.Auto) As Boolean
  overload: LlamaLogic.Packages.DataBasePackedFile.Set*
- uid: LlamaLogic.Packages.DataBasePackedFile.SetAsync(LlamaLogic.Packages.ResourceKey,System.ReadOnlyMemory{System.Byte},LlamaLogic.Packages.CompressionMode,System.Threading.CancellationToken)
  commentId: M:LlamaLogic.Packages.DataBasePackedFile.SetAsync(LlamaLogic.Packages.ResourceKey,System.ReadOnlyMemory{System.Byte},LlamaLogic.Packages.CompressionMode,System.Threading.CancellationToken)
  id: SetAsync(LlamaLogic.Packages.ResourceKey,System.ReadOnlyMemory{System.Byte},LlamaLogic.Packages.CompressionMode,System.Threading.CancellationToken)
  parent: LlamaLogic.Packages.DataBasePackedFile
  langs:
  - csharp
  - vb
  name: SetAsync(ResourceKey, ReadOnlyMemory<byte>, CompressionMode, CancellationToken)
  nameWithType: DataBasePackedFile.SetAsync(ResourceKey, ReadOnlyMemory<byte>, CompressionMode, CancellationToken)
  fullName: LlamaLogic.Packages.DataBasePackedFile.SetAsync(LlamaLogic.Packages.ResourceKey, System.ReadOnlyMemory<byte>, LlamaLogic.Packages.CompressionMode, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: LlamaLogic.Packages/DataBasePackedFile.cs
      branch: main
      repo: https://github.com/Llama-Logic/LlamaLogic.git
    id: SetAsync
    path: ../LlamaLogic.Packages/DataBasePackedFile.cs
    startLine: 1955
  assemblies:
  - LlamaLogic.Packages
  namespace: LlamaLogic.Packages
  summary: Sets the <code class="paramref">content</code> of a resource with the specified <code class="paramref">key</code>, returning <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if the resource was compressed; otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>
  example: []
  syntax:
    content: public Task<bool> SetAsync(ResourceKey key, ReadOnlyMemory<byte> content, CompressionMode compressionMode = CompressionMode.Auto, CancellationToken cancellationToken = default)
    parameters:
    - id: key
      type: LlamaLogic.Packages.ResourceKey
      description: The key of the resource
    - id: content
      type: System.ReadOnlyMemory{System.Byte}
      description: The content of the resource
    - id: compressionMode
      type: LlamaLogic.Packages.CompressionMode
      description: The compression mode to use for the resource
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to monitor for cancellation requests
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: Public Function SetAsync(key As ResourceKey, content As ReadOnlyMemory(Of Byte), compressionMode As CompressionMode = CompressionMode.Auto, cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)
  overload: LlamaLogic.Packages.DataBasePackedFile.SetAsync*
  nameWithType.vb: DataBasePackedFile.SetAsync(ResourceKey, ReadOnlyMemory(Of Byte), CompressionMode, CancellationToken)
  fullName.vb: LlamaLogic.Packages.DataBasePackedFile.SetAsync(LlamaLogic.Packages.ResourceKey, System.ReadOnlyMemory(Of Byte), LlamaLogic.Packages.CompressionMode, System.Threading.CancellationToken)
  name.vb: SetAsync(ResourceKey, ReadOnlyMemory(Of Byte), CompressionMode, CancellationToken)
- uid: LlamaLogic.Packages.DataBasePackedFile.SetAsync(LlamaLogic.Packages.ResourceKey,LlamaLogic.Packages.Models.IModel,LlamaLogic.Packages.CompressionMode,System.Threading.CancellationToken)
  commentId: M:LlamaLogic.Packages.DataBasePackedFile.SetAsync(LlamaLogic.Packages.ResourceKey,LlamaLogic.Packages.Models.IModel,LlamaLogic.Packages.CompressionMode,System.Threading.CancellationToken)
  id: SetAsync(LlamaLogic.Packages.ResourceKey,LlamaLogic.Packages.Models.IModel,LlamaLogic.Packages.CompressionMode,System.Threading.CancellationToken)
  parent: LlamaLogic.Packages.DataBasePackedFile
  langs:
  - csharp
  - vb
  name: SetAsync(ResourceKey, IModel, CompressionMode, CancellationToken)
  nameWithType: DataBasePackedFile.SetAsync(ResourceKey, IModel, CompressionMode, CancellationToken)
  fullName: LlamaLogic.Packages.DataBasePackedFile.SetAsync(LlamaLogic.Packages.ResourceKey, LlamaLogic.Packages.Models.IModel, LlamaLogic.Packages.CompressionMode, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: LlamaLogic.Packages/DataBasePackedFile.cs
      branch: main
      repo: https://github.com/Llama-Logic/LlamaLogic.git
    id: SetAsync
    path: ../LlamaLogic.Packages/DataBasePackedFile.cs
    startLine: 1971
  assemblies:
  - LlamaLogic.Packages
  namespace: LlamaLogic.Packages
  summary: Sets the <code class="paramref">content</code> of a resource with the specified <code class="paramref">key</code>, returning <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if the resource was compressed; otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>
  example: []
  syntax:
    content: public Task<bool> SetAsync(ResourceKey key, IModel content, CompressionMode compressionMode = CompressionMode.Auto, CancellationToken cancellationToken = default)
    parameters:
    - id: key
      type: LlamaLogic.Packages.ResourceKey
      description: The key of the resource
    - id: content
      type: LlamaLogic.Packages.Models.IModel
      description: The content of the resource
    - id: compressionMode
      type: LlamaLogic.Packages.CompressionMode
      description: The compression mode to use for the resource
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to monitor for cancellation requests
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: Public Function SetAsync(key As ResourceKey, content As IModel, compressionMode As CompressionMode = CompressionMode.Auto, cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)
  overload: LlamaLogic.Packages.DataBasePackedFile.SetAsync*
- uid: LlamaLogic.Packages.DataBasePackedFile.SetAsync(LlamaLogic.Packages.ResourceKey,System.String,LlamaLogic.Packages.CompressionMode,System.Threading.CancellationToken)
  commentId: M:LlamaLogic.Packages.DataBasePackedFile.SetAsync(LlamaLogic.Packages.ResourceKey,System.String,LlamaLogic.Packages.CompressionMode,System.Threading.CancellationToken)
  id: SetAsync(LlamaLogic.Packages.ResourceKey,System.String,LlamaLogic.Packages.CompressionMode,System.Threading.CancellationToken)
  parent: LlamaLogic.Packages.DataBasePackedFile
  langs:
  - csharp
  - vb
  name: SetAsync(ResourceKey, string, CompressionMode, CancellationToken)
  nameWithType: DataBasePackedFile.SetAsync(ResourceKey, string, CompressionMode, CancellationToken)
  fullName: LlamaLogic.Packages.DataBasePackedFile.SetAsync(LlamaLogic.Packages.ResourceKey, string, LlamaLogic.Packages.CompressionMode, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: LlamaLogic.Packages/DataBasePackedFile.cs
      branch: main
      repo: https://github.com/Llama-Logic/LlamaLogic.git
    id: SetAsync
    path: ../LlamaLogic.Packages/DataBasePackedFile.cs
    startLine: 1984
  assemblies:
  - LlamaLogic.Packages
  namespace: LlamaLogic.Packages
  summary: Sets the <code class="paramref">content</code> of a resource with the specified <code class="paramref">key</code>, returning <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if the resource was compressed; otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>
  example: []
  syntax:
    content: public Task<bool> SetAsync(ResourceKey key, string content, CompressionMode compressionMode = CompressionMode.Auto, CancellationToken cancellationToken = default)
    parameters:
    - id: key
      type: LlamaLogic.Packages.ResourceKey
      description: The key of the resource
    - id: content
      type: System.String
      description: The content of the resource
    - id: compressionMode
      type: LlamaLogic.Packages.CompressionMode
      description: The compression mode to use for the resource
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to monitor for cancellation requests
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: Public Function SetAsync(key As ResourceKey, content As String, compressionMode As CompressionMode = CompressionMode.Auto, cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)
  overload: LlamaLogic.Packages.DataBasePackedFile.SetAsync*
  nameWithType.vb: DataBasePackedFile.SetAsync(ResourceKey, String, CompressionMode, CancellationToken)
  fullName.vb: LlamaLogic.Packages.DataBasePackedFile.SetAsync(LlamaLogic.Packages.ResourceKey, String, LlamaLogic.Packages.CompressionMode, System.Threading.CancellationToken)
  name.vb: SetAsync(ResourceKey, String, CompressionMode, CancellationToken)
- uid: LlamaLogic.Packages.DataBasePackedFile.SetAsync(LlamaLogic.Packages.ResourceKey,System.Xml.Linq.XDocument,LlamaLogic.Packages.CompressionMode,System.Threading.CancellationToken)
  commentId: M:LlamaLogic.Packages.DataBasePackedFile.SetAsync(LlamaLogic.Packages.ResourceKey,System.Xml.Linq.XDocument,LlamaLogic.Packages.CompressionMode,System.Threading.CancellationToken)
  id: SetAsync(LlamaLogic.Packages.ResourceKey,System.Xml.Linq.XDocument,LlamaLogic.Packages.CompressionMode,System.Threading.CancellationToken)
  parent: LlamaLogic.Packages.DataBasePackedFile
  langs:
  - csharp
  - vb
  name: SetAsync(ResourceKey, XDocument, CompressionMode, CancellationToken)
  nameWithType: DataBasePackedFile.SetAsync(ResourceKey, XDocument, CompressionMode, CancellationToken)
  fullName: LlamaLogic.Packages.DataBasePackedFile.SetAsync(LlamaLogic.Packages.ResourceKey, System.Xml.Linq.XDocument, LlamaLogic.Packages.CompressionMode, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: LlamaLogic.Packages/DataBasePackedFile.cs
      branch: main
      repo: https://github.com/Llama-Logic/LlamaLogic.git
    id: SetAsync
    path: ../LlamaLogic.Packages/DataBasePackedFile.cs
    startLine: 2000
  assemblies:
  - LlamaLogic.Packages
  namespace: LlamaLogic.Packages
  summary: Sets the <code class="paramref">content</code> of a resource with the specified <code class="paramref">key</code>, returning <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if the resource was compressed; otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>
  example: []
  syntax:
    content: public Task<bool> SetAsync(ResourceKey key, XDocument content, CompressionMode compressionMode = CompressionMode.Auto, CancellationToken cancellationToken = default)
    parameters:
    - id: key
      type: LlamaLogic.Packages.ResourceKey
      description: The key of the resource
    - id: content
      type: System.Xml.Linq.XDocument
      description: The content of the resource
    - id: compressionMode
      type: LlamaLogic.Packages.CompressionMode
      description: The compression mode to use for the resource
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to monitor for cancellation requests
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: Public Function SetAsync(key As ResourceKey, content As XDocument, compressionMode As CompressionMode = CompressionMode.Auto, cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)
  overload: LlamaLogic.Packages.DataBasePackedFile.SetAsync*
- uid: LlamaLogic.Packages.DataBasePackedFile.SetXml(LlamaLogic.Packages.ResourceKey,System.String,LlamaLogic.Packages.CompressionMode)
  commentId: M:LlamaLogic.Packages.DataBasePackedFile.SetXml(LlamaLogic.Packages.ResourceKey,System.String,LlamaLogic.Packages.CompressionMode)
  id: SetXml(LlamaLogic.Packages.ResourceKey,System.String,LlamaLogic.Packages.CompressionMode)
  parent: LlamaLogic.Packages.DataBasePackedFile
  langs:
  - csharp
  - vb
  name: SetXml(ResourceKey, string, CompressionMode)
  nameWithType: DataBasePackedFile.SetXml(ResourceKey, string, CompressionMode)
  fullName: LlamaLogic.Packages.DataBasePackedFile.SetXml(LlamaLogic.Packages.ResourceKey, string, LlamaLogic.Packages.CompressionMode)
  type: Method
  source:
    remote:
      path: LlamaLogic.Packages/DataBasePackedFile.cs
      branch: main
      repo: https://github.com/Llama-Logic/LlamaLogic.git
    id: SetXml
    path: ../LlamaLogic.Packages/DataBasePackedFile.cs
    startLine: 2018
  assemblies:
  - LlamaLogic.Packages
  namespace: LlamaLogic.Packages
  summary: Sets the <code class="paramref">xmlContent</code> of a resource with the specified <code class="paramref">key</code>, returning <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if the resource was compressed; otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>
  example: []
  syntax:
    content: public bool SetXml(ResourceKey key, string xmlContent, CompressionMode compressionMode = CompressionMode.Auto)
    parameters:
    - id: key
      type: LlamaLogic.Packages.ResourceKey
      description: The key of the resource
    - id: xmlContent
      type: System.String
      description: The XML content of the resource
    - id: compressionMode
      type: LlamaLogic.Packages.CompressionMode
      description: The compression mode to use for the resource
    return:
      type: System.Boolean
    content.vb: Public Function SetXml(key As ResourceKey, xmlContent As String, compressionMode As CompressionMode = CompressionMode.Auto) As Boolean
  overload: LlamaLogic.Packages.DataBasePackedFile.SetXml*
  nameWithType.vb: DataBasePackedFile.SetXml(ResourceKey, String, CompressionMode)
  fullName.vb: LlamaLogic.Packages.DataBasePackedFile.SetXml(LlamaLogic.Packages.ResourceKey, String, LlamaLogic.Packages.CompressionMode)
  name.vb: SetXml(ResourceKey, String, CompressionMode)
- uid: LlamaLogic.Packages.DataBasePackedFile.SetXmlAsync(LlamaLogic.Packages.ResourceKey,System.String,LlamaLogic.Packages.CompressionMode,System.Threading.CancellationToken)
  commentId: M:LlamaLogic.Packages.DataBasePackedFile.SetXmlAsync(LlamaLogic.Packages.ResourceKey,System.String,LlamaLogic.Packages.CompressionMode,System.Threading.CancellationToken)
  id: SetXmlAsync(LlamaLogic.Packages.ResourceKey,System.String,LlamaLogic.Packages.CompressionMode,System.Threading.CancellationToken)
  parent: LlamaLogic.Packages.DataBasePackedFile
  langs:
  - csharp
  - vb
  name: SetXmlAsync(ResourceKey, string, CompressionMode, CancellationToken)
  nameWithType: DataBasePackedFile.SetXmlAsync(ResourceKey, string, CompressionMode, CancellationToken)
  fullName: LlamaLogic.Packages.DataBasePackedFile.SetXmlAsync(LlamaLogic.Packages.ResourceKey, string, LlamaLogic.Packages.CompressionMode, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: LlamaLogic.Packages/DataBasePackedFile.cs
      branch: main
      repo: https://github.com/Llama-Logic/LlamaLogic.git
    id: SetXmlAsync
    path: ../LlamaLogic.Packages/DataBasePackedFile.cs
    startLine: 2028
  assemblies:
  - LlamaLogic.Packages
  namespace: LlamaLogic.Packages
  summary: Sets the <code class="paramref">xmlContent</code> of a resource with the specified <code class="paramref">key</code>, returning <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if the resource was compressed; otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>
  example: []
  syntax:
    content: public Task<bool> SetXmlAsync(ResourceKey key, string xmlContent, CompressionMode compressionMode = CompressionMode.Auto, CancellationToken cancellationToken = default)
    parameters:
    - id: key
      type: LlamaLogic.Packages.ResourceKey
      description: The key of the resource
    - id: xmlContent
      type: System.String
      description: The XML content of the resource
    - id: compressionMode
      type: LlamaLogic.Packages.CompressionMode
      description: The compression mode to use for the resource
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to monitor for cancellation requests
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: Public Function SetXmlAsync(key As ResourceKey, xmlContent As String, compressionMode As CompressionMode = CompressionMode.Auto, cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)
  overload: LlamaLogic.Packages.DataBasePackedFile.SetXmlAsync*
  nameWithType.vb: DataBasePackedFile.SetXmlAsync(ResourceKey, String, CompressionMode, CancellationToken)
  fullName.vb: LlamaLogic.Packages.DataBasePackedFile.SetXmlAsync(LlamaLogic.Packages.ResourceKey, String, LlamaLogic.Packages.CompressionMode, System.Threading.CancellationToken)
  name.vb: SetXmlAsync(ResourceKey, String, CompressionMode, CancellationToken)
references:
- uid: System.IO.Stream
  commentId: T:System.IO.Stream
  parent: System.IO
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.io.stream
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: LlamaLogic.Packages.DataBasePackedFile.Save(System.Boolean,LlamaLogic.Packages.ResourceKeyOrder)
  commentId: M:LlamaLogic.Packages.DataBasePackedFile.Save(System.Boolean,LlamaLogic.Packages.ResourceKeyOrder)
  isExternal: true
  href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_Save_System_Boolean_LlamaLogic_Packages_ResourceKeyOrder_
  name: Save(bool, ResourceKeyOrder)
  nameWithType: DataBasePackedFile.Save(bool, ResourceKeyOrder)
  fullName: LlamaLogic.Packages.DataBasePackedFile.Save(bool, LlamaLogic.Packages.ResourceKeyOrder)
  nameWithType.vb: DataBasePackedFile.Save(Boolean, ResourceKeyOrder)
  fullName.vb: LlamaLogic.Packages.DataBasePackedFile.Save(Boolean, LlamaLogic.Packages.ResourceKeyOrder)
  name.vb: Save(Boolean, ResourceKeyOrder)
  spec.csharp:
  - uid: LlamaLogic.Packages.DataBasePackedFile.Save(System.Boolean,LlamaLogic.Packages.ResourceKeyOrder)
    name: Save
    href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_Save_System_Boolean_LlamaLogic_Packages_ResourceKeyOrder_
  - name: (
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: LlamaLogic.Packages.ResourceKeyOrder
    name: ResourceKeyOrder
    href: LlamaLogic.Packages.ResourceKeyOrder.html
  - name: )
  spec.vb:
  - uid: LlamaLogic.Packages.DataBasePackedFile.Save(System.Boolean,LlamaLogic.Packages.ResourceKeyOrder)
    name: Save
    href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_Save_System_Boolean_LlamaLogic_Packages_ResourceKeyOrder_
  - name: (
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: LlamaLogic.Packages.ResourceKeyOrder
    name: ResourceKeyOrder
    href: LlamaLogic.Packages.ResourceKeyOrder.html
  - name: )
- uid: LlamaLogic.Packages.DataBasePackedFile.SaveAsync(System.Boolean,LlamaLogic.Packages.ResourceKeyOrder,System.Threading.CancellationToken)
  commentId: M:LlamaLogic.Packages.DataBasePackedFile.SaveAsync(System.Boolean,LlamaLogic.Packages.ResourceKeyOrder,System.Threading.CancellationToken)
  isExternal: true
  href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_SaveAsync_System_Boolean_LlamaLogic_Packages_ResourceKeyOrder_System_Threading_CancellationToken_
  name: SaveAsync(bool, ResourceKeyOrder, CancellationToken)
  nameWithType: DataBasePackedFile.SaveAsync(bool, ResourceKeyOrder, CancellationToken)
  fullName: LlamaLogic.Packages.DataBasePackedFile.SaveAsync(bool, LlamaLogic.Packages.ResourceKeyOrder, System.Threading.CancellationToken)
  nameWithType.vb: DataBasePackedFile.SaveAsync(Boolean, ResourceKeyOrder, CancellationToken)
  fullName.vb: LlamaLogic.Packages.DataBasePackedFile.SaveAsync(Boolean, LlamaLogic.Packages.ResourceKeyOrder, System.Threading.CancellationToken)
  name.vb: SaveAsync(Boolean, ResourceKeyOrder, CancellationToken)
  spec.csharp:
  - uid: LlamaLogic.Packages.DataBasePackedFile.SaveAsync(System.Boolean,LlamaLogic.Packages.ResourceKeyOrder,System.Threading.CancellationToken)
    name: SaveAsync
    href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_SaveAsync_System_Boolean_LlamaLogic_Packages_ResourceKeyOrder_System_Threading_CancellationToken_
  - name: (
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: LlamaLogic.Packages.ResourceKeyOrder
    name: ResourceKeyOrder
    href: LlamaLogic.Packages.ResourceKeyOrder.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: LlamaLogic.Packages.DataBasePackedFile.SaveAsync(System.Boolean,LlamaLogic.Packages.ResourceKeyOrder,System.Threading.CancellationToken)
    name: SaveAsync
    href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_SaveAsync_System_Boolean_LlamaLogic_Packages_ResourceKeyOrder_System_Threading_CancellationToken_
  - name: (
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: LlamaLogic.Packages.ResourceKeyOrder
    name: ResourceKeyOrder
    href: LlamaLogic.Packages.ResourceKeyOrder.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: LlamaLogic.Packages.DataBasePackedFile.CanSaveInPlace
  commentId: P:LlamaLogic.Packages.DataBasePackedFile.CanSaveInPlace
  href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_CanSaveInPlace
  name: CanSaveInPlace
  nameWithType: DataBasePackedFile.CanSaveInPlace
  fullName: LlamaLogic.Packages.DataBasePackedFile.CanSaveInPlace
- uid: LlamaLogic.Packages.DataBasePackedFile.CopyTo(System.IO.Stream,LlamaLogic.Packages.ResourceKeyOrder)
  commentId: M:LlamaLogic.Packages.DataBasePackedFile.CopyTo(System.IO.Stream,LlamaLogic.Packages.ResourceKeyOrder)
  isExternal: true
  href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_CopyTo_System_IO_Stream_LlamaLogic_Packages_ResourceKeyOrder_
  name: CopyTo(Stream, ResourceKeyOrder)
  nameWithType: DataBasePackedFile.CopyTo(Stream, ResourceKeyOrder)
  fullName: LlamaLogic.Packages.DataBasePackedFile.CopyTo(System.IO.Stream, LlamaLogic.Packages.ResourceKeyOrder)
  spec.csharp:
  - uid: LlamaLogic.Packages.DataBasePackedFile.CopyTo(System.IO.Stream,LlamaLogic.Packages.ResourceKeyOrder)
    name: CopyTo
    href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_CopyTo_System_IO_Stream_LlamaLogic_Packages_ResourceKeyOrder_
  - name: (
  - uid: System.IO.Stream
    name: Stream
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.io.stream
  - name: ','
  - name: " "
  - uid: LlamaLogic.Packages.ResourceKeyOrder
    name: ResourceKeyOrder
    href: LlamaLogic.Packages.ResourceKeyOrder.html
  - name: )
  spec.vb:
  - uid: LlamaLogic.Packages.DataBasePackedFile.CopyTo(System.IO.Stream,LlamaLogic.Packages.ResourceKeyOrder)
    name: CopyTo
    href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_CopyTo_System_IO_Stream_LlamaLogic_Packages_ResourceKeyOrder_
  - name: (
  - uid: System.IO.Stream
    name: Stream
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.io.stream
  - name: ','
  - name: " "
  - uid: LlamaLogic.Packages.ResourceKeyOrder
    name: ResourceKeyOrder
    href: LlamaLogic.Packages.ResourceKeyOrder.html
  - name: )
- uid: LlamaLogic.Packages.DataBasePackedFile.CopyToAsync(System.IO.Stream,LlamaLogic.Packages.ResourceKeyOrder,System.Threading.CancellationToken)
  commentId: M:LlamaLogic.Packages.DataBasePackedFile.CopyToAsync(System.IO.Stream,LlamaLogic.Packages.ResourceKeyOrder,System.Threading.CancellationToken)
  isExternal: true
  href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_CopyToAsync_System_IO_Stream_LlamaLogic_Packages_ResourceKeyOrder_System_Threading_CancellationToken_
  name: CopyToAsync(Stream, ResourceKeyOrder, CancellationToken)
  nameWithType: DataBasePackedFile.CopyToAsync(Stream, ResourceKeyOrder, CancellationToken)
  fullName: LlamaLogic.Packages.DataBasePackedFile.CopyToAsync(System.IO.Stream, LlamaLogic.Packages.ResourceKeyOrder, System.Threading.CancellationToken)
  spec.csharp:
  - uid: LlamaLogic.Packages.DataBasePackedFile.CopyToAsync(System.IO.Stream,LlamaLogic.Packages.ResourceKeyOrder,System.Threading.CancellationToken)
    name: CopyToAsync
    href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_CopyToAsync_System_IO_Stream_LlamaLogic_Packages_ResourceKeyOrder_System_Threading_CancellationToken_
  - name: (
  - uid: System.IO.Stream
    name: Stream
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.io.stream
  - name: ','
  - name: " "
  - uid: LlamaLogic.Packages.ResourceKeyOrder
    name: ResourceKeyOrder
    href: LlamaLogic.Packages.ResourceKeyOrder.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: LlamaLogic.Packages.DataBasePackedFile.CopyToAsync(System.IO.Stream,LlamaLogic.Packages.ResourceKeyOrder,System.Threading.CancellationToken)
    name: CopyToAsync
    href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_CopyToAsync_System_IO_Stream_LlamaLogic_Packages_ResourceKeyOrder_System_Threading_CancellationToken_
  - name: (
  - uid: System.IO.Stream
    name: Stream
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.io.stream
  - name: ','
  - name: " "
  - uid: LlamaLogic.Packages.ResourceKeyOrder
    name: ResourceKeyOrder
    href: LlamaLogic.Packages.ResourceKeyOrder.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: LlamaLogic.Packages.DataBasePackedFile.GetNames
  commentId: M:LlamaLogic.Packages.DataBasePackedFile.GetNames
  href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_GetNames
  name: GetNames()
  nameWithType: DataBasePackedFile.GetNames()
  fullName: LlamaLogic.Packages.DataBasePackedFile.GetNames()
  spec.csharp:
  - uid: LlamaLogic.Packages.DataBasePackedFile.GetNames
    name: GetNames
    href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_GetNames
  - name: (
  - name: )
  spec.vb:
  - uid: LlamaLogic.Packages.DataBasePackedFile.GetNames
    name: GetNames
    href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_GetNames
  - name: (
  - name: )
- uid: LlamaLogic.Packages.DataBasePackedFile.GetNamesAsync(System.Threading.CancellationToken)
  commentId: M:LlamaLogic.Packages.DataBasePackedFile.GetNamesAsync(System.Threading.CancellationToken)
  isExternal: true
  href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_GetNamesAsync_System_Threading_CancellationToken_
  name: GetNamesAsync(CancellationToken)
  nameWithType: DataBasePackedFile.GetNamesAsync(CancellationToken)
  fullName: LlamaLogic.Packages.DataBasePackedFile.GetNamesAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: LlamaLogic.Packages.DataBasePackedFile.GetNamesAsync(System.Threading.CancellationToken)
    name: GetNamesAsync
    href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_GetNamesAsync_System_Threading_CancellationToken_
  - name: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: LlamaLogic.Packages.DataBasePackedFile.GetNamesAsync(System.Threading.CancellationToken)
    name: GetNamesAsync
    href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_GetNamesAsync_System_Threading_CancellationToken_
  - name: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: LlamaLogic.Packages.CompressionMode
  commentId: T:LlamaLogic.Packages.CompressionMode
  parent: LlamaLogic.Packages
  href: LlamaLogic.Packages.CompressionMode.html
  name: CompressionMode
  nameWithType: CompressionMode
  fullName: LlamaLogic.Packages.CompressionMode
- uid: System.IO.FileNotFoundException
  commentId: T:System.IO.FileNotFoundException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.io.filenotfoundexception
  name: FileNotFoundException
  nameWithType: FileNotFoundException
  fullName: System.IO.FileNotFoundException
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: LlamaLogic.Packages
  commentId: N:LlamaLogic.Packages
  href: LlamaLogic.html
  name: LlamaLogic.Packages
  nameWithType: LlamaLogic.Packages
  fullName: LlamaLogic.Packages
  spec.csharp:
  - uid: LlamaLogic
    name: LlamaLogic
    href: LlamaLogic.html
  - name: .
  - uid: LlamaLogic.Packages
    name: Packages
    href: LlamaLogic.Packages.html
  spec.vb:
  - uid: LlamaLogic
    name: LlamaLogic
    href: LlamaLogic.html
  - name: .
  - uid: LlamaLogic.Packages
    name: Packages
    href: LlamaLogic.Packages.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.IAsyncDisposable
  commentId: T:System.IAsyncDisposable
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iasyncdisposable
  name: IAsyncDisposable
  nameWithType: IAsyncDisposable
  fullName: System.IAsyncDisposable
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.idisposable
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.IO
  commentId: N:System.IO
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.IO
    name: IO
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.io
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.IO
    name: IO
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.io
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: LlamaLogic.Packages.DataBasePackedFile
  commentId: T:LlamaLogic.Packages.DataBasePackedFile
  parent: LlamaLogic.Packages
  href: LlamaLogic.Packages.DataBasePackedFile.html
  name: DataBasePackedFile
  nameWithType: DataBasePackedFile
  fullName: LlamaLogic.Packages.DataBasePackedFile
- uid: LlamaLogic.Packages.DataBasePackedFile.FromPathAsync*
  commentId: Overload:LlamaLogic.Packages.DataBasePackedFile.FromPathAsync
  href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_FromPathAsync_System_String_System_Boolean_
  name: FromPathAsync
  nameWithType: DataBasePackedFile.FromPathAsync
  fullName: LlamaLogic.Packages.DataBasePackedFile.FromPathAsync
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.Threading.Tasks.Task{LlamaLogic.Packages.DataBasePackedFile}
  commentId: T:System.Threading.Tasks.Task{LlamaLogic.Packages.DataBasePackedFile}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<DataBasePackedFile>
  nameWithType: Task<DataBasePackedFile>
  fullName: System.Threading.Tasks.Task<LlamaLogic.Packages.DataBasePackedFile>
  nameWithType.vb: Task(Of DataBasePackedFile)
  fullName.vb: System.Threading.Tasks.Task(Of LlamaLogic.Packages.DataBasePackedFile)
  name.vb: Task(Of DataBasePackedFile)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: LlamaLogic.Packages.DataBasePackedFile
    name: DataBasePackedFile
    href: LlamaLogic.Packages.DataBasePackedFile.html
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: LlamaLogic.Packages.DataBasePackedFile
    name: DataBasePackedFile
    href: LlamaLogic.Packages.DataBasePackedFile.html
  - name: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: LlamaLogic.Packages.DataBasePackedFile.FromStreamAsync*
  commentId: Overload:LlamaLogic.Packages.DataBasePackedFile.FromStreamAsync
  href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_FromStreamAsync_System_IO_Stream_System_Threading_CancellationToken_
  name: FromStreamAsync
  nameWithType: DataBasePackedFile.FromStreamAsync
  fullName: LlamaLogic.Packages.DataBasePackedFile.FromStreamAsync
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
- uid: LlamaLogic.Packages.DataBasePackedFile.ZLibCompress*
  commentId: Overload:LlamaLogic.Packages.DataBasePackedFile.ZLibCompress
  href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_ZLibCompress_System_ReadOnlyMemory_System_Byte__
  name: ZLibCompress
  nameWithType: DataBasePackedFile.ZLibCompress
  fullName: LlamaLogic.Packages.DataBasePackedFile.ZLibCompress
- uid: System.ReadOnlyMemory{System.Byte}
  commentId: T:System.ReadOnlyMemory{System.Byte}
  parent: System
  definition: System.ReadOnlyMemory`1
  href: https://learn.microsoft.com/dotnet/api/system.readonlymemory-1
  name: ReadOnlyMemory<byte>
  nameWithType: ReadOnlyMemory<byte>
  fullName: System.ReadOnlyMemory<byte>
  nameWithType.vb: ReadOnlyMemory(Of Byte)
  fullName.vb: System.ReadOnlyMemory(Of Byte)
  name.vb: ReadOnlyMemory(Of Byte)
  spec.csharp:
  - uid: System.ReadOnlyMemory`1
    name: ReadOnlyMemory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlymemory-1
  - name: <
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '>'
  spec.vb:
  - uid: System.ReadOnlyMemory`1
    name: ReadOnlyMemory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlymemory-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: )
- uid: System.ReadOnlyMemory`1
  commentId: T:System.ReadOnlyMemory`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.readonlymemory-1
  name: ReadOnlyMemory<T>
  nameWithType: ReadOnlyMemory<T>
  fullName: System.ReadOnlyMemory<T>
  nameWithType.vb: ReadOnlyMemory(Of T)
  fullName.vb: System.ReadOnlyMemory(Of T)
  name.vb: ReadOnlyMemory(Of T)
  spec.csharp:
  - uid: System.ReadOnlyMemory`1
    name: ReadOnlyMemory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlymemory-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.ReadOnlyMemory`1
    name: ReadOnlyMemory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlymemory-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: LlamaLogic.Packages.DataBasePackedFile.ZLibCompressAsync*
  commentId: Overload:LlamaLogic.Packages.DataBasePackedFile.ZLibCompressAsync
  href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_ZLibCompressAsync_System_ReadOnlyMemory_System_Byte__System_Threading_CancellationToken_
  name: ZLibCompressAsync
  nameWithType: DataBasePackedFile.ZLibCompressAsync
  fullName: LlamaLogic.Packages.DataBasePackedFile.ZLibCompressAsync
- uid: System.Threading.Tasks.Task{System.ReadOnlyMemory{System.Byte}}
  commentId: T:System.Threading.Tasks.Task{System.ReadOnlyMemory{System.Byte}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<ReadOnlyMemory<byte>>
  nameWithType: Task<ReadOnlyMemory<byte>>
  fullName: System.Threading.Tasks.Task<System.ReadOnlyMemory<byte>>
  nameWithType.vb: Task(Of ReadOnlyMemory(Of Byte))
  fullName.vb: System.Threading.Tasks.Task(Of System.ReadOnlyMemory(Of Byte))
  name.vb: Task(Of ReadOnlyMemory(Of Byte))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.ReadOnlyMemory`1
    name: ReadOnlyMemory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlymemory-1
  - name: <
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.ReadOnlyMemory`1
    name: ReadOnlyMemory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlymemory-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: )
  - name: )
- uid: LlamaLogic.Packages.DataBasePackedFile.#ctor*
  commentId: Overload:LlamaLogic.Packages.DataBasePackedFile.#ctor
  href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile__ctor
  name: DataBasePackedFile
  nameWithType: DataBasePackedFile.DataBasePackedFile
  fullName: LlamaLogic.Packages.DataBasePackedFile.DataBasePackedFile
  nameWithType.vb: DataBasePackedFile.New
  fullName.vb: LlamaLogic.Packages.DataBasePackedFile.New
  name.vb: New
- uid: LlamaLogic.Packages.DataBasePackedFile.Finalize*
  commentId: Overload:LlamaLogic.Packages.DataBasePackedFile.Finalize
  href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_Finalize
  name: ~DataBasePackedFile
  nameWithType: DataBasePackedFile.~DataBasePackedFile
  fullName: LlamaLogic.Packages.DataBasePackedFile.~DataBasePackedFile
  spec.csharp:
  - name: "~"
  - uid: LlamaLogic.Packages.DataBasePackedFile.Finalize*
    name: DataBasePackedFile
    href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_Finalize
- uid: LlamaLogic.Packages.DataBasePackedFile.CanSaveInPlace*
  commentId: Overload:LlamaLogic.Packages.DataBasePackedFile.CanSaveInPlace
  href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_CanSaveInPlace
  name: CanSaveInPlace
  nameWithType: DataBasePackedFile.CanSaveInPlace
  fullName: LlamaLogic.Packages.DataBasePackedFile.CanSaveInPlace
- uid: LlamaLogic.Packages.DataBasePackedFile.Count*
  commentId: Overload:LlamaLogic.Packages.DataBasePackedFile.Count
  href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_Count
  name: Count
  nameWithType: DataBasePackedFile.Count
  fullName: LlamaLogic.Packages.DataBasePackedFile.Count
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: LlamaLogic.Packages.DataBasePackedFile.CreationTime*
  commentId: Overload:LlamaLogic.Packages.DataBasePackedFile.CreationTime
  href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_CreationTime
  name: CreationTime
  nameWithType: DataBasePackedFile.CreationTime
  fullName: LlamaLogic.Packages.DataBasePackedFile.CreationTime
- uid: System.DateTimeOffset
  commentId: T:System.DateTimeOffset
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.datetimeoffset
  name: DateTimeOffset
  nameWithType: DateTimeOffset
  fullName: System.DateTimeOffset
- uid: LlamaLogic.Packages.DataBasePackedFile.FileVersion*
  commentId: Overload:LlamaLogic.Packages.DataBasePackedFile.FileVersion
  href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_FileVersion
  name: FileVersion
  nameWithType: DataBasePackedFile.FileVersion
  fullName: LlamaLogic.Packages.DataBasePackedFile.FileVersion
- uid: System.Version
  commentId: T:System.Version
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.version
  name: Version
  nameWithType: Version
  fullName: System.Version
- uid: LlamaLogic.Packages.DataBasePackedFile.Keys*
  commentId: Overload:LlamaLogic.Packages.DataBasePackedFile.Keys
  href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_Keys
  name: Keys
  nameWithType: DataBasePackedFile.Keys
  fullName: LlamaLogic.Packages.DataBasePackedFile.Keys
- uid: System.Collections.Generic.IReadOnlyList{LlamaLogic.Packages.ResourceKey}
  commentId: T:System.Collections.Generic.IReadOnlyList{LlamaLogic.Packages.ResourceKey}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  name: IReadOnlyList<ResourceKey>
  nameWithType: IReadOnlyList<ResourceKey>
  fullName: System.Collections.Generic.IReadOnlyList<LlamaLogic.Packages.ResourceKey>
  nameWithType.vb: IReadOnlyList(Of ResourceKey)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of LlamaLogic.Packages.ResourceKey)
  name.vb: IReadOnlyList(Of ResourceKey)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: <
  - uid: LlamaLogic.Packages.ResourceKey
    name: ResourceKey
    href: LlamaLogic.Packages.ResourceKey.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: (
  - name: Of
  - name: " "
  - uid: LlamaLogic.Packages.ResourceKey
    name: ResourceKey
    href: LlamaLogic.Packages.ResourceKey.html
  - name: )
- uid: System.Collections.Generic.IReadOnlyList`1
  commentId: T:System.Collections.Generic.IReadOnlyList`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  name: IReadOnlyList<T>
  nameWithType: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  nameWithType.vb: IReadOnlyList(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: LlamaLogic.Packages.DataBasePackedFile.UserVersion*
  commentId: Overload:LlamaLogic.Packages.DataBasePackedFile.UserVersion
  href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_UserVersion
  name: UserVersion
  nameWithType: DataBasePackedFile.UserVersion
  fullName: LlamaLogic.Packages.DataBasePackedFile.UserVersion
- uid: LlamaLogic.Packages.DataBasePackedFile.UpdatedTime*
  commentId: Overload:LlamaLogic.Packages.DataBasePackedFile.UpdatedTime
  href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_UpdatedTime
  name: UpdatedTime
  nameWithType: DataBasePackedFile.UpdatedTime
  fullName: LlamaLogic.Packages.DataBasePackedFile.UpdatedTime
- uid: LlamaLogic.Packages.DataBasePackedFile.Item*
  commentId: Overload:LlamaLogic.Packages.DataBasePackedFile.Item
  href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_Item_LlamaLogic_Packages_ResourceKey_
  name: this
  nameWithType: DataBasePackedFile.this
  fullName: LlamaLogic.Packages.DataBasePackedFile.this
  nameWithType.vb: DataBasePackedFile.this[]
  fullName.vb: LlamaLogic.Packages.DataBasePackedFile.this[]
  name.vb: this[]
- uid: LlamaLogic.Packages.ResourceKey
  commentId: T:LlamaLogic.Packages.ResourceKey
  parent: LlamaLogic.Packages
  href: LlamaLogic.Packages.ResourceKey.html
  name: ResourceKey
  nameWithType: ResourceKey
  fullName: LlamaLogic.Packages.ResourceKey
- uid: LlamaLogic.Packages.DataBasePackedFile.ContainsKey*
  commentId: Overload:LlamaLogic.Packages.DataBasePackedFile.ContainsKey
  href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_ContainsKey_LlamaLogic_Packages_ResourceKey_
  name: ContainsKey
  nameWithType: DataBasePackedFile.ContainsKey
  fullName: LlamaLogic.Packages.DataBasePackedFile.ContainsKey
- uid: LlamaLogic.Packages.DataBasePackedFile.ContainsKeyAsync*
  commentId: Overload:LlamaLogic.Packages.DataBasePackedFile.ContainsKeyAsync
  href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_ContainsKeyAsync_LlamaLogic_Packages_ResourceKey_System_Threading_CancellationToken_
  name: ContainsKeyAsync
  nameWithType: DataBasePackedFile.ContainsKeyAsync
  fullName: LlamaLogic.Packages.DataBasePackedFile.ContainsKeyAsync
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<bool>
  nameWithType: Task<bool>
  fullName: System.Threading.Tasks.Task<bool>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentnullexception
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentexception
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: LlamaLogic.Packages.DataBasePackedFile.CopyTo*
  commentId: Overload:LlamaLogic.Packages.DataBasePackedFile.CopyTo
  href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_CopyTo_System_IO_Stream_LlamaLogic_Packages_ResourceKeyOrder_
  name: CopyTo
  nameWithType: DataBasePackedFile.CopyTo
  fullName: LlamaLogic.Packages.DataBasePackedFile.CopyTo
- uid: LlamaLogic.Packages.ResourceKeyOrder
  commentId: T:LlamaLogic.Packages.ResourceKeyOrder
  parent: LlamaLogic.Packages
  href: LlamaLogic.Packages.ResourceKeyOrder.html
  name: ResourceKeyOrder
  nameWithType: ResourceKeyOrder
  fullName: LlamaLogic.Packages.ResourceKeyOrder
- uid: LlamaLogic.Packages.DataBasePackedFile.CopyToAsync*
  commentId: Overload:LlamaLogic.Packages.DataBasePackedFile.CopyToAsync
  href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_CopyToAsync_System_IO_Stream_LlamaLogic_Packages_ResourceKeyOrder_System_Threading_CancellationToken_
  name: CopyToAsync
  nameWithType: DataBasePackedFile.CopyToAsync
  fullName: LlamaLogic.Packages.DataBasePackedFile.CopyToAsync
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: LlamaLogic.Packages.DataBasePackedFile.Delete*
  commentId: Overload:LlamaLogic.Packages.DataBasePackedFile.Delete
  href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_Delete_LlamaLogic_Packages_ResourceKey_
  name: Delete
  nameWithType: DataBasePackedFile.Delete
  fullName: LlamaLogic.Packages.DataBasePackedFile.Delete
- uid: LlamaLogic.Packages.DataBasePackedFile.Dispose*
  commentId: Overload:LlamaLogic.Packages.DataBasePackedFile.Dispose
  href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_Dispose
  name: Dispose
  nameWithType: DataBasePackedFile.Dispose
  fullName: LlamaLogic.Packages.DataBasePackedFile.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.idisposable.dispose
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.idisposable.dispose
  - name: (
  - name: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.idisposable.dispose
  - name: (
  - name: )
- uid: LlamaLogic.Packages.DataBasePackedFile.DisposeAsync*
  commentId: Overload:LlamaLogic.Packages.DataBasePackedFile.DisposeAsync
  href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_DisposeAsync
  name: DisposeAsync
  nameWithType: DataBasePackedFile.DisposeAsync
  fullName: LlamaLogic.Packages.DataBasePackedFile.DisposeAsync
- uid: System.IAsyncDisposable.DisposeAsync
  commentId: M:System.IAsyncDisposable.DisposeAsync
  parent: System.IAsyncDisposable
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iasyncdisposable.disposeasync
  name: DisposeAsync()
  nameWithType: IAsyncDisposable.DisposeAsync()
  fullName: System.IAsyncDisposable.DisposeAsync()
  spec.csharp:
  - uid: System.IAsyncDisposable.DisposeAsync
    name: DisposeAsync
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iasyncdisposable.disposeasync
  - name: (
  - name: )
  spec.vb:
  - uid: System.IAsyncDisposable.DisposeAsync
    name: DisposeAsync
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iasyncdisposable.disposeasync
  - name: (
  - name: )
- uid: System.Threading.Tasks.ValueTask
  commentId: T:System.Threading.Tasks.ValueTask
  parent: System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.valuetask
  name: ValueTask
  nameWithType: ValueTask
  fullName: System.Threading.Tasks.ValueTask
- uid: LlamaLogic.Packages.DataBasePackedFile.ForEach*
  commentId: Overload:LlamaLogic.Packages.DataBasePackedFile.ForEach
  href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_ForEach_LlamaLogic_Packages_ResourceKeyOrder_System_Predicate_LlamaLogic_Packages_ResourceKey__System_Action_LlamaLogic_Packages_ResourceKey_System_ReadOnlyMemory_System_Byte___System_Threading_CancellationToken_
  name: ForEach
  nameWithType: DataBasePackedFile.ForEach
  fullName: LlamaLogic.Packages.DataBasePackedFile.ForEach
- uid: System.Predicate{LlamaLogic.Packages.ResourceKey}
  commentId: T:System.Predicate{LlamaLogic.Packages.ResourceKey}
  parent: System
  definition: System.Predicate`1
  href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  name: Predicate<ResourceKey>
  nameWithType: Predicate<ResourceKey>
  fullName: System.Predicate<LlamaLogic.Packages.ResourceKey>
  nameWithType.vb: Predicate(Of ResourceKey)
  fullName.vb: System.Predicate(Of LlamaLogic.Packages.ResourceKey)
  name.vb: Predicate(Of ResourceKey)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: <
  - uid: LlamaLogic.Packages.ResourceKey
    name: ResourceKey
    href: LlamaLogic.Packages.ResourceKey.html
  - name: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: (
  - name: Of
  - name: " "
  - uid: LlamaLogic.Packages.ResourceKey
    name: ResourceKey
    href: LlamaLogic.Packages.ResourceKey.html
  - name: )
- uid: System.Action{LlamaLogic.Packages.ResourceKey,System.ReadOnlyMemory{System.Byte}}
  commentId: T:System.Action{LlamaLogic.Packages.ResourceKey,System.ReadOnlyMemory{System.Byte}}
  parent: System
  definition: System.Action`2
  href: https://learn.microsoft.com/dotnet/api/system.action-2
  name: Action<ResourceKey, ReadOnlyMemory<byte>>
  nameWithType: Action<ResourceKey, ReadOnlyMemory<byte>>
  fullName: System.Action<LlamaLogic.Packages.ResourceKey, System.ReadOnlyMemory<byte>>
  nameWithType.vb: Action(Of ResourceKey, ReadOnlyMemory(Of Byte))
  fullName.vb: System.Action(Of LlamaLogic.Packages.ResourceKey, System.ReadOnlyMemory(Of Byte))
  name.vb: Action(Of ResourceKey, ReadOnlyMemory(Of Byte))
  spec.csharp:
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: <
  - uid: LlamaLogic.Packages.ResourceKey
    name: ResourceKey
    href: LlamaLogic.Packages.ResourceKey.html
  - name: ','
  - name: " "
  - uid: System.ReadOnlyMemory`1
    name: ReadOnlyMemory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlymemory-1
  - name: <
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: (
  - name: Of
  - name: " "
  - uid: LlamaLogic.Packages.ResourceKey
    name: ResourceKey
    href: LlamaLogic.Packages.ResourceKey.html
  - name: ','
  - name: " "
  - uid: System.ReadOnlyMemory`1
    name: ReadOnlyMemory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlymemory-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: )
  - name: )
- uid: System.Predicate`1
  commentId: T:System.Predicate`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: System.Predicate<T>
  nameWithType.vb: Predicate(Of T)
  fullName.vb: System.Predicate(Of T)
  name.vb: Predicate(Of T)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Action`2
  commentId: T:System.Action`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.action-2
  name: Action<T1, T2>
  nameWithType: Action<T1, T2>
  fullName: System.Action<T1, T2>
  nameWithType.vb: Action(Of T1, T2)
  fullName.vb: System.Action(Of T1, T2)
  name.vb: Action(Of T1, T2)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: )
- uid: LlamaLogic.Packages.DataBasePackedFile.ForEachAsync*
  commentId: Overload:LlamaLogic.Packages.DataBasePackedFile.ForEachAsync
  href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_ForEachAsync_LlamaLogic_Packages_ResourceKeyOrder_System_Predicate_LlamaLogic_Packages_ResourceKey__System_Func_LlamaLogic_Packages_ResourceKey_System_ReadOnlyMemory_System_Byte__System_Threading_Tasks_Task__System_Threading_CancellationToken_
  name: ForEachAsync
  nameWithType: DataBasePackedFile.ForEachAsync
  fullName: LlamaLogic.Packages.DataBasePackedFile.ForEachAsync
- uid: System.Func{LlamaLogic.Packages.ResourceKey,System.ReadOnlyMemory{System.Byte},System.Threading.Tasks.Task}
  commentId: T:System.Func{LlamaLogic.Packages.ResourceKey,System.ReadOnlyMemory{System.Byte},System.Threading.Tasks.Task}
  parent: System
  definition: System.Func`3
  href: https://learn.microsoft.com/dotnet/api/system.func-3
  name: Func<ResourceKey, ReadOnlyMemory<byte>, Task>
  nameWithType: Func<ResourceKey, ReadOnlyMemory<byte>, Task>
  fullName: System.Func<LlamaLogic.Packages.ResourceKey, System.ReadOnlyMemory<byte>, System.Threading.Tasks.Task>
  nameWithType.vb: Func(Of ResourceKey, ReadOnlyMemory(Of Byte), Task)
  fullName.vb: System.Func(Of LlamaLogic.Packages.ResourceKey, System.ReadOnlyMemory(Of Byte), System.Threading.Tasks.Task)
  name.vb: Func(Of ResourceKey, ReadOnlyMemory(Of Byte), Task)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - uid: LlamaLogic.Packages.ResourceKey
    name: ResourceKey
    href: LlamaLogic.Packages.ResourceKey.html
  - name: ','
  - name: " "
  - uid: System.ReadOnlyMemory`1
    name: ReadOnlyMemory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlymemory-1
  - name: <
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - uid: LlamaLogic.Packages.ResourceKey
    name: ResourceKey
    href: LlamaLogic.Packages.ResourceKey.html
  - name: ','
  - name: " "
  - uid: System.ReadOnlyMemory`1
    name: ReadOnlyMemory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlymemory-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: )
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task
  - name: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-3
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: LlamaLogic.Packages.DataBasePackedFile.ForEachRaw*
  commentId: Overload:LlamaLogic.Packages.DataBasePackedFile.ForEachRaw
  href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_ForEachRaw_LlamaLogic_Packages_ResourceKeyOrder_System_Predicate_LlamaLogic_Packages_ResourceKey__System_Action_LlamaLogic_Packages_ResourceKey_System_ReadOnlyMemory_System_Byte___System_Threading_CancellationToken_
  name: ForEachRaw
  nameWithType: DataBasePackedFile.ForEachRaw
  fullName: LlamaLogic.Packages.DataBasePackedFile.ForEachRaw
- uid: LlamaLogic.Packages.DataBasePackedFile.ForEachRawAsync*
  commentId: Overload:LlamaLogic.Packages.DataBasePackedFile.ForEachRawAsync
  href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_ForEachRawAsync_LlamaLogic_Packages_ResourceKeyOrder_System_Predicate_LlamaLogic_Packages_ResourceKey__System_Func_LlamaLogic_Packages_ResourceKey_System_ReadOnlyMemory_System_Byte__System_Threading_Tasks_Task__System_Threading_CancellationToken_
  name: ForEachRawAsync
  nameWithType: DataBasePackedFile.ForEachRawAsync
  fullName: LlamaLogic.Packages.DataBasePackedFile.ForEachRawAsync
- uid: LlamaLogic.Packages.DataBasePackedFile.Get*
  commentId: Overload:LlamaLogic.Packages.DataBasePackedFile.Get
  href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_Get_LlamaLogic_Packages_ResourceKey_System_Boolean_
  name: Get
  nameWithType: DataBasePackedFile.Get
  fullName: LlamaLogic.Packages.DataBasePackedFile.Get
- uid: LlamaLogic.Packages.DataBasePackedFile.GetAllSizes*
  commentId: Overload:LlamaLogic.Packages.DataBasePackedFile.GetAllSizes
  href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_GetAllSizes_System_Predicate_LlamaLogic_Packages_ResourceKey__
  name: GetAllSizes
  nameWithType: DataBasePackedFile.GetAllSizes
  fullName: LlamaLogic.Packages.DataBasePackedFile.GetAllSizes
- uid: System.Collections.Generic.IReadOnlyDictionary{LlamaLogic.Packages.ResourceKey,System.Int32}
  commentId: T:System.Collections.Generic.IReadOnlyDictionary{LlamaLogic.Packages.ResourceKey,System.Int32}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyDictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlydictionary-2
  name: IReadOnlyDictionary<ResourceKey, int>
  nameWithType: IReadOnlyDictionary<ResourceKey, int>
  fullName: System.Collections.Generic.IReadOnlyDictionary<LlamaLogic.Packages.ResourceKey, int>
  nameWithType.vb: IReadOnlyDictionary(Of ResourceKey, Integer)
  fullName.vb: System.Collections.Generic.IReadOnlyDictionary(Of LlamaLogic.Packages.ResourceKey, Integer)
  name.vb: IReadOnlyDictionary(Of ResourceKey, Integer)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlydictionary-2
  - name: <
  - uid: LlamaLogic.Packages.ResourceKey
    name: ResourceKey
    href: LlamaLogic.Packages.ResourceKey.html
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlydictionary-2
  - name: (
  - name: Of
  - name: " "
  - uid: LlamaLogic.Packages.ResourceKey
    name: ResourceKey
    href: LlamaLogic.Packages.ResourceKey.html
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: System.Collections.Generic.IReadOnlyDictionary`2
  commentId: T:System.Collections.Generic.IReadOnlyDictionary`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlydictionary-2
  name: IReadOnlyDictionary<TKey, TValue>
  nameWithType: IReadOnlyDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>
  nameWithType.vb: IReadOnlyDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue)
  name.vb: IReadOnlyDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlydictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlydictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: LlamaLogic.Packages.DataBasePackedFile.GetAllSizesAsync*
  commentId: Overload:LlamaLogic.Packages.DataBasePackedFile.GetAllSizesAsync
  href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_GetAllSizesAsync_System_Predicate_LlamaLogic_Packages_ResourceKey__System_Threading_CancellationToken_
  name: GetAllSizesAsync
  nameWithType: DataBasePackedFile.GetAllSizesAsync
  fullName: LlamaLogic.Packages.DataBasePackedFile.GetAllSizesAsync
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyDictionary{LlamaLogic.Packages.ResourceKey,System.Int32}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyDictionary{LlamaLogic.Packages.ResourceKey,System.Int32}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<IReadOnlyDictionary<ResourceKey, int>>
  nameWithType: Task<IReadOnlyDictionary<ResourceKey, int>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyDictionary<LlamaLogic.Packages.ResourceKey, int>>
  nameWithType.vb: Task(Of IReadOnlyDictionary(Of ResourceKey, Integer))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IReadOnlyDictionary(Of LlamaLogic.Packages.ResourceKey, Integer))
  name.vb: Task(Of IReadOnlyDictionary(Of ResourceKey, Integer))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlydictionary-2
  - name: <
  - uid: LlamaLogic.Packages.ResourceKey
    name: ResourceKey
    href: LlamaLogic.Packages.ResourceKey.html
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlydictionary-2
  - name: (
  - name: Of
  - name: " "
  - uid: LlamaLogic.Packages.ResourceKey
    name: ResourceKey
    href: LlamaLogic.Packages.ResourceKey.html
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  - name: )
- uid: LlamaLogic.Packages.DataBasePackedFile.GetAsync*
  commentId: Overload:LlamaLogic.Packages.DataBasePackedFile.GetAsync
  href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_GetAsync_LlamaLogic_Packages_ResourceKey_System_Boolean_System_Threading_CancellationToken_
  name: GetAsync
  nameWithType: DataBasePackedFile.GetAsync
  fullName: LlamaLogic.Packages.DataBasePackedFile.GetAsync
- uid: LlamaLogic.Packages.DataBasePackedFile.GetCount*
  commentId: Overload:LlamaLogic.Packages.DataBasePackedFile.GetCount
  href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_GetCount
  name: GetCount
  nameWithType: DataBasePackedFile.GetCount
  fullName: LlamaLogic.Packages.DataBasePackedFile.GetCount
- uid: LlamaLogic.Packages.DataBasePackedFile.GetCountAsync*
  commentId: Overload:LlamaLogic.Packages.DataBasePackedFile.GetCountAsync
  href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_GetCountAsync_System_Threading_CancellationToken_
  name: GetCountAsync
  nameWithType: DataBasePackedFile.GetCountAsync
  fullName: LlamaLogic.Packages.DataBasePackedFile.GetCountAsync
- uid: System.Threading.Tasks.Task{System.Int32}
  commentId: T:System.Threading.Tasks.Task{System.Int32}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<int>
  nameWithType: Task<int>
  fullName: System.Threading.Tasks.Task<int>
  nameWithType.vb: Task(Of Integer)
  fullName.vb: System.Threading.Tasks.Task(Of Integer)
  name.vb: Task(Of Integer)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: LlamaLogic.Packages.Models.Data.DataModel
  commentId: T:LlamaLogic.Packages.Models.Data.DataModel
  parent: LlamaLogic.Packages.Models.Data
  href: LlamaLogic.Packages.Models.Data.DataModel.html
  name: DataModel
  nameWithType: DataModel
  fullName: LlamaLogic.Packages.Models.Data.DataModel
- uid: LlamaLogic.Packages.DataBasePackedFile.GetData*
  commentId: Overload:LlamaLogic.Packages.DataBasePackedFile.GetData
  href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_GetData_LlamaLogic_Packages_ResourceKey_System_Boolean_
  name: GetData
  nameWithType: DataBasePackedFile.GetData
  fullName: LlamaLogic.Packages.DataBasePackedFile.GetData
- uid: LlamaLogic.Packages.Models.Data
  commentId: N:LlamaLogic.Packages.Models.Data
  href: LlamaLogic.html
  name: LlamaLogic.Packages.Models.Data
  nameWithType: LlamaLogic.Packages.Models.Data
  fullName: LlamaLogic.Packages.Models.Data
  spec.csharp:
  - uid: LlamaLogic
    name: LlamaLogic
    href: LlamaLogic.html
  - name: .
  - uid: LlamaLogic.Packages
    name: Packages
    href: LlamaLogic.Packages.html
  - name: .
  - uid: LlamaLogic.Packages.Models
    name: Models
    href: LlamaLogic.Packages.Models.html
  - name: .
  - uid: LlamaLogic.Packages.Models.Data
    name: Data
    href: LlamaLogic.Packages.Models.Data.html
  spec.vb:
  - uid: LlamaLogic
    name: LlamaLogic
    href: LlamaLogic.html
  - name: .
  - uid: LlamaLogic.Packages
    name: Packages
    href: LlamaLogic.Packages.html
  - name: .
  - uid: LlamaLogic.Packages.Models
    name: Models
    href: LlamaLogic.Packages.Models.html
  - name: .
  - uid: LlamaLogic.Packages.Models.Data
    name: Data
    href: LlamaLogic.Packages.Models.Data.html
- uid: LlamaLogic.Packages.DataBasePackedFile.GetDataAsync*
  commentId: Overload:LlamaLogic.Packages.DataBasePackedFile.GetDataAsync
  href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_GetDataAsync_LlamaLogic_Packages_ResourceKey_System_Boolean_System_Threading_CancellationToken_
  name: GetDataAsync
  nameWithType: DataBasePackedFile.GetDataAsync
  fullName: LlamaLogic.Packages.DataBasePackedFile.GetDataAsync
- uid: System.Threading.Tasks.Task{LlamaLogic.Packages.Models.Data.DataModel}
  commentId: T:System.Threading.Tasks.Task{LlamaLogic.Packages.Models.Data.DataModel}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<DataModel>
  nameWithType: Task<DataModel>
  fullName: System.Threading.Tasks.Task<LlamaLogic.Packages.Models.Data.DataModel>
  nameWithType.vb: Task(Of DataModel)
  fullName.vb: System.Threading.Tasks.Task(Of LlamaLogic.Packages.Models.Data.DataModel)
  name.vb: Task(Of DataModel)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: LlamaLogic.Packages.Models.Data.DataModel
    name: DataModel
    href: LlamaLogic.Packages.Models.Data.DataModel.html
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: LlamaLogic.Packages.Models.Data.DataModel
    name: DataModel
    href: LlamaLogic.Packages.Models.Data.DataModel.html
  - name: )
- uid: LlamaLogic.Packages.DataBasePackedFile.GetKeys*
  commentId: Overload:LlamaLogic.Packages.DataBasePackedFile.GetKeys
  href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_GetKeys_LlamaLogic_Packages_ResourceKeyOrder_
  name: GetKeys
  nameWithType: DataBasePackedFile.GetKeys
  fullName: LlamaLogic.Packages.DataBasePackedFile.GetKeys
- uid: LlamaLogic.Packages.DataBasePackedFile.GetKeysAsync*
  commentId: Overload:LlamaLogic.Packages.DataBasePackedFile.GetKeysAsync
  href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_GetKeysAsync_LlamaLogic_Packages_ResourceKeyOrder_System_Threading_CancellationToken_
  name: GetKeysAsync
  nameWithType: DataBasePackedFile.GetKeysAsync
  fullName: LlamaLogic.Packages.DataBasePackedFile.GetKeysAsync
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyList{LlamaLogic.Packages.ResourceKey}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyList{LlamaLogic.Packages.ResourceKey}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<IReadOnlyList<ResourceKey>>
  nameWithType: Task<IReadOnlyList<ResourceKey>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<LlamaLogic.Packages.ResourceKey>>
  nameWithType.vb: Task(Of IReadOnlyList(Of ResourceKey))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IReadOnlyList(Of LlamaLogic.Packages.ResourceKey))
  name.vb: Task(Of IReadOnlyList(Of ResourceKey))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: <
  - uid: LlamaLogic.Packages.ResourceKey
    name: ResourceKey
    href: LlamaLogic.Packages.ResourceKey.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: (
  - name: Of
  - name: " "
  - uid: LlamaLogic.Packages.ResourceKey
    name: ResourceKey
    href: LlamaLogic.Packages.ResourceKey.html
  - name: )
  - name: )
- uid: LlamaLogic.Packages.DataBasePackedFile.GetKeysByName*
  commentId: Overload:LlamaLogic.Packages.DataBasePackedFile.GetKeysByName
  href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_GetKeysByName_System_String_
  name: GetKeysByName
  nameWithType: DataBasePackedFile.GetKeysByName
  fullName: LlamaLogic.Packages.DataBasePackedFile.GetKeysByName
- uid: LlamaLogic.Packages.DataBasePackedFile.GetKeysByNameAsync*
  commentId: Overload:LlamaLogic.Packages.DataBasePackedFile.GetKeysByNameAsync
  href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_GetKeysByNameAsync_System_String_System_Threading_CancellationToken_
  name: GetKeysByNameAsync
  nameWithType: DataBasePackedFile.GetKeysByNameAsync
  fullName: LlamaLogic.Packages.DataBasePackedFile.GetKeysByNameAsync
- uid: LlamaLogic.Packages.DataBasePackedFile.GetModel*
  commentId: Overload:LlamaLogic.Packages.DataBasePackedFile.GetModel
  href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_GetModel__1_LlamaLogic_Packages_ResourceKey_System_Boolean_
  name: GetModel
  nameWithType: DataBasePackedFile.GetModel
  fullName: LlamaLogic.Packages.DataBasePackedFile.GetModel
- uid: '{TModel}'
  commentId: '!:TModel'
  definition: TModel
  name: TModel
  nameWithType: TModel
  fullName: TModel
- uid: TModel
  commentId: '!:TModel'
  name: TModel
  nameWithType: TModel
  fullName: TModel
- uid: LlamaLogic.Packages.DataBasePackedFile.GetModelAsync*
  commentId: Overload:LlamaLogic.Packages.DataBasePackedFile.GetModelAsync
  href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_GetModelAsync__1_LlamaLogic_Packages_ResourceKey_System_Boolean_System_Threading_CancellationToken_
  name: GetModelAsync
  nameWithType: DataBasePackedFile.GetModelAsync
  fullName: LlamaLogic.Packages.DataBasePackedFile.GetModelAsync
- uid: System.Threading.Tasks.Task{{TModel}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TModel>
  nameWithType: Task<TModel>
  fullName: System.Threading.Tasks.Task<TModel>
  nameWithType.vb: Task(Of TModel)
  fullName.vb: System.Threading.Tasks.Task(Of TModel)
  name.vb: Task(Of TModel)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TModel
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TModel
  - name: )
- uid: LlamaLogic.Packages.Models.ModFileManifest.ModFileManifestModel
  commentId: T:LlamaLogic.Packages.Models.ModFileManifest.ModFileManifestModel
  parent: LlamaLogic.Packages.Models.ModFileManifest
  href: LlamaLogic.Packages.Models.ModFileManifest.ModFileManifestModel.html
  name: ModFileManifestModel
  nameWithType: ModFileManifestModel
  fullName: LlamaLogic.Packages.Models.ModFileManifest.ModFileManifestModel
- uid: LlamaLogic.Packages.DataBasePackedFile.GetModFileManifest*
  commentId: Overload:LlamaLogic.Packages.DataBasePackedFile.GetModFileManifest
  href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_GetModFileManifest_LlamaLogic_Packages_ResourceKey_System_Boolean_
  name: GetModFileManifest
  nameWithType: DataBasePackedFile.GetModFileManifest
  fullName: LlamaLogic.Packages.DataBasePackedFile.GetModFileManifest
- uid: LlamaLogic.Packages.Models.ModFileManifest
  commentId: N:LlamaLogic.Packages.Models.ModFileManifest
  href: LlamaLogic.html
  name: LlamaLogic.Packages.Models.ModFileManifest
  nameWithType: LlamaLogic.Packages.Models.ModFileManifest
  fullName: LlamaLogic.Packages.Models.ModFileManifest
  spec.csharp:
  - uid: LlamaLogic
    name: LlamaLogic
    href: LlamaLogic.html
  - name: .
  - uid: LlamaLogic.Packages
    name: Packages
    href: LlamaLogic.Packages.html
  - name: .
  - uid: LlamaLogic.Packages.Models
    name: Models
    href: LlamaLogic.Packages.Models.html
  - name: .
  - uid: LlamaLogic.Packages.Models.ModFileManifest
    name: ModFileManifest
    href: LlamaLogic.Packages.Models.ModFileManifest.html
  spec.vb:
  - uid: LlamaLogic
    name: LlamaLogic
    href: LlamaLogic.html
  - name: .
  - uid: LlamaLogic.Packages
    name: Packages
    href: LlamaLogic.Packages.html
  - name: .
  - uid: LlamaLogic.Packages.Models
    name: Models
    href: LlamaLogic.Packages.Models.html
  - name: .
  - uid: LlamaLogic.Packages.Models.ModFileManifest
    name: ModFileManifest
    href: LlamaLogic.Packages.Models.ModFileManifest.html
- uid: LlamaLogic.Packages.DataBasePackedFile.GetModFileManifestAsync*
  commentId: Overload:LlamaLogic.Packages.DataBasePackedFile.GetModFileManifestAsync
  href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_GetModFileManifestAsync_LlamaLogic_Packages_ResourceKey_System_Boolean_System_Threading_CancellationToken_
  name: GetModFileManifestAsync
  nameWithType: DataBasePackedFile.GetModFileManifestAsync
  fullName: LlamaLogic.Packages.DataBasePackedFile.GetModFileManifestAsync
- uid: System.Threading.Tasks.Task{LlamaLogic.Packages.Models.ModFileManifest.ModFileManifestModel}
  commentId: T:System.Threading.Tasks.Task{LlamaLogic.Packages.Models.ModFileManifest.ModFileManifestModel}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<ModFileManifestModel>
  nameWithType: Task<ModFileManifestModel>
  fullName: System.Threading.Tasks.Task<LlamaLogic.Packages.Models.ModFileManifest.ModFileManifestModel>
  nameWithType.vb: Task(Of ModFileManifestModel)
  fullName.vb: System.Threading.Tasks.Task(Of LlamaLogic.Packages.Models.ModFileManifest.ModFileManifestModel)
  name.vb: Task(Of ModFileManifestModel)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: LlamaLogic.Packages.Models.ModFileManifest.ModFileManifestModel
    name: ModFileManifestModel
    href: LlamaLogic.Packages.Models.ModFileManifest.ModFileManifestModel.html
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: LlamaLogic.Packages.Models.ModFileManifest.ModFileManifestModel
    name: ModFileManifestModel
    href: LlamaLogic.Packages.Models.ModFileManifest.ModFileManifestModel.html
  - name: )
- uid: LlamaLogic.Packages.DataBasePackedFile.GetNameByKey*
  commentId: Overload:LlamaLogic.Packages.DataBasePackedFile.GetNameByKey
  href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_GetNameByKey_LlamaLogic_Packages_ResourceKey_
  name: GetNameByKey
  nameWithType: DataBasePackedFile.GetNameByKey
  fullName: LlamaLogic.Packages.DataBasePackedFile.GetNameByKey
- uid: LlamaLogic.Packages.DataBasePackedFile.GetNameByKeyAsync*
  commentId: Overload:LlamaLogic.Packages.DataBasePackedFile.GetNameByKeyAsync
  href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_GetNameByKeyAsync_LlamaLogic_Packages_ResourceKey_System_Threading_CancellationToken_
  name: GetNameByKeyAsync
  nameWithType: DataBasePackedFile.GetNameByKeyAsync
  fullName: LlamaLogic.Packages.DataBasePackedFile.GetNameByKeyAsync
- uid: System.Threading.Tasks.Task{System.String}
  commentId: T:System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<string>
  nameWithType: Task<string>
  fullName: System.Threading.Tasks.Task<string>
  nameWithType.vb: Task(Of String)
  fullName.vb: System.Threading.Tasks.Task(Of String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: LlamaLogic.Packages.DataBasePackedFile.GetNames*
  commentId: Overload:LlamaLogic.Packages.DataBasePackedFile.GetNames
  href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_GetNames
  name: GetNames
  nameWithType: DataBasePackedFile.GetNames
  fullName: LlamaLogic.Packages.DataBasePackedFile.GetNames
- uid: System.Collections.Generic.IReadOnlyList{System.String}
  commentId: T:System.Collections.Generic.IReadOnlyList{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  name: IReadOnlyList<string>
  nameWithType: IReadOnlyList<string>
  fullName: System.Collections.Generic.IReadOnlyList<string>
  nameWithType.vb: IReadOnlyList(Of String)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of String)
  name.vb: IReadOnlyList(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: LlamaLogic.Packages.DataBasePackedFile.GetNamesAsync*
  commentId: Overload:LlamaLogic.Packages.DataBasePackedFile.GetNamesAsync
  href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_GetNamesAsync_System_Threading_CancellationToken_
  name: GetNamesAsync
  nameWithType: DataBasePackedFile.GetNamesAsync
  fullName: LlamaLogic.Packages.DataBasePackedFile.GetNamesAsync
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyList{System.String}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyList{System.String}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<IReadOnlyList<string>>
  nameWithType: Task<IReadOnlyList<string>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<string>>
  nameWithType.vb: Task(Of IReadOnlyList(Of String))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IReadOnlyList(Of String))
  name.vb: Task(Of IReadOnlyList(Of String))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  - name: )
- uid: LlamaLogic.Packages.DataBasePackedFile.GetRaw*
  commentId: Overload:LlamaLogic.Packages.DataBasePackedFile.GetRaw
  href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_GetRaw_LlamaLogic_Packages_ResourceKey_System_Boolean_
  name: GetRaw
  nameWithType: DataBasePackedFile.GetRaw
  fullName: LlamaLogic.Packages.DataBasePackedFile.GetRaw
- uid: LlamaLogic.Packages.DataBasePackedFile.GetRawAsync*
  commentId: Overload:LlamaLogic.Packages.DataBasePackedFile.GetRawAsync
  href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_GetRawAsync_LlamaLogic_Packages_ResourceKey_System_Boolean_System_Threading_CancellationToken_
  name: GetRawAsync
  nameWithType: DataBasePackedFile.GetRawAsync
  fullName: LlamaLogic.Packages.DataBasePackedFile.GetRawAsync
- uid: LlamaLogic.Packages.DataBasePackedFile.GetSize*
  commentId: Overload:LlamaLogic.Packages.DataBasePackedFile.GetSize
  href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_GetSize_LlamaLogic_Packages_ResourceKey_
  name: GetSize
  nameWithType: DataBasePackedFile.GetSize
  fullName: LlamaLogic.Packages.DataBasePackedFile.GetSize
- uid: LlamaLogic.Packages.DataBasePackedFile.GetSizeAsync*
  commentId: Overload:LlamaLogic.Packages.DataBasePackedFile.GetSizeAsync
  href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_GetSizeAsync_LlamaLogic_Packages_ResourceKey_System_Threading_CancellationToken_
  name: GetSizeAsync
  nameWithType: DataBasePackedFile.GetSizeAsync
  fullName: LlamaLogic.Packages.DataBasePackedFile.GetSizeAsync
- uid: LlamaLogic.Packages.Models.StringTableModel
  commentId: T:LlamaLogic.Packages.Models.StringTableModel
  parent: LlamaLogic.Packages.Models
  href: LlamaLogic.Packages.Models.StringTableModel.html
  name: StringTableModel
  nameWithType: StringTableModel
  fullName: LlamaLogic.Packages.Models.StringTableModel
- uid: LlamaLogic.Packages.DataBasePackedFile.GetStringTable*
  commentId: Overload:LlamaLogic.Packages.DataBasePackedFile.GetStringTable
  href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_GetStringTable_LlamaLogic_Packages_ResourceKey_System_Boolean_
  name: GetStringTable
  nameWithType: DataBasePackedFile.GetStringTable
  fullName: LlamaLogic.Packages.DataBasePackedFile.GetStringTable
- uid: LlamaLogic.Packages.Models
  commentId: N:LlamaLogic.Packages.Models
  href: LlamaLogic.html
  name: LlamaLogic.Packages.Models
  nameWithType: LlamaLogic.Packages.Models
  fullName: LlamaLogic.Packages.Models
  spec.csharp:
  - uid: LlamaLogic
    name: LlamaLogic
    href: LlamaLogic.html
  - name: .
  - uid: LlamaLogic.Packages
    name: Packages
    href: LlamaLogic.Packages.html
  - name: .
  - uid: LlamaLogic.Packages.Models
    name: Models
    href: LlamaLogic.Packages.Models.html
  spec.vb:
  - uid: LlamaLogic
    name: LlamaLogic
    href: LlamaLogic.html
  - name: .
  - uid: LlamaLogic.Packages
    name: Packages
    href: LlamaLogic.Packages.html
  - name: .
  - uid: LlamaLogic.Packages.Models
    name: Models
    href: LlamaLogic.Packages.Models.html
- uid: LlamaLogic.Packages.DataBasePackedFile.GetStringTableAsync*
  commentId: Overload:LlamaLogic.Packages.DataBasePackedFile.GetStringTableAsync
  href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_GetStringTableAsync_LlamaLogic_Packages_ResourceKey_System_Boolean_System_Threading_CancellationToken_
  name: GetStringTableAsync
  nameWithType: DataBasePackedFile.GetStringTableAsync
  fullName: LlamaLogic.Packages.DataBasePackedFile.GetStringTableAsync
- uid: System.Threading.Tasks.Task{LlamaLogic.Packages.Models.StringTableModel}
  commentId: T:System.Threading.Tasks.Task{LlamaLogic.Packages.Models.StringTableModel}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<StringTableModel>
  nameWithType: Task<StringTableModel>
  fullName: System.Threading.Tasks.Task<LlamaLogic.Packages.Models.StringTableModel>
  nameWithType.vb: Task(Of StringTableModel)
  fullName.vb: System.Threading.Tasks.Task(Of LlamaLogic.Packages.Models.StringTableModel)
  name.vb: Task(Of StringTableModel)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: LlamaLogic.Packages.Models.StringTableModel
    name: StringTableModel
    href: LlamaLogic.Packages.Models.StringTableModel.html
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: LlamaLogic.Packages.Models.StringTableModel
    name: StringTableModel
    href: LlamaLogic.Packages.Models.StringTableModel.html
  - name: )
- uid: LlamaLogic.Packages.DataBasePackedFile.GetText*
  commentId: Overload:LlamaLogic.Packages.DataBasePackedFile.GetText
  href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_GetText_LlamaLogic_Packages_ResourceKey_System_Boolean_
  name: GetText
  nameWithType: DataBasePackedFile.GetText
  fullName: LlamaLogic.Packages.DataBasePackedFile.GetText
- uid: LlamaLogic.Packages.DataBasePackedFile.GetTextAsync*
  commentId: Overload:LlamaLogic.Packages.DataBasePackedFile.GetTextAsync
  href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_GetTextAsync_LlamaLogic_Packages_ResourceKey_System_Boolean_System_Threading_CancellationToken_
  name: GetTextAsync
  nameWithType: DataBasePackedFile.GetTextAsync
  fullName: LlamaLogic.Packages.DataBasePackedFile.GetTextAsync
- uid: System.Xml.Linq.XDocument
  commentId: T:System.Xml.Linq.XDocument
  parent: System.Xml.Linq
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.xml.linq.xdocument
  name: XDocument
  nameWithType: XDocument
  fullName: System.Xml.Linq.XDocument
- uid: LlamaLogic.Packages.DataBasePackedFile.GetXml*
  commentId: Overload:LlamaLogic.Packages.DataBasePackedFile.GetXml
  href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_GetXml_LlamaLogic_Packages_ResourceKey_System_Boolean_
  name: GetXml
  nameWithType: DataBasePackedFile.GetXml
  fullName: LlamaLogic.Packages.DataBasePackedFile.GetXml
- uid: System.Xml.Linq
  commentId: N:System.Xml.Linq
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Xml.Linq
  nameWithType: System.Xml.Linq
  fullName: System.Xml.Linq
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Xml
    name: Xml
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml
  - name: .
  - uid: System.Xml.Linq
    name: Linq
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml.linq
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Xml
    name: Xml
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml
  - name: .
  - uid: System.Xml.Linq
    name: Linq
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml.linq
- uid: LlamaLogic.Packages.DataBasePackedFile.GetXmlAsync*
  commentId: Overload:LlamaLogic.Packages.DataBasePackedFile.GetXmlAsync
  href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_GetXmlAsync_LlamaLogic_Packages_ResourceKey_System_Boolean_System_Threading_CancellationToken_
  name: GetXmlAsync
  nameWithType: DataBasePackedFile.GetXmlAsync
  fullName: LlamaLogic.Packages.DataBasePackedFile.GetXmlAsync
- uid: System.Threading.Tasks.Task{System.Xml.Linq.XDocument}
  commentId: T:System.Threading.Tasks.Task{System.Xml.Linq.XDocument}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<XDocument>
  nameWithType: Task<XDocument>
  fullName: System.Threading.Tasks.Task<System.Xml.Linq.XDocument>
  nameWithType.vb: Task(Of XDocument)
  fullName.vb: System.Threading.Tasks.Task(Of System.Xml.Linq.XDocument)
  name.vb: Task(Of XDocument)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Xml.Linq.XDocument
    name: XDocument
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml.linq.xdocument
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Xml.Linq.XDocument
    name: XDocument
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml.linq.xdocument
  - name: )
- uid: LlamaLogic.Packages.DataBasePackedFile.LoadAll*
  commentId: Overload:LlamaLogic.Packages.DataBasePackedFile.LoadAll
  href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_LoadAll_System_Boolean_LlamaLogic_Packages_CompressionMode_
  name: LoadAll
  nameWithType: DataBasePackedFile.LoadAll
  fullName: LlamaLogic.Packages.DataBasePackedFile.LoadAll
- uid: LlamaLogic.Packages.DataBasePackedFile.LoadNames*
  commentId: Overload:LlamaLogic.Packages.DataBasePackedFile.LoadNames
  href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_LoadNames
  name: LoadNames
  nameWithType: DataBasePackedFile.LoadNames
  fullName: LlamaLogic.Packages.DataBasePackedFile.LoadNames
- uid: LlamaLogic.Packages.DataBasePackedFile.LoadNamesAsync*
  commentId: Overload:LlamaLogic.Packages.DataBasePackedFile.LoadNamesAsync
  href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_LoadNamesAsync_System_Threading_CancellationToken_
  name: LoadNamesAsync
  nameWithType: DataBasePackedFile.LoadNamesAsync
  fullName: LlamaLogic.Packages.DataBasePackedFile.LoadNamesAsync
- uid: LlamaLogic.Packages.DataBasePackedFile.LoadAllAsync*
  commentId: Overload:LlamaLogic.Packages.DataBasePackedFile.LoadAllAsync
  href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_LoadAllAsync_System_Boolean_LlamaLogic_Packages_CompressionMode_System_Threading_CancellationToken_
  name: LoadAllAsync
  nameWithType: DataBasePackedFile.LoadAllAsync
  fullName: LlamaLogic.Packages.DataBasePackedFile.LoadAllAsync
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.invalidoperationexception
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: LlamaLogic.Packages.DataBasePackedFile.Save*
  commentId: Overload:LlamaLogic.Packages.DataBasePackedFile.Save
  href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_Save_System_Boolean_LlamaLogic_Packages_ResourceKeyOrder_
  name: Save
  nameWithType: DataBasePackedFile.Save
  fullName: LlamaLogic.Packages.DataBasePackedFile.Save
- uid: LlamaLogic.Packages.DataBasePackedFile.SaveAs*
  commentId: Overload:LlamaLogic.Packages.DataBasePackedFile.SaveAs
  href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_SaveAs_System_String_LlamaLogic_Packages_ResourceKeyOrder_
  name: SaveAs
  nameWithType: DataBasePackedFile.SaveAs
  fullName: LlamaLogic.Packages.DataBasePackedFile.SaveAs
- uid: LlamaLogic.Packages.DataBasePackedFile.SaveAsync*
  commentId: Overload:LlamaLogic.Packages.DataBasePackedFile.SaveAsync
  href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_SaveAsync_System_Boolean_LlamaLogic_Packages_ResourceKeyOrder_System_Threading_CancellationToken_
  name: SaveAsync
  nameWithType: DataBasePackedFile.SaveAsync
  fullName: LlamaLogic.Packages.DataBasePackedFile.SaveAsync
- uid: LlamaLogic.Packages.DataBasePackedFile.SaveAsAsync*
  commentId: Overload:LlamaLogic.Packages.DataBasePackedFile.SaveAsAsync
  href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_SaveAsAsync_System_String_LlamaLogic_Packages_ResourceKeyOrder_System_Threading_CancellationToken_
  name: SaveAsAsync
  nameWithType: DataBasePackedFile.SaveAsAsync
  fullName: LlamaLogic.Packages.DataBasePackedFile.SaveAsAsync
- uid: LlamaLogic.Packages.DataBasePackedFile.Set*
  commentId: Overload:LlamaLogic.Packages.DataBasePackedFile.Set
  href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_Set_LlamaLogic_Packages_ResourceKey_System_ReadOnlyMemory_System_Byte__LlamaLogic_Packages_CompressionMode_
  name: Set
  nameWithType: DataBasePackedFile.Set
  fullName: LlamaLogic.Packages.DataBasePackedFile.Set
- uid: LlamaLogic.Packages.Models.IModel
  commentId: T:LlamaLogic.Packages.Models.IModel
  parent: LlamaLogic.Packages.Models
  href: LlamaLogic.Packages.Models.IModel.html
  name: IModel
  nameWithType: IModel
  fullName: LlamaLogic.Packages.Models.IModel
- uid: LlamaLogic.Packages.DataBasePackedFile.SetAsync*
  commentId: Overload:LlamaLogic.Packages.DataBasePackedFile.SetAsync
  href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_SetAsync_LlamaLogic_Packages_ResourceKey_System_ReadOnlyMemory_System_Byte__LlamaLogic_Packages_CompressionMode_System_Threading_CancellationToken_
  name: SetAsync
  nameWithType: DataBasePackedFile.SetAsync
  fullName: LlamaLogic.Packages.DataBasePackedFile.SetAsync
- uid: LlamaLogic.Packages.DataBasePackedFile.SetXml*
  commentId: Overload:LlamaLogic.Packages.DataBasePackedFile.SetXml
  href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_SetXml_LlamaLogic_Packages_ResourceKey_System_String_LlamaLogic_Packages_CompressionMode_
  name: SetXml
  nameWithType: DataBasePackedFile.SetXml
  fullName: LlamaLogic.Packages.DataBasePackedFile.SetXml
- uid: LlamaLogic.Packages.DataBasePackedFile.SetXmlAsync*
  commentId: Overload:LlamaLogic.Packages.DataBasePackedFile.SetXmlAsync
  href: LlamaLogic.Packages.DataBasePackedFile.html#LlamaLogic_Packages_DataBasePackedFile_SetXmlAsync_LlamaLogic_Packages_ResourceKey_System_String_LlamaLogic_Packages_CompressionMode_System_Threading_CancellationToken_
  name: SetXmlAsync
  nameWithType: DataBasePackedFile.SetXmlAsync
  fullName: LlamaLogic.Packages.DataBasePackedFile.SetXmlAsync
