syntax = "proto2";
package EA.Sims4.Network;
import "ResourceKey.proto";


message Product {
	enum BundleContainment {
		LOOSE = 0;
		TIGHT = 1;
	}
	enum ProductType {
		CAS = 0;
		BB = 1;
		GAMEPLAY = 2;
		GENERIC_MTX = 3;
		INVALID_MTX = 4;
	}
	required uint64 id = 1;
	required string offerid = 2;
	repeated uint64 children = 3;
	repeated .EA.Sims4.Network.ResourceKey instances = 4;
	optional string name = 5;
	repeated .EA.Sims4.Network.Country countries = 6;
	required bool isBundle = 7;
	optional .EA.Sims4.Network.Product.BundleContainment containmentType = 8;
	repeated uint64 childProductIds = 9;
	optional int32 bundlePriority = 10;
	optional uint32 keyNameHash = 11;
	optional uint32 keyDescriptionHash = 12;
	optional uint32 keyUpsellDescriptionHash = 13;
	optional uint64 thumbnailResourceInstanceIdHash = 14;
	optional bool hiddenInCatalog = 15;
	optional bool isPurchasable = 16 [default = true];
	optional uint32 celebrationPriority = 17 [default = 400];
	optional bool localizedImages = 18 [default = false];
	optional bool show_variants = 19 [default = false];
	optional uint64 keyImage = 20 [default = 0];
	optional .EA.Sims4.Network.Product.ProductType productType = 21;
	optional string productInfoURL = 22;
	optional bool isAvailable = 23 [default = true];
	optional bool showInPackDetail = 24 [default = true];
	optional int32 packId = 25 [default = -1];
}

message OfferList {
	repeated string offer_id = 1;
}

message Catalog {
	required uint64 timestamp = 1;
	repeated .EA.Sims4.Network.Product products = 2;
}

message Country {
	required string countryCode = 1;
	repeated .EA.Sims4.Network.Price prices = 2;
}

message Price {
	required float price = 1;
	required string currency = 2;
	required string currencyType = 3;
	required string priceType = 4;
	optional uint64 startDate = 5;
	optional uint64 endDate = 6;
}

message ViewedEntitlements {
	repeated .EA.Sims4.Network.EntitlementNotification viewed_entitlements = 1;
}

message EntitlementNotification {
	enum ViewedState {
		VIEWED_INVALID = 0;
		VIEWED_NEW = 1;
		VIEWED_CELEBRATED = 2;
		VIEWED_USED = 4;
		VIEWED_ALL = 255;
	}
	enum TrialViewedStateMask {
		TRIAL_VIEWED_MASK_EXPIRED_TRIAL_OR_CONVERTED = 1;
		TRIAL_VIEWED_MASK_TRIALS_NOT_SUPPORTED = 2;
	}
	enum TrialViewedState {
		TRIAL_VIEWED_EXPIRED_TRIAL_OR_CONVERTED = 1;
		TRIAL_VIEWED_TRIALS_NOT_SUPPORTED = 2;
	}
	optional uint32 viewed_state = 2 [default = 1];
	optional uint64 product_id = 3;
	optional uint32 trial_viewed_state = 4;
	optional uint64 entitlement_id_at_trial_expiration_or_conversion = 5;
}
